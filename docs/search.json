[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 PFUDatabase authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/PFUDatabase_Demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PFUDatabase Demo","text":"vignette demonstrates features PFUDatabase package.","code":""},{"path":"/articles/PFUDatabase_Demo.html","id":"load-pfudatabase","dir":"Articles","previous_headings":"","what":"Load PFUDatabase","title":"PFUDatabase Demo","text":"PFUDatabase package runs targets pipeline stores data Dropbox using pins package. retrieve data, one needs access Dropbox folder containing pipeline releases valid pin name. One valid pin name “psut” valid pin release “20220828T174526Z-60a07”. “20220828T174526Z-60a07” contains data countries (155) years (1960–2019).","code":"folder <- PFUSetup::get_abs_paths()[[\"pipeline_releases_folder\"]] folder #> [1] \"/Users/mkh2/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases\" # version <- \"20220828T174526Z-60a07\" # All countries version <- \"20220909T125050Z-e5a95\" # Only GHA psut_mats <- folder %>%    pins::board_folder(versioned = TRUE) %>%    pins::pin_read(\"psut\", version = version)"},{"path":"/articles/PFUDatabase_Demo.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"PFUDatabase Demo","text":"psut_mats R data frame. Let’s look contents. metadata columns contain following values.","code":"dplyr::glimpse(psut_mats) #> Rows: 588 #> Columns: 14 #> $ Country     <chr> \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"G… #> $ Method      <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"P… #> $ Energy.type <chr> \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\"… #> $ Last.stage  <chr> \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Fin… #> $ Year        <dbl> 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980… #> $ IEAMW       <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"I… #> $ V           <list> <<matrix[12 x 14]>>, <<matrix[10 x 14]>>, <<matrix[10 x 1… #> $ Y           <list> <<matrix[12 x 22]>>, <<matrix[12 x 23]>>, <<matrix[12 x 2… #> $ S_units     <list> <<matrix[16 x 1]>>, <<matrix[16 x 1]>>, <<matrix[16 x 1]>… #> $ R           <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U_feed      <list> <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, … #> $ U_EIOU      <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U           <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … #> $ r_EIOU      <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … psut_mats$Country %>% unique() #> [1] \"GHA\" psut_mats$Method %>% unique() #> [1] \"PCM\" psut_mats$Energy.type %>% unique() #> [1] \"E\" \"X\" psut_mats$Last.stage %>% unique() #> [1] \"Final\"  \"Useful\" c(psut_mats$Year %>% min(), psut_mats$Year %>% max()) #> [1] 1971 2019 psut_mats$IEAMW %>% unique() #> [1] \"IEA\"  \"MW\"   \"Both\""},{"path":"/articles/PFUDatabase_Demo.html","id":"example-ecc-matrices","dir":"Articles","previous_headings":"","what":"Example ECC matrices","title":"PFUDatabase Demo","text":"Let’s look matrices using Ghana 1971 example. Simple matrices can found muscle work data frames. matrices can dumped Excel file easier browsing. Sankey diagram can created. useful energy last stage, see food feed creating muscle work. IEA data give rise complicated matrices. one last stage final energy. push useful energy, matrices become complex. Sankey diagram unsurprisingly busier, matrices keep everything organized.","code":"GHA1971_MW_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"MW\") dplyr::glimpse(GHA1971_MW_final) #> Rows: 1 #> Columns: 14 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> GHA1971_MW_final$R[[1]] #>                        Biomass [from Resources] #> Resources [of Biomass]                 1026.386 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$U[[1]] #>                             Farms Feed production Food production #> Biomass                     0.000        119.1334        907.2526 #> Biomass [from Resources] 1026.386          0.0000          0.0000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" GHA1971_MW_final$V[[1]] #>                  Biomass     Feed     Food #> Farms           1026.386  0.00000   0.0000 #> Feed production    0.000 53.61001   0.0000 #> Food production    0.000  0.00000 471.7713 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$Y[[1]] #>      Agriculture/forestry Commercial and public services #> Feed             26.50066                        0.00000 #> Food            367.65411                       49.19114 #>      Industry not elsewhere specified Transport not elsewhere specified #> Feed                          0.00000                          27.10935 #> Food                         54.92608                           0.00000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" gha_mw_file <- file.path(\"~\", \"GHA1971_MW_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_MW_final, path = gha_mw_file, overwrite_file = TRUE) GHA1971_MW_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_MW_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"MW\") GHA1971_MW_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_final, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_useful.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_useful, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"/articles/PFUDatabase_Demo.html","id":"example-calculations","dir":"Articles","previous_headings":"","what":"Example calculations","title":"PFUDatabase Demo","text":"following subsections illustrate example calculations.","code":""},{"path":"/articles/PFUDatabase_Demo.html","id":"matrix-math","dir":"Articles","previous_headings":"Example calculations","what":"Matrix math","title":"PFUDatabase Demo","text":"calculate value added matrix (W) within data frame using dplyr::mutate().","code":"with_W <- GHA1971_MW_final %>%    dplyr::mutate(     W = matsbyname::transpose_byname(GHA1971_MW_final$V) %>%       matsbyname::difference_byname(GHA1971_MW_final$U)   ) dplyr::glimpse(with_W) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> #> $ W           <list> <<matrix[4 x 3]>> with_W$W[[1]] #>                              Farms Feed production Food production #> Biomass                   1026.386      -119.13336       -907.2526 #> Biomass [from Resources] -1026.386         0.00000          0.0000 #> Feed                         0.000        53.61001          0.0000 #> Food                         0.000         0.00000        471.7713 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"/articles/PFUDatabase_Demo.html","id":"upstream-swim","dir":"Articles","previous_headings":"Example calculations","what":"Upstream swim","title":"PFUDatabase Demo","text":"PSUT framework allows upstream downstream “swims.” final demand matrix IEA data. Let’s say wanted know energy (stages) required provide residential energy country. can use input-output ``upstream swim’’ analysis. First, calculate input-output matrices. Next, define Y_prime matrix contains final demand residences. Now let’s swim upstream Y_prime matrix see upstream energy needed supply Residential final demand. _prime matrices want. keep make new Sankey diagram. Make Sankey diagram energy required supply Residential demand . Sankey diagram, can see ways Ghanaian residences demanded upstream primary energy 1971.","code":"# View(GHA1971_IEA_final$Y[[1]]) with_io_mats <- GHA1971_IEA_final %>%    Recca::calc_io_mats() dplyr::glimpse(with_io_mats) #> Rows: 1 #> Columns: 34 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ V           <list> <<matrix[12 x 14]>> #> $ Y           <list> <<matrix[12 x 22]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ R           <list> <<matrix[2 x 2]>> #> $ U_feed      <list> <<matrix[6 x 5]>> #> $ U_EIOU      <list> <<matrix[2 x 2]>> #> $ U           <list> <<matrix[8 x 5]>> #> $ r_EIOU      <list> <<matrix[8 x 5]>> #> $ y           <list> <<matrix[12 x 1]>> #> $ q           <list> <<matrix[16 x 1]>> #> $ f           <list> <<matrix[5 x 1]>> #> $ g           <list> <<matrix[12 x 1]>> #> $ h           <list> <<matrix[2 x 1]>> #> $ r           <list> <<matrix[2 x 1]>> #> $ W           <list> <<matrix[16 x 12]>> #> $ Z           <list> <<matrix[8 x 12]>> #> $ K           <list> <<matrix[8 x 5]>> #> $ C           <list> <<matrix[14 x 12]>> #> $ D           <list> <<matrix[12 x 16]>> #> $ A           <list> <<matrix[8 x 16]>> #> $ O           <list> <<matrix[2 x 2]>> #> $ L_pxp       <list> <<matrix[16 x 16]>> #> $ L_ixp       <list> <<matrix[12 x 16]>> #> $ Z_feed      <list> <<matrix[6 x 12]>> #> $ K_feed      <list> <<matrix[6 x 5]>> #> $ A_feed      <list> <<matrix[6 x 16]>> #> $ L_pxp_feed  <list> <<matrix[16 x 16]>> #> $ L_ixp_feed  <list> <<matrix[12 x 16]>> with_Y_prime <- with_io_mats %>%    dplyr::mutate(     Y_prime = Y %>%        matsbyname::select_cols_byname(\"Residential\")   ) with_Y_prime$Y_prime[[1]] #>                                       Residential #> Aviation gasoline                               0 #> Charcoal                                      119 #> Crude oil                                       0 #> Electricity                                    14 #> Fuel oil                                        0 #> Gas/diesel oil excl. biofuels                   0 #> Kerosene type jet fuel excl. biofuels           0 #> Liquefied petroleum gases (LPG)                 3 #> Lubricants                                      0 #> Motor gasoline excl. biofuels                   0 #> Other kerosene                                 84 #> Primary solid biofuels                       1464 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" residential_ecc <- with_Y_prime %>%    Recca::new_Y() dplyr::glimpse(residential_ecc) #> Rows: 1 #> Columns: 41 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ V            <list> <<matrix[12 x 14]>> #> $ Y            <list> <<matrix[12 x 22]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ R            <list> <<matrix[2 x 2]>> #> $ U_feed       <list> <<matrix[6 x 5]>> #> $ U_EIOU       <list> <<matrix[2 x 2]>> #> $ U            <list> <<matrix[8 x 5]>> #> $ r_EIOU       <list> <<matrix[8 x 5]>> #> $ y            <list> <<matrix[12 x 1]>> #> $ q            <list> <<matrix[16 x 1]>> #> $ f            <list> <<matrix[5 x 1]>> #> $ g            <list> <<matrix[12 x 1]>> #> $ h            <list> <<matrix[2 x 1]>> #> $ r            <list> <<matrix[2 x 1]>> #> $ W            <list> <<matrix[16 x 12]>> #> $ Z            <list> <<matrix[8 x 12]>> #> $ K            <list> <<matrix[8 x 5]>> #> $ C            <list> <<matrix[14 x 12]>> #> $ D            <list> <<matrix[12 x 16]>> #> $ A            <list> <<matrix[8 x 16]>> #> $ O            <list> <<matrix[2 x 2]>> #> $ L_pxp        <list> <<matrix[16 x 16]>> #> $ L_ixp        <list> <<matrix[12 x 16]>> #> $ Z_feed       <list> <<matrix[6 x 12]>> #> $ K_feed       <list> <<matrix[6 x 5]>> #> $ A_feed       <list> <<matrix[6 x 16]>> #> $ L_pxp_feed   <list> <<matrix[16 x 16]>> #> $ L_ixp_feed   <list> <<matrix[12 x 16]>> #> $ Y_prime      <list> <<matrix[12 x 1]>> #> $ R_prime      <list> <<matrix[2 x 16]>> #> $ U_prime      <list> <<matrix[8 x 12]>> #> $ U_feed_prime <list> <<matrix[6 x 12]>> #> $ U_EIOU_prime <list> <<matrix[8 x 12]>> #> $ r_EIOU_prime <list> <<matrix[8 x 12]>> #> $ V_prime      <list> <<matrix[12 x 16]>> residential_ecc_trimmed <- residential_ecc %>%    dplyr::select(Country, Method, Energy.type, Last.stage, Year, IEAMW,                 R_prime, U_prime, U_feed_prime, U_EIOU_prime,                  r_EIOU_prime, V_prime, Y_prime, S_units) %>%    dplyr::rename(     R = R_prime,      U = U_prime,      U_feed = U_feed_prime,     U_EIOU = U_EIOU_prime,     r_EIOU = r_EIOU_prime,     V = V_prime,      Y = Y_prime   ) %>%    dplyr::mutate(Sector = \"Residential\") dplyr::glimpse(residential_ecc_trimmed) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ R           <list> <<matrix[2 x 16]>> #> $ U           <list> <<matrix[8 x 12]>> #> $ U_feed      <list> <<matrix[6 x 12]>> #> $ U_EIOU      <list> <<matrix[8 x 12]>> #> $ r_EIOU      <list> <<matrix[8 x 12]>> #> $ V           <list> <<matrix[12 x 16]>> #> $ Y           <list> <<matrix[12 x 1]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ Sector      <chr> \"Residential\" residential_ecc_trimmed %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"/articles/PFUDatabase_Demo.html","id":"efficiencies","dir":"Articles","previous_headings":"Example calculations","what":"Efficiencies","title":"PFUDatabase Demo","text":"Residential sector isolated, can calculate efficiency energy use residences.","code":"primary_industries <- IEATools::tpes_flows primary_industries #> $resources #> [1] \"Resources\" #>  #> $production #> [1] \"Production\" #>  #> $imports #> [1] \"Imports\" #>  #> $exports #> [1] \"Exports\" #>  #> $international_marine_bunkers #> [1] \"International marine bunkers\" #>  #> $international_aviation_bunkers #> [1] \"International aviation bunkers\" #>  #> $exports_to_world_marine_bunkers #> [1] \"Exports to World marine bunkers\" #>  #> $exports_to_world_aviation_bunkers #> [1] \"Exports to World aviation bunkers\" #>  #> $stock_changes #> [1] \"Stock changes\" finaldemand_sectors <- IEATools::fd_sectors finaldemand_sectors #> $bkb_peat_briquette_plants #> [1] \"BKB/peat briquette plants\" #>  #> $blast_furnaces #> [1] \"Blast furnaces\" #>  #> $charcoal_plants #> [1] \"Charcoal production plants\" #>  #> $coal_liquefaction_plants #> [1] \"Coal liquefaction plants\" #>  #> $coal_mines #> [1] \"Coal mines\" #>  #> $coke_ovens #> [1] \"Coke ovens\" #>  #> $gas_works #> [1] \"Gas works\" #>  #> $gas_to_liquids_plants #> [1] \"Gas-to-liquids (GTL) plants\" #>  #> $gasification_plants #> [1] \"Gasification plants for biogases\" #>  #> $liquefaction_regasification_plants #> [1] \"Liquefaction (LNG) / regasification plants\" #>  #> $non_specified_eiou #> [1] \"Non-specified (energy)\" #>  #> $nuclear_industry #> [1] \"Nuclear industry\" #>  #> $oil_and_gas_extraction #> [1] \"Oil and gas extraction\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $oil_refineries #> [1] \"Oil refineries\" #>  #> $own_use_elect_chp_heat_plants #> [1] \"Own use in electricity, CHP and heat plants\" #>  #> $main_activity_producer_electricity_plants #> [1] \"Main activity producer electricity plants\" #>  #> $main_activity_producer_chp_plants #> [1] \"Main activity producer CHP plants\" #>  #> $main_activity_producer_heat_plants #> [1] \"Main activity producer heat plants\" #>  #> $patent_fuel_plants #> [1] \"Patent fuel plants\" #>  #> $pumped_storage_plants #> [1] \"Pumped storage plants\" #>  #> $mining_and_quarrying #> [1] \"Mining and quarrying\" #>  #> $construction #> [1] \"Construction\" #>  #> $manufacturing #> [1] \"Manufacturing\" #>  #> $iron_and_steel #> [1] \"Iron and steel\" #>  #> $chemical_and_petrochemical #> [1] \"Chemical and petrochemical\" #>  #> $non_ferrous_metals #> [1] \"Non-ferrous metals\" #>  #> $non_metallic_minerals #> [1] \"Non-metallic minerals\" #>  #> $transport_equipment #> [1] \"Transport equipment\" #>  #> $machinery #> [1] \"Machinery\" #>  #> $food_and_tobacco #> [1] \"Food and tobacco\" #>  #> $paper_pulp_and_print #> [1] \"Paper, pulp and print\" #>  #> $paper_pulp_and_printing #> [1] \"Paper, pulp and printing\" #>  #> $wood_and_wood_products #> [1] \"Wood and wood products\" #>  #> $textile_and_leather #> [1] \"Textile and leather\" #>  #> $non_specified_industry #> [1] \"Non-specified (industry)\" #>  #> $industry_not_elsewhere_specified #> [1] \"Industry not elsewhere specified\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $domestic_navigation #> [1] \"Domestic navigation\" #>  #> $world_marine_bunkers #> [1] \"World marine bunkers\" #>  #> $international_navigation #> [1] \"International navigation\" #>  #> $domestic_aviation #> [1] \"Domestic aviation\" #>  #> $world_aviation_bunkers #> [1] \"World aviation bunkers\" #>  #> $international_aviation #> [1] \"International aviation\" #>  #> $road #> [1] \"Road\" #>  #> $rail #> [1] \"Rail\" #>  #> $pipeline_transport #> [1] \"Pipeline transport\" #>  #> $non_specified_transport #> [1] \"Non-specified (transport)\" #>  #> $transport_not_elsewhere_specified #> [1] \"Transport not elsewhere specified\" #>  #> $residential #> [1] \"Residential\" #>  #> $commercial_and_public_services #> [1] \"Commercial and public services\" #>  #> $agriculture_forestry #> [1] \"Agriculture/forestry\" #>  #> $fishing #> [1] \"Fishing\" #>  #> $non_specified_other #> [1] \"Non-specified (other)\" #>  #> $final_consumption_not_elsewhere_specified #> [1] \"Final consumption not elsewhere specified\" #>  #> $non_energy_use_industry_transformation_energy #> [1] \"Non-energy use industry/transformation/energy\" #>  #> $non_energy_use_in_transport #> [1] \"Non-energy use in transport\" #>  #> $non_energy_use_in_other #> [1] \"Non-energy use in other\" #>  #> [[61]] #> [1] \"Non-energy use in industry\" #>  #> [[62]] #> [1] \"Non-energy use in construction\" #>  #> [[63]] #> [1] \"Non-energy use in mining and quarrying\" #>  #> [[64]] #> [1] \"Non-energy use in iron and steel\" #>  #> [[65]] #> [1] \"Non-energy use in chemical/petrochemical\" #>  #> [[66]] #> [1] \"Non-energy use in non-ferrous metals\" #>  #> [[67]] #> [1] \"Non-energy use in non-metallic minerals\" #>  #> [[68]] #> [1] \"Non-energy use in transport equipment\" #>  #> [[69]] #> [1] \"Non-energy use in machinery\" #>  #> [[70]] #> [1] \"Non-energy use in food/beverages/tobacco\" #>  #> [[71]] #> [1] \"Non-energy use in paper/pulp and printing\" #>  #> [[72]] #> [1] \"Non-energy use in wood and wood products\" #>  #> [[73]] #> [1] \"Non-energy use in textiles and leather\" #>  #> [[74]] #> [1] \"Non-energy use in industry not elsewhere specified\" with_efficiencies <- residential_ecc_trimmed %>%    Recca::primary_aggregates(p_industries = primary_industries, pattern_type = \"leading\") %>%    Recca::finaldemand_aggregates(fd_sectors = finaldemand_sectors) %>%   dplyr::mutate(     eta_pf_net = as.numeric(EX.fd_net) / as.numeric(EX.p),     eta_pf_gross = as.numeric(EX.fd_gross) / as.numeric(EX.p)   ) dplyr::glimpse(with_efficiencies) #> Rows: 1 #> Columns: 20 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ R            <list> <<matrix[2 x 16]>> #> $ U            <list> <<matrix[8 x 12]>> #> $ U_feed       <list> <<matrix[6 x 12]>> #> $ U_EIOU       <list> <<matrix[8 x 12]>> #> $ r_EIOU       <list> <<matrix[8 x 12]>> #> $ V            <list> <<matrix[12 x 16]>> #> $ Y            <list> <<matrix[12 x 1]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ Sector       <chr> \"Residential\" #> $ EX.p         <dbl> 0 #> $ EX.fd_net    <dbl> 1684 #> $ EX.fd_gross  <dbl> 1686.151 #> $ eta_pf_net   <dbl> Inf #> $ eta_pf_gross <dbl> Inf"},{"path":"/articles/PFUDatabase_Demo.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"PFUDatabase Demo","text":"different R package (PFUAggDatabase) calculations (!) countries; years; energy exergy; last stage final useful; IEA, MW, ; etc. calculations parallelized across countries. Despite parallelization, calculations take several hours 10-core laptop, (eventually) generating PFUAggDatabase supercomputer.","code":""},{"path":"/articles/PFUDatabase_Demo.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"PFUDatabase Demo","text":"combination, PSUT framework R packages matsbyname, matsindf, Recca provide powerful analysis tools energy conversion chains.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Heun. Author, maintainer. Zeke Marshall. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Kuperus Heun (2023). Functions Workflows Primary-Final-Useful Societal Exergy Analysis Within PSUT Framework. R package version 0.1.2. https://doi.org/10.5281/zenodo.5228375","code":"@Manual{,   title = {PFUDatabase: Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework},   author = {Matthew Kuperus Heun and Zeke Marshall},   year = {2023},   note = {R package version 0.1.2},   url = {https://doi.org/10.5281/zenodo.5228375}, }"},{"path":"/index.html","id":"pfudatabase-doi","dir":"","previous_headings":"","what":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"repository contains analysis code fellowship project Paul Brockway. One goal fellowship building world database country-specific primary, final, useful exergy 1960–2019. Analyses completed using targets environment provides helpful dependency management calculation pipeline. repository also includes ShinyApp visualization data analyzed targets workflow.","code":""},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"RStudio console, type run App simply open App.R script ShinyApp file click RunApp.","code":"library(targets)              # to load the targets package    tar_visnetwork()              # to see a directed acyclic graph of the calculations that will take place    tar_make_future(workers = 2)  # to execute the calculations (or `workers = 8`, if you have enough cores)"},{"path":"/index.html","id":"accessing-targets","dir":"","previous_headings":"Quick start","what":"Accessing targets","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"list targets can found PFUDatabase::target_names. list target meanings can found ?PFUDatabase::target_names. targets::tar_read(<<target>>) pulls value target targets cache. (<<target>> unquoted symbol Specified.)","code":""},{"path":"/index.html","id":"fresh-start","dir":"","previous_headings":"Quick start","what":"Fresh start","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"targets::tar_destroy() invalidates targets cache forces reanalysis everything. Reanalyzing everything may take .","code":""},{"path":"/index.html","id":"more","dir":"","previous_headings":"Quick start","what":"More","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"See targets manual.","code":""},{"path":"/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"Emmanuel Aramendia, University Leeds Paul Brockway, University Leeds Matthew Kuperus Heun, Calvin University Zeke Marshall, University Leeds","code":""},{"path":"/reference/add_iea_mw_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"create combined energy conversion chain (ECC) containing IEA muscle work data, PSUT matrices ECC summed. function sums R, U, V, Y, U_feed, U_eiou matrices directly. also re-calculates r_eiou matrix.","code":""},{"path":"/reference/add_iea_mw_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"","code":"add_iea_mw_psut(   .iea_psut = NULL,   .mw_psut = NULL,   countries,   iea_suffix = \"_iea\",   mw_suffix = \"_mw\",   R = IEATools::psut_cols$R,   U = IEATools::psut_cols$U,   V = IEATools::psut_cols$V,   Y = IEATools::psut_cols$Y,   U_feed = IEATools::psut_cols$U_feed,   U_eiou = IEATools::psut_cols$U_eiou,   s_units = IEATools::psut_cols$s_units,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   r_eiou = IEATools::psut_cols$r_eiou )"},{"path":"/reference/add_iea_mw_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":".iea_psut IEA PSUT data frame. .mw_psut muscle work PSUT data frame. countries countries analyzed. iea_suffix suffix IEA columns, used internally. Default \"_iea\". mw_suffix suffix muscle work columns, used internally. Default \"_mw\". R name column R matrices. Default IEATools::psut_cols$R. U name column U matrices. Default IEATools::psut_cols$U. V name column V matrices. Default IEATools::psut_cols$V. Y name column Y matrices. Default IEATools::psut_cols$Y. U_feed name column U_feed matrices. Default IEATools::psut_cols$U_feed. U_eiou name column U_eiou matrices. Default IEATools::psut_cols$U_eiou. s_units name column s_units matrices. Default IEATools::psut_cols$s_units. country name country column. Default IEATools$iea_cols$country. year name year column. Default IEATools$iea_cols$year. method name method column. Default IEATools$iea_cols$method. energy_type name energy type column. Default IEATools$iea_cols$energy_type. last_stage name last_stage column. Default IEATools$iea_cols$last_stage. r_eiou name r_eiou column. Default IEATools$iea_cols$r_eiou.","code":""},{"path":"/reference/add_iea_mw_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"data frame summed matrices.","code":""},{"path":"/reference/add_iea_mw_psut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"either iea_psut .mw_psut NULL, returned.","code":""},{"path":"/reference/aggcountries_mw_to_iea.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"function reads exemplar table containing countries country code country code associated territory IEA data recorded years 1960 - 2020. country defined territorial boundaries 2020 may energy statistics recorded number regions, number years.","code":""},{"path":"/reference/aggcountries_mw_to_iea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"","code":"aggcountries_mw_to_iea(   mw_df,   exemplar_table_path = PFUSetup::get_abs_paths()$exemplar_table_path,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   unit = IEATools::iea_cols$unit,   e_dot = IEATools::iea_cols$e_dot,   agg_code_col = PFUDatabase::exemplar_names$agg_code_col,   region_code = PFUDatabase::exemplar_names$region_code,   exemplar_country = PFUDatabase::exemplar_names$exemplar_country,   species = MWTools::mw_constants$species,   stage_col = MWTools::mw_constants$stage_col,   sector_col = MWTools::mw_constants$sector_col )"},{"path":"/reference/aggcountries_mw_to_iea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"mw_df data frame containing raw animal muscle work human muscle work data. Usually retrieved AMWPFUDataRaw HMWPFUDataRaw targets. exemplar_table_path See PFUSetup::get_abs_paths(). country, year, unit, e_dot See IEATools::iea_cols. agg_code_col, region_code, exemplar_country See PFUDatabase::exemplar_names. species, stage_col, sector_col See MWTools::mw_constants.","code":""},{"path":"/reference/all_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"All countries and selected country groups — all_countries","title":"All countries and selected country groups — all_countries","text":"individual countries selected country groups IEA's World Extended energy balances 2021.","code":""},{"path":"/reference/all_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All countries and selected country groups — all_countries","text":"","code":"all_countries"},{"path":"/reference/all_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All countries and selected country groups — all_countries","text":"string list 166 entries.","code":""},{"path":"/reference/all_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All countries and selected country groups — all_countries","text":"","code":"all_countries #> $afri #> [1] \"AFRI\" #>  #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $asia #> [1] \"ASIA\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $eurp #> [1] \"EURP\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mide #> [1] \"MIDE\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $samr #> [1] \"SAMR\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wrld #> [1] \"WRLD\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"/reference/alloc_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an allocation graph — alloc_graph","title":"Generate an allocation graph — alloc_graph","text":"Creates allocation graph completed allocation table, mostly likely created assemble_fu_allocation_tables() function.","code":""},{"path":"/reference/alloc_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an allocation graph — alloc_graph","text":"","code":"alloc_graph(   .df,   country,   ef_product,   destination,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/alloc_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an allocation graph — alloc_graph","text":".df data frame comprised completed final energy allocations. country country graph applies. ef_product final energy product graph applies. destination destination sector final energy product. year See IEATools::iea_cols. .values, machine, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/alloc_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an allocation graph — alloc_graph","text":"ggplot2 graph object.","code":""},{"path":"/reference/alloc_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an allocation graph — alloc_graph","text":"function called repeatedly alloc_plots_df(). country, ef_product, destination form title graph.","code":""},{"path":"/reference/alloc_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an allocation graph — alloc_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"/reference/alloc_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create allocation graphs in a data frame — alloc_plots_df","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"function adds column ggplot2 graphs completed allocation tables data frame. graphs stored list column named plots.","code":""},{"path":"/reference/alloc_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"","code":"alloc_plots_df(   .df,   countries,   data_col = \"Data\",   plots = \"Plots\",   country = IEATools::iea_cols$country,   ef_product = IEATools::template_cols$ef_product,   destination = IEATools::template_cols$destination,   quantity = IEATools::template_cols$quantity,   c_source = IEATools::template_cols$c_source,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product )"},{"path":"/reference/alloc_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create allocation graphs in a data frame — alloc_plots_df","text":".df completed allocation tables data frame. Default drake::readd(completed_allocation_tables_target, path = cache_path, character_only = TRUE). countries countries allocation plots created. data_col name output column containing nested data allocation graphs. Default \"Data\". plots name output column containing allocation graphs. Default \"Plots\". country See IEATools::iea_cols. ef_product, destination, quantity, c_source See IEATools::template_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed alloc_graph().","code":""},{"path":"/reference/alloc_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"data frame containing list column ggplot2 allocation graphs.","code":""},{"path":"/reference/alloc_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"data frame grouped variables needed create allocation graph, specifically country, ef_product, destination nested prior making graphs, namely machine, eu_product, quantity, year, .values, c_source, meaning one allocation graph constructed combination variables.","code":""},{"path":"/reference/alloc_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Method, ~Energy.type, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Quantity, ~Eu.product, ~C.source,                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 7 #> # Groups:   Country, Method, Energy.type, Ef.product, Destination [2] #>   Country Method Energy.type Ef.product Destination Data             Plots  #>   <chr>   <chr>  <chr>       <chr>      <chr>       <list>           <list> #> 1 GHA     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>   #> 2 ZAF     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>"},{"path":"/reference/assemble_eta_fu_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"function used drake workflow assemble completed final--useful efficiency tables given set incomplete efficiency tables. Information exemplar countries used complete incomplete final--useful efficiency tables. See examples construct exemplar_lists.","code":""},{"path":"/reference/assemble_eta_fu_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"","code":"assemble_eta_fu_tables(   incomplete_eta_fu_tables,   exemplar_lists,   completed_fu_allocation_tables,   countries,   years = NULL,   which_quantity = c(IEATools::template_cols$eta_fu),   country = IEATools::iea_cols$country,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   unit = IEATools::iea_cols$unit,   year = IEATools::iea_cols$year,   e_dot = IEATools::iea_cols$e_dot,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   c_source = IEATools::template_cols$c_source,   eta_fu_source = IEATools::template_cols$eta_fu_source,   e_dot_machine = IEATools::template_cols$e_dot_machine,   e_dot_machine_perc = IEATools::template_cols$e_dot_machine_perc,   quantity = IEATools::template_cols$quantity,   maximum_values = IEATools::template_cols$maximum_values,   e_dot_perc = IEATools::template_cols$e_dot_perc,   exemplars = PFUDatabase::exemplar_names$exemplars,   exemplar_tables = PFUDatabase::exemplar_names$exemplar_tables,   alloc_data = PFUDatabase::exemplar_names$alloc_data,   incomplete_eta_tables = PFUDatabase::exemplar_names$incomplete_eta_table,   complete_eta_tables = PFUDatabase::exemplar_names$complete_eta_table,   .values = IEATools::template_cols$.values )"},{"path":"/reference/assemble_eta_fu_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"incomplete_eta_fu_tables incomplete data frame final--useful efficiencies Machines completed_fu_allocation_tables. exemplar_lists data frame containing country year columns along column ordered vectors strings telling countries considered exemplars country year row. completed_fu_allocation_tables data frame containing completed final--useful allocation data, typically result calling assemble_fu_allocation_tables. countries vector countries completed final--useful allocation tables assembled. years years analysis desired. Default NULL, meaning analyze years. which_quantity vector quantities completed eta_FU table. Default c(IEATools::template_cols$eta_fu, IEATools::template_cols$phi_u). Must one default values. country, method, energy_type, last_stage, year, unit, e_dot See IEATools::iea_cols. machine, eu_product, eta_fu, phi_u, c_source, eta_fu_source, e_dot_machine, e_dot_machine_perc, quantity, maximum_values, e_dot_perc, .values See IEATools::template_cols. exemplars, exemplar_tables, alloc_data, incomplete_eta_tables, complete_eta_tables See PFUDatabase::exemplar_names.","code":""},{"path":"/reference/assemble_eta_fu_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"tidy data frame containing completed final--useful efficiency tables.","code":""},{"path":"/reference/assemble_eta_fu_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"Note function can accept tidy wide year data frames. return value tidy data frame. Note .values argument applies incomplete_eta_fu_tables completed_fu_allocation_tables. Callers ensure value columns data frames (incomplete_eta_fu_tables completed_fu_allocation_tables) named identically name passed .values argument. Note which_quantity argument accident history. one time, function also assembled tables phi.u (useful exergy--energy ratio) values. present, function assembles eta.fu (final--useful efficiency) tables, valid value which_quantity IEATools::template_cols$eta_fu.","code":""},{"path":"/reference/assemble_eta_fu_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"","code":"# Make some incomplete efficiency tables for GHA by removing Wood cookstoves. # Information from the exemplar, ZAF, will supply efficiency for Wood cookstoves for GHA. incomplete_eta_fu_tables <- IEATools::load_eta_fu_data() %>%   dplyr::filter(! (Country == \"GHA\" & Machine == \"Wood cookstoves\")) # The rows for Wood cookstoves are missing. incomplete_eta_fu_tables %>%   dplyr::filter(Country == \"GHA\", Machine == \"Wood cookstoves\") #>  [1] Country        Method         Energy.type    Last.stage     Unit           #>  [6] Machine        Eu.product     Quantity       Maximum.values 1971           #> [11] 2000           #> <0 rows> (or 0-length row.names) # Set up exemplar list el <- tibble::tribble(   ~Country, ~Year, ~Exemplars,   \"GHA\", 1971, c(\"ZAF\"),   \"GHA\", 2000, c(\"ZAF\")) # Load FU allocation data. # An efficiency is needed for each machine in FU allocation data. fu_allocation_data <- IEATools::load_fu_allocation_data() # Assemble complete allocation tables completed <- assemble_eta_fu_tables(incomplete_eta_fu_tables = incomplete_eta_fu_tables,                                     exemplar_lists = el,                                     completed_fu_allocation_tables = fu_allocation_data,                                     countries = \"GHA\") # The missing rows have been picked up from the exemplar country, ZAF. completed %>%   dplyr::filter(Country == \"GHA\", Machine == \"Wood cookstoves\") #> # A tibble: 2 × 10 #>   Country Method Energy.type Last.stage Machine        Eu.product Quantity  Year #>   <chr>   <chr>  <chr>       <chr>      <chr>          <chr>      <chr>    <dbl> #> 1 GHA     PCM    E           Final      Wood cookstov… MTH.100.C  eta.fu    1971 #> 2 GHA     PCM    E           Final      Wood cookstov… MTH.100.C  eta.fu    2000 #> # ℹ 2 more variables: .values <dbl>, eta.fu.source <chr>"},{"path":"/reference/assemble_fu_allocation_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"function used drake workflow assemble completed final--useful allocation tables given set incomplete allocation tables.","code":""},{"path":"/reference/assemble_fu_allocation_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"","code":"assemble_fu_allocation_tables(   incomplete_allocation_tables,   exemplar_lists,   specified_iea_data,   countries,   years = NULL,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   exemplars = PFUDatabase::exemplar_names$exemplars,   exemplar_tables = PFUDatabase::exemplar_names$exemplar_tables,   iea_data = PFUDatabase::exemplar_names$iea_data,   incomplete_alloc_tables = PFUDatabase::exemplar_names$incomplete_alloc_table,   complete_alloc_tables = PFUDatabase::exemplar_names$complete_alloc_table )"},{"path":"/reference/assemble_fu_allocation_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"incomplete_allocation_tables data frame containing (potentially) incomplete final--useful allocation tables. data frame may tidy wide years. exemplar_lists data frame containing country year columns along column ordered vectors strings telling countries considered exemplars country year row. specified_iea_data data frame containing specified IEA data. countries vector countries completed final--useful allocation tables assembled. years years analysis desired. Default NULL, meaning analyze years. country, year See IEATools::iea_cols. exemplars, exemplar_tables, iea_data, incomplete_alloc_tables, complete_alloc_tables See PFUDatabase::exemplar_names.","code":""},{"path":"/reference/assemble_fu_allocation_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"tidy data frame containing completed final--useful allocation tables.","code":""},{"path":"/reference/assemble_fu_allocation_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"Note function can accept tidy wide year data frames. return value tidy data frame. Information exemplar countries used complete incomplete final--useful efficiency tables. See examples construct exemplar_lists.","code":""},{"path":"/reference/assemble_fu_allocation_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"","code":"# Load final-to-useful allocation tables, but eliminate one category of consumption, # Residential consumption of Primary solid biofuels, # which will be filled by the exemplar for GHA, ZAF. incomplete_fu_allocation_tables <- IEATools::load_fu_allocation_data() %>%   dplyr::filter(! (Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\")) # Show that those rows are gone. incomplete_fu_allocation_tables %>%   dplyr::filter(Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #>  [1] Country                Method                 Energy.type            #>  [4] Last.stage             Ledger.side            Flow.aggregation.point #>  [7] Unit                   Ef.product             Machine                #> [10] Eu.product             Destination            Quantity               #> [13] Maximum.values         1971                   2000                   #> <0 rows> (or 0-length row.names) # But the missing rows of GHA are present in allocation data for ZAF. incomplete_fu_allocation_tables %>%   dplyr::filter(Country == \"ZAF\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #>   Country Method Energy.type Last.stage Ledger.side Flow.aggregation.point Unit #> 1     ZAF    PCM           E      Final Consumption                  Other ktoe #> 2     ZAF    PCM           E      Final Consumption                  Other ktoe #> 3     ZAF    PCM           E      Final Consumption                  Other ktoe #> 4     ZAF    PCM           E      Final Consumption                  Other ktoe #> 5     ZAF    PCM           E      Final Consumption                  Other ktoe #>               Ef.product         Machine Eu.product Destination  Quantity #> 1 Primary solid biofuels            <NA>       <NA> Residential     E.dot #> 2 Primary solid biofuels            <NA>       <NA> Residential E.dot [%] #> 3 Primary solid biofuels Wood cookstoves  MTH.100.C Residential   C_1 [%] #> 4 Primary solid biofuels   Wood furnaces   LTH.20.C Residential   C_2 [%] #> 5 Primary solid biofuels            <NA>       <NA> Residential   C_3 [%] #>   Maximum.values         1971         2000 #> 1   5574.9498000 3869.3035000 5574.9498000 #> 2      0.1198823    0.1198823    0.1139165 #> 3             NA    0.5000000    0.5000000 #> 4             NA    0.5000000    0.5000000 #> 5             NA           NA           NA # Set up exemplar list el <- tibble::tribble(   ~Country, ~Year, ~Exemplars,   \"GHA\", 1971, c(\"ZAF\"),   \"GHA\", 2000, c(\"ZAF\")) el #> # A tibble: 2 × 3 #>   Country  Year Exemplars #>   <chr>   <dbl> <chr>     #> 1 GHA      1971 ZAF       #> 2 GHA      2000 ZAF       # Load IEA data iea_data <- IEATools::load_tidy_iea_df() %>%   IEATools::specify_all() # Assemble complete allocation tables completed <- assemble_fu_allocation_tables(incomplete_allocation_tables =                                              incomplete_fu_allocation_tables,                                            exemplar_lists = el,                                            specified_iea_data = iea_data,                                            countries = \"GHA\") # Missing data for GHA has been picked up from ZAF. completed %>%   dplyr::filter(Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #> # A tibble: 4 × 14 #>   Country Method Energy.type Last.stage Ledger.side Flow.aggregation.point #>   <chr>   <chr>  <chr>       <chr>      <chr>       <chr>                  #> 1 GHA     PCM    E           Final      Consumption Other                  #> 2 GHA     PCM    E           Final      Consumption Other                  #> 3 GHA     PCM    E           Final      Consumption Other                  #> 4 GHA     PCM    E           Final      Consumption Other                  #> # ℹ 8 more variables: Ef.product <chr>, Machine <chr>, Eu.product <chr>, #> #   Destination <chr>, Quantity <chr>, Year <dbl>, .values <dbl>, #> #   C.source <chr>"},{"path":"/reference/assemble_phi_u_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"function used drake workflow assemble completed phi (exergy--energy ratio) tables given set phi tables read machine data files phi constants table. algorithm gives priority order: phi values incomplete_phi_u_table argument phi values climatic temperatures phi values phi_constants_table argument","code":""},{"path":"/reference/assemble_phi_u_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"","code":"assemble_phi_u_tables(   incomplete_phi_u_table,   phi_constants_table,   completed_efficiency_table = NULL,   countries,   years = NULL,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   product = IEATools::iea_cols$product,   machine = IEATools::template_cols$machine,   quantity = IEATools::template_cols$quantity,   phi_u = IEATools::template_cols$phi_u,   .values = IEATools::template_cols$.values,   eu_product = IEATools::template_cols$eu_product,   eta_fu_source = IEATools::template_cols$eta_fu_source,   phi_colname = IEATools::phi_constants_names$phi_colname,   phi_source_colname = IEATools::phi_constants_names$phi_source_colname,   is_useful = IEATools::phi_constants_names$is_useful_colname,   eta_fu_tables = PFUDatabase::phi_sources$eta_fu_tables,   phi_constants = PFUDatabase::phi_sources$phi_constants )"},{"path":"/reference/assemble_phi_u_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"incomplete_phi_u_table data frame phi values read machine efficiency phi data files. data frame can \"incomplete,\" .e., can missing phi values. phi values phi_constants_table used instead. phi_constants_table data frame constant phi values reasonable default values energy products. completed_efficiency_table data frame containing completed efficiency tables. data frame identifies useful products need phi values. Default NULL, meaning missing (NA) values incomplete_phi_u_table completed. countries vector countries completed phi tables assembled. years years analysis desired. Default NULL, meaning analyze years. country, year, product See IEATools::iea_cols. machine, quantity, phi_u, .values, eu_product, eta_fu_source See IEATools::template_cols. phi_colname, phi_source_colname, is_useful See IEATools::phi_constants_names. eta_fu_tables, phi_constants See PFUDatabase::phi_sources.","code":""},{"path":"/reference/assemble_phi_u_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"data frame phi values every combination country, year, machine, destination, etc.","code":""},{"path":"/reference/assemble_phi_u_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"Note needed phi values taken completed_efficiency_table (NULL). completed_efficiency_table NULL, needed phi values taken incomplete_phi_u_table, meaning empty (NA) phi values obtained climatic temperatures phi_constants_table.","code":""},{"path":"/reference/assemble_phi_u_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:testthat’: #>  #>     matches #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(IEATools) library(magrittr) #>  #> Attaching package: ‘magrittr’ #> The following objects are masked from ‘package:testthat’: #>  #>     equals, is_less_than, not phi_constants_table <- IEATools::load_phi_constants_table() # Load a phi_u_table. phi_table <- IEATools::load_eta_fu_data() %>%   # Convert to tidy format.   dplyr::mutate(     \"{IEATools::template_cols$maximum_values}\" := NULL,     \"{IEATools::iea_cols$unit}\" := NULL   ) %>%   tidyr::pivot_longer(cols = IEATools::year_cols(.),                       names_to = IEATools::iea_cols$year,                       values_to = IEATools::template_cols$.values) %>%   # Convert to a table of phi values only   dplyr::filter(.data[[IEATools::template_cols$quantity]] == IEATools::template_cols$phi_u) # Set a value to NA (Charcoal stoves, MTH.100.C, GHA, 1971) in the phi table.   incomplete_phi_table <- phi_table %>%     dplyr::mutate(       \"{IEATools::template_cols$.values}\" := dplyr::case_when(         .data[[IEATools::iea_cols$country]] == \"GHA\" &         .data[[IEATools::iea_cols$year]] == 1971 &         .data[[IEATools::template_cols$machine]] == \"Charcoal stoves\" ~ NA_real_,         TRUE ~ .data[[IEATools::template_cols$.values]]       )     ) # Run through the assemble_phi_u_tables function completed_phi_u_table <- assemble_phi_u_tables(incomplete_phi_table,                                                phi_constants_table,                                                countries = \"GHA\") # Show that Charcoal stoves was filled completed_phi_u_table %>%   dplyr::filter(.data[[IEATools::template_cols$machine]] == \"Charcoal stoves\") #> # A tibble: 2 × 10 #>   Country Method Energy.type Last.stage Machine        Eu.product Quantity Year  #>   <chr>   <chr>  <chr>       <chr>      <chr>          <chr>      <chr>    <chr> #> 1 GHA     PCM    E           Final      Charcoal stov… MTH.100.C  phi.u    2000  #> 2 GHA     PCM    E           Final      Charcoal stov… MTH.100.C  phi.u    1971  #> # ℹ 2 more variables: .values <dbl>, phi.source <chr>"},{"path":"/reference/build_psut_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the final PSUT data frame — build_psut_dataframe","title":"Build the final PSUT data frame — build_psut_dataframe","text":"Combines PSUT descriptions based IEA data exclusively, muscle work data exclusively, summed IEA MW data.","code":""},{"path":"/reference/build_psut_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the final PSUT data frame — build_psut_dataframe","text":"","code":"build_psut_dataframe(   psutiea = NULL,   psutmw = NULL,   psutieamw = NULL,   country_colname = IEATools::iea_cols$country,   method_colname = IEATools::iea_cols$method,   energy_type_colname = IEATools::iea_cols$energy_type,   last_stage_colname = IEATools::iea_cols$last_stage,   year_colname = IEATools::iea_cols$year,   ieamw_colname = PFUDatabase::ieamw_cols$ieamw,   R_colname = IEATools::psut_cols$R,   U_colname = IEATools::psut_cols$U,   U_feed_colname = IEATools::psut_cols$U_feed,   U_eiou_colname = IEATools::psut_cols$U_eiou,   r_eiou_colname = IEATools::psut_cols$r_eiou,   V_colname = IEATools::psut_cols$V,   Y_colname = IEATools::psut_cols$Y,   S_units_colname = IEATools::psut_cols$s_units,   iea = PFUDatabase::ieamw_cols$iea,   mw = PFUDatabase::ieamw_cols$mw,   both = PFUDatabase::ieamw_cols$both )"},{"path":"/reference/build_psut_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the final PSUT data frame — build_psut_dataframe","text":"psutiea PSUT data frame IEA data. Default NULL. psutmw PSUT data frame muscle work data. Default NULL. psutieamw PSUT data frame combined IEA MW data. Default NULL. country_colname, method_colname, energy_type_colname, last_stage_colname, year_colname Column names. See IEATools::iea_cols defaults. ieamw_colname name column identifies whether data IEA, muscle work (MW) . Default PFUDatabase::ieamw_cols$ieamw. R_colname, U_colname, U_feed_colname, U_eiou_colname, r_eiou_colname, V_colname, Y_colname, S_units_colname Names matrix columns. See IEATools::psut_cols. iea string identifies ECC data IEA . Default PFUDatabase::ieamw_cols$iea. mw string identifies ECC data muscle work . Default PFUDatabase::ieamw_cols$mw. string identifies ECC data IEA muscle work. Default PFUDatabase::ieamw_cols. Default PFUDatabase::ieamw_cols$.","code":""},{"path":"/reference/build_psut_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the final PSUT data frame — build_psut_dataframe","text":"data frame PSUTIEA, PSUTMW, PSUTIEAMW  rbind()ed together, new column (IEAMW_colname) distinguishes among .","code":""},{"path":"/reference/calc_C_mats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add allocation matrices to a data frame — calc_C_mats","title":"Add allocation matrices to a data frame — calc_C_mats","text":"function adds allocation matrices (C_Y C_EIOU) previously-created CompletedAllocationTables target.","code":""},{"path":"/reference/calc_C_mats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add allocation matrices to a data frame — calc_C_mats","text":"","code":"calc_C_mats(   completed_allocation_tables,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   c_source = IEATools::template_cols$c_source,   .values = IEATools::template_cols$.values,   C_Y = IEATools::template_cols$C_Y,   C_EIOU = IEATools::template_cols$C_eiou )"},{"path":"/reference/calc_C_mats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add allocation matrices to a data frame — calc_C_mats","text":"completed_allocation_tables completed allocation tables allocation (C) matrices created. data frame likely CompletedAllocationTables target. countries countries C matrices formed. matrix_class type matrix produced. One \"matrix\" (default sparse) \"Matrix\" (may sparse). country, year See IEATools::iea_cols. c_source, .values, C_Y, C_EIOU See IEATools::template_cols.","code":""},{"path":"/reference/calc_C_mats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add allocation matrices to a data frame — calc_C_mats","text":"data frame C_Y C_EIOU columns containing allocation matrices.","code":""},{"path":"/reference/calc_eta_fu_phi_u_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"function adds final--useful efficiency (eta) exergy--energy ratio vectors previously-created WithCmats target.#'","code":""},{"path":"/reference/calc_eta_fu_phi_u_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"","code":"calc_eta_fu_phi_u_vecs(   completed_efficiency_tables,   completed_phi_tables,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   c_source = IEATools::template_cols$c_source,   eta_fu_source = IEATools::template_cols$eta_fu_source,   .values = IEATools::template_cols$.values,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   phi_u_source = IEATools::phi_constants_names$phi_source_colname )"},{"path":"/reference/calc_eta_fu_phi_u_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"completed_efficiency_tables completed efficiency tables efficiency (eta_fu) vectors created. data frame likely CompletedEfficiencyTables target. completed_phi_tables completed phi tables exergy--energy ratio vectors (phi_u) created.data frame likely CompletedPhiTables target. countries countries eta_fu phi_u vectors formed. matrix_class type matrix produced. One \"matrix\" (default sparse) \"Matrix\" (may sparse). country, year See IEATools::ieacols. c_source, eta_fu_source, .values, eta_fu, phi_u See IEATools::template_cols. phi_u_source See IEATools::phi_constants_names.","code":""},{"path":"/reference/calc_eta_fu_phi_u_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"data frame eta_fu phi_u vectors added columns.","code":""},{"path":"/reference/calc_fu_Y_EIOU_efficiencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"Knowing allocations (C_mats), machine efficiencies (eta_m_vecs), exergy--energy ratios (phi_vecs), possible calculate final--useful efficiencies final demand energy industry use energy conversion chain. function performs calculations using Recca::calc_eta_fu_Y_eiou().","code":""},{"path":"/reference/calc_fu_Y_EIOU_efficiencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"","code":"calc_fu_Y_EIOU_efficiencies(   C_mats,   eta_fu_vecs,   phi_vecs,   countries,   country = IEATools::iea_cols$country,   last_stage = IEATools::iea_cols$last_stage,   energy_type = IEATools::iea_cols$energy_type,   method = IEATools::iea_cols$method,   year = IEATools::iea_cols$year )"},{"path":"/reference/calc_fu_Y_EIOU_efficiencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"C_mats data frame containing allocation matrices. eta_fu_vecs data frame containing vectors machine efficiencies, probably Etafuvecs target. phi_vecs data frame containing vectors exergy--energy ratios, probably Phivecs target. countries countries analysis performed. country, last_stage, energy_type, method, year See IEATools::iea_cols.","code":""},{"path":"/reference/calc_fu_Y_EIOU_efficiencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"data frame final--useful efficiencies energy sector energy carrier.","code":""},{"path":"/reference/calc_phi_pf_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"function creates data frame contains metadata columns phi_u_vecs column phi_pf vectors. work accomplished creating vector phi_constants, adding one instance vector right side phi_constants data frame row data frame, deleting phi_u_colname data frame.","code":""},{"path":"/reference/calc_phi_pf_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"","code":"calc_phi_pf_vecs(   phi_constants,   phi_u_vecs,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   product = IEATools::iea_cols$product,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   phi_pf_colname = IEATools::template_cols$phi_pf,   phi_colname = IEATools::phi_constants_names$phi_colname,   is_useful_colname = IEATools::phi_constants_names$is_useful_colname )"},{"path":"/reference/calc_phi_pf_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"phi_constants data frame constant phi values (primary, final, useful stages) columns product, phi_colname, is_useful_colname. phi_u_vecs data frame containing metadata columns column phi_u vectors. column phi_pf vectors replaces column phi_u vectors output. countries countries want perform task. matrix_class string tells type matrix create, \"matrix\" (built-type) \"Matrix\" (sparse). Default \"matrix\". country, product See IEATools::iea_cols. eta_fu, phi_u, phi_pf_colname See IEATools::template_cols. phi_colname, is_useful_colname See IEATools::phi_constants_colnames.","code":""},{"path":"/reference/calc_phi_pf_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"version phi_constants data frame column useful phi (useful exergy--energy ratio) vectors replaced column primary final phi vectors.","code":""},{"path":"/reference/calc_phi_pf_vecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"","code":"phi_constants <- IEATools::sample_phi_constants_path() %>%   IEATools::load_phi_constants_table() phi_u_vecs <- tibble::tibble(Country = \"GHA\",                              Year = 1971,                              rownames = c(\"Light\", \"MD\"),                              colnames = \"col\",                              matnames = \"phi.u\",                              matvals = c(0.8, 0.9),                              rowtypes = \"rowtype\",                              coltypes = \"coltype\") %>%   dplyr::group_by(Country, Year) %>%   matsindf::collapse_to_matrices() %>%   dplyr::rename(phi.u = matvals) %>%   dplyr::mutate(     Quantity = NULL   ) calc_phi_pf_vecs(phi_constants, phi_u_vecs, countries = \"GHA\") #>   Country Year #> 1     GHA 1971 #>                                                                                                                                                                                                                                                                                                                                                                                                       phi.pf #> 1 1.06, 1.06, 1.11, 1.00, 1.00, 1.00, 1.06, 1.06, 1.06, 1.06, 1.06, 1.06, 1.06, 1.05, 1.05, 1.00, 1.04, 1.04, 1.04, 1.04, 1.06, 1.00, 1.00, 1.00, 1.04, 1.11, 1.00, 1.05, 1.06, 1.00, 1.06, 1.06, 1.06, 1.11, 1.00, 0.60, 1.11, 0.60, 1.00, 1.11, 1.11, 1.06, 1.04, 1.06, 1.11, 1.00, 1.00, 1.11, 1.11, 1.00, 1.00, 1.11, 0.25, 1.11, 1.06, 1.06, 1.06, 1.06, 1.06, 1.00, 1.04, 1.00, 1.11, 1.06, 1.00, 1.11"},{"path":"/reference/calc_phi_vecs_mw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"phi_vecs argument move_to_exergy() data frame \"Country\", \"Year\", \"phi\" columns, \"phi\" column contains phi vectors type created MWTools::phi_vec_mw(). function creates required data frame parts.","code":""},{"path":"/reference/calc_phi_vecs_mw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"","code":"calc_phi_vecs_mw(   psut_energy_mw,   phi_vec_mw,   countries,   country = MWTools::mw_cols$country,   year = MWTools::mw_cols$year,   phi = \"phi\" )"},{"path":"/reference/calc_phi_vecs_mw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"psut_energy_mw PSUT data frame containing country year columns. phi_vec_mw single vector muscle work phi values. See MWTools::phi_vec_mw(). countries countries analyzed. Internally, psut_energy_mw filtered countries. country, year Column names. See MWTools::mw_cols. phi name phi column. Default \"phi\".","code":""},{"path":"/reference/calc_phi_vecs_mw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"data frame muscle work phi vectors, suitable move_to_exergy().","code":""},{"path":"/reference/canonical_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical countries — canonical_countries","title":"Canonical countries — canonical_countries","text":"Countries country groups , aggregated, cover entire world (WRLD) without double counting.","code":""},{"path":"/reference/canonical_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries"},{"path":"/reference/canonical_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Canonical countries — canonical_countries","text":"string list 157 entries.","code":""},{"path":"/reference/canonical_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"/reference/combine_countries_exemplars.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine countries and additional exemplars — combine_countries_exemplars","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"Combine countries additional exemplars","code":""},{"path":"/reference/combine_countries_exemplars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"","code":"combine_countries_exemplars(couns, exempls)"},{"path":"/reference/combine_countries_exemplars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"couns Countries interest exempls Additional exemplars","code":""},{"path":"/reference/combine_countries_exemplars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"unique combination countries additional exemplars","code":""},{"path":"/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data pronoun — .data","title":"Data pronoun — .data","text":"See rlang::.data details.","code":""},{"path":"/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data pronoun — .data","text":"","code":".data"},{"path":"/reference/double_counted_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Double-counted countries — double_counted_countries","title":"Double-counted countries — double_counted_countries","text":"Selected individual countries selected country groups , aggregated, result double counting.","code":""},{"path":"/reference/double_counted_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries"},{"path":"/reference/double_counted_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double-counted countries — double_counted_countries","text":"string list 9 entries.","code":""},{"path":"/reference/double_counted_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries #> $afri #> [1] \"AFRI\" #>  #> $asia #> [1] \"ASIA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $eurp #> [1] \"EURP\" #>  #> $mide #> [1] \"MIDE\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $samr #> [1] \"SAMR\" #>  #> $wrld #> [1] \"WRLD\" #>"},{"path":"/reference/eta_fu_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an eta_fu graph — eta_fu_graph","title":"Generate an eta_fu graph — eta_fu_graph","text":"Creates eta_fu graph completed eta_fu table, created assemble_eta_fu_tables() function.","code":""},{"path":"/reference/eta_fu_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an eta_fu graph — eta_fu_graph","text":"","code":"eta_fu_graph(   .df,   countries,   country = IEATools::iea_cols$country,   quantity = IEATools::template_cols$quantity,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/eta_fu_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an eta_fu graph — eta_fu_graph","text":".df data frame comprised completed final useful efficiency values - eta.fu countries countries efficiency plots created. country, year See IEATools::iea_cols. .values, machine, quantity, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/eta_fu_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an eta_fu graph — eta_fu_graph","text":"ggplot2 graph object","code":""},{"path":"/reference/eta_fu_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an eta_fu graph — eta_fu_graph","text":"function called repeatedly eta_fu_plots_df(). machine, destination form title graph.","code":""},{"path":"/reference/eta_fu_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an eta_fu graph — eta_fu_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"/reference/eta_fu_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create eta_fu graphs in a data frame — eta_fu_plots_df","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"function adds column ggplot2 graphs completed eta_fu tables data frame. graphs stored list column named plots.","code":""},{"path":"/reference/eta_fu_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"","code":"eta_fu_plots_df(   .df,   countries,   plots = \"Plots\",   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/eta_fu_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":".df completed final-useful efficiency tables data frame. contains eta.fu phi.u values. Default drake::readd(PFUDatabase::target_names$completed_efficiency_tables, path = cache_path, character_only = TRUE). countries countries final-useful efficiency plots created. plots name output column containing final-useful efficiency graphs. Default \"plots\". country See IEATools::iea_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed eta_fu_graph(). machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/eta_fu_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"data frame containing list column ggplot2 final-useful efficiency graphs.","code":""},{"path":"/reference/eta_fu_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"default, completed eta_fu tables data frame read drake cache. data frame grouped machine, eu_product nested prior making graphs, meaning one final-useful efficiency graph constructed combination machine, eu_product.","code":""},{"path":"/reference/eta_fu_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Eu.product,                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"MD\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 5 #> # Groups:   Country, Ef.product, Destination [2] #>   Country Ef.product Destination Data             Plots  #>   <chr>   <chr>      <chr>       <list>           <list> #> 1 GHA     Gasoline   Transport   <tibble [4 × 4]> <gg>   #> 2 ZAF     Gasoline   Transport   <tibble [4 × 4]> <gg>"},{"path":"/reference/exemplar_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exemplar lists from an exemplar table — exemplar_lists","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"exemplar list list countries regions used complete country's final--useful allocation table efficiency table. function uses exemplar table (probably read load_exemplar_table()) create exemplar lists.","code":""},{"path":"/reference/exemplar_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"","code":"exemplar_lists(   exemplar_table,   countries = NULL,   prev_names = PFUDatabase::exemplar_names$prev_names,   exemplar_country = PFUDatabase::exemplar_names$exemplar_country,   exemplars = PFUDatabase::exemplar_names$exemplars,   region_code = PFUDatabase::exemplar_names$region_code,   world = PFUDatabase::exemplar_names$world,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   year_temp = \".year_temp\",   prev_names_list = \".prev_names_list\" )"},{"path":"/reference/exemplar_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"exemplar_table exemplar table, probably read load_exemplar_table(). countries countries exemplar lists desired. Default NULL, returns known countries. exemplars, prev_names, exemplar_country, region_code, world See PFUDatabase::exemplar_names. country, year See IEATools::iea_cols. year_temp name temporary year column. Default \".year_temp\". prev_names_list name temporary column exemplar_table. Default \".prev_names_list\".","code":""},{"path":"/reference/exemplar_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"tibble containing countries regions searched missing final--useful allocation data final--useful efficiency data.","code":""},{"path":"/reference/exemplar_lists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"value function tibble three columns: Country, Year, Exemplars. Country contains 3-letter ISO country codes names world regions. Year contains years. Exemplars contains list countries regions serve exemplars country year. Order exemplar lists important, countries regions searched order appear sub-list searching missing allocations efficiencies.","code":""},{"path":"/reference/exemplar_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"","code":"# Use an exemplar table that is part of this package. el <- exemplar_lists(load_exemplar_table()) %>% # Montenegro is a particularly interesting case, as it had many name changes. # Look at the first year, the last year as Yugoslavia, the first year as Serbia, # and today.   dplyr::filter(.data[[IEATools::iea_cols$country]] == \"MNE\",                 .data[[IEATools::iea_cols$year]] %in% c(1971, 1989, 1990, 2017)) el #> # A tibble: 4 × 3 #>   Country  Year Exemplars #>   <chr>   <dbl> <list>    #> 1 MNE      1971 <chr [4]> #> 2 MNE      1989 <chr [4]> #> 3 MNE      1990 <chr [5]> #> 4 MNE      2017 <chr [5]> el[[1, \"Exemplars\"]] #> [[1]] #> [1] \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[2, \"Exemplars\"]] #> [[1]] #> [1] \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[3, \"Exemplars\"]] #> [[1]] #> [1] \"SRB\"  \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[4, \"Exemplars\"]] #> [[1]] #> [1] \"SRB\"  \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>"},{"path":"/reference/exemplar_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Exemplar table names — exemplar_names","title":"Exemplar table names — exemplar_names","text":"string list containing named names columns tabs exemplar tables. Items list provide default values column name function arguments throughout PFUDatabase package.","code":""},{"path":"/reference/exemplar_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exemplar table names — exemplar_names","text":"","code":"exemplar_names"},{"path":"/reference/exemplar_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exemplar table names — exemplar_names","text":"string list 16 entries. exemplar_tab_name string name tab Excel file containing exemplar table. prev_names name column previous names used country. exemplars name column exemplar countries. exemplar_country name exemplar country column. exemplar_countries name exemplar countries column. exemplar_tables name column containing exemplar tables. iea_data name column containing IEA extended energy balance data. alloc_data name column containing final--useful allocation data. incomplete_alloc_table name column containing incomplete final--useful allocation tables. complete_alloc_table name column containing completed final--useful allocation tables. incomplete_eta_table name column containing incomplete final--useful efficiency tables. complete_eta_table name column containing completed final--useful efficiency tables. region_code name region code column. country_name name column containing long name country. agg_code_col metadata column \"Agg.Code\", representing country, country group code individual country level data aggregated . world name world region.","code":""},{"path":"/reference/exemplar_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exemplar table names — exemplar_names","text":"","code":"exemplar_names #> $exemplar_tab_name #> [1] \"exemplar_table\" #>  #> $prev_names #> [1] \"Prev.names\" #>  #> $exemplars #> [1] \"Exemplars\" #>  #> $exemplar_country #> [1] \"Exemplar.country\" #>  #> $exemplar_countries #> [1] \"Exemplar.countries\" #>  #> $exemplar_tables #> [1] \"Exemplar.tables\" #>  #> $iea_data #> [1] \"IEA.data\" #>  #> $alloc_data #> [1] \"Alloc.data\" #>  #> $incomplete_alloc_table #> [1] \"Incomplete.alloc.table\" #>  #> $complete_alloc_table #> [1] \"Complete.alloc.table\" #>  #> $incomplete_eta_table #> [1] \"Incomplete.eta.table\" #>  #> $complete_eta_table #> [1] \"Complete.eta.table\" #>  #> $region_code #> [1] \"Region.code\" #>  #> $country_name #> [1] \"Country.name\" #>  #> $agg_code_col #> [1] \"Agg.Code\" #>  #> $world #> [1] \"WRLD\" #>"},{"path":"/reference/filter_countries_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract specific country and year data — filter_countries_years","title":"Extract specific country and year data — filter_countries_years","text":"Data extracted according countries years objects way amenable drake subtargets. dplyr::filter() subsetting.","code":""},{"path":"/reference/filter_countries_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract specific country and year data — filter_countries_years","text":"","code":"filter_countries_years(   .df,   countries,   years,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year )"},{"path":"/reference/filter_countries_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract specific country and year data — filter_countries_years","text":".df data frame containing cleaned data lots countries years. countries list country codes countries analyzed. \"\" means return countries. years vector years. \"\" means return years. country, year See IEATools::iea_cols.","code":""},{"path":"/reference/filter_countries_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract specific country and year data — filter_countries_years","text":"data frame desired IEA data .","code":""},{"path":"/reference/filter_countries_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract specific country and year data — filter_countries_years","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   filter_countries_years(countries = c(\"ZAF\"), years = 1960:1999) #> # A tibble: 98 × 11 #>    Country Method Energy.type Last.stage  Year Ledger.side #>    <chr>   <chr>  <chr>       <chr>      <dbl> <chr>       #>  1 ZAF     PCM    E           Final       1971 Supply      #>  2 ZAF     PCM    E           Final       1971 Supply      #>  3 ZAF     PCM    E           Final       1971 Supply      #>  4 ZAF     PCM    E           Final       1971 Supply      #>  5 ZAF     PCM    E           Final       1971 Supply      #>  6 ZAF     PCM    E           Final       1971 Supply      #>  7 ZAF     PCM    E           Final       1971 Supply      #>  8 ZAF     PCM    E           Final       1971 Supply      #>  9 ZAF     PCM    E           Final       1971 Supply      #> 10 ZAF     PCM    E           Final       1971 Supply      #> # ℹ 88 more rows #> # ℹ 5 more variables: Flow.aggregation.point <chr>, Flow <chr>, Product <chr>, #> #   Unit <chr>, E.dot <dbl>"},{"path":"/reference/filter_mw_to_iea_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"function compares muscle work IEA data frames country, year, method, energy_type, last_stage columns keeps rows .psut_mw match .psut_iea.","code":""},{"path":"/reference/filter_mw_to_iea_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"","code":"filter_mw_to_iea_years(   .psut_mw,   .psut_iea,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage )"},{"path":"/reference/filter_mw_to_iea_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":".psut_mw incoming muscle work data frame filtered. .psut_iea incoming IEA data frame years obtained. countries countries filtering done. country, year, method, energy_type, last_stage columns .psut_mw .iea_mw used filtering.","code":""},{"path":"/reference/filter_mw_to_iea_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"version .psut_mw contains countries, years, methods, energy types, last stages also contained .psut_iea.","code":""},{"path":"/reference/get_L_K_GDP_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"function selects following columns pwt10 data frame produced calling pwt10::pwt10.0, descriptions pwt10 documentation: isocode: 3-letter isocode year: Year rgdpe: Expenditure-side real GDP chained PPPs (million 2017 USD). rgdpo: Output-side real GDP chained PPPs (million 2017 USD). rgdpna: Real GDP constant 2017 national prices (million 2017 USD) emp: Number persons engaged (millions) avh: Average annual hours worked persons engaged. hc: Human capital index, based years schooling returns education; see Human capital PWT9. rnna: Capital stock constant 2017 national prices (million 2017 USD). rkna: Capital services constant 2017 national prices (2017 = 1).","code":""},{"path":"/reference/get_L_K_GDP_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"","code":"get_L_K_GDP_data(   pwt10_data,   country_colname = IEATools::iea_cols$country,   Year_colname = IEATools::iea_cols$year,   year_colname = PFUDatabase::socioecon_cols$year_colname,   isocode_colname = PFUDatabase::socioecon_cols$isocode_colname,   rgdpe_colname = PFUDatabase::socioecon_cols$rgdpe_colname,   rgdpo_colname = PFUDatabase::socioecon_cols$rgdpo_colname,   rgdpna_colname = PFUDatabase::socioecon_cols$rgdpna_colname,   emp_colname = PFUDatabase::socioecon_cols$emp_colname,   avh_colname = PFUDatabase::socioecon_cols$avh_colname,   hc_colname = PFUDatabase::socioecon_cols$hc_colname,   rnna_colname = PFUDatabase::socioecon_cols$rnna_colname,   rkna_colname = PFUDatabase::socioecon_cols$rkna_colname,   K_colname = PFUDatabase::socioecon_cols$K_colname,   Kserv_colname = PFUDatabase::socioecon_cols$Kserv_colname,   L_colname = PFUDatabase::socioecon_cols$L_colname,   Ladj_colname = PFUDatabase::socioecon_cols$Ladj_colname )"},{"path":"/reference/get_L_K_GDP_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"pwt10_data data frame containing pwt10 data least one country, usually obtained get_all_pwt_data(). country_colname, Year_colname See IEATools::iea_cols. isocode_colname, year_colname, rgdpe_colname, rgdpo_colname, rgdpna_colname, emp_colname, avh_colname, hc_colname, rnna_colname, rkna_colname, K_colname, Kserv_colname, L_colname, Ladj_colname See PFUDatabase::socioecon_cols.","code":""},{"path":"/reference/get_L_K_GDP_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"data frame containing three GDP metrics, Labor, Adjusted Labor, Capital, Capital services.","code":""},{"path":"/reference/get_L_K_GDP_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"metrics  L, total number hours worked given year Ladj, number hours worked adjusted human capital index also calculated added columns, avh, hc, emp removed use. Note data available countries (mostly non-OECD), calculated metrics .e. Adjusted Labor (L.adj) also absent.","code":""},{"path":"/reference/get_L_K_GDP_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"","code":"countries <- c(\"GBR\") L_K_GDP_data <- get_all_pwt_data(countries = countries) %>%                   get_L_K_GDP_data()"},{"path":"/reference/get_all_pwt_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all pwt10 data for a set of countries — get_all_pwt_data","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"Using pwt10 package function creates data frame containing data Penn World Tables 10 (pwt10) set countries specified string 3-letter ISO country codes named countries. Note data available countries (mostly non-OECD).","code":""},{"path":"/reference/get_all_pwt_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"","code":"get_all_pwt_data(   countries,   isocode_colname = PFUDatabase::socioecon_cols$isocode_colname )"},{"path":"/reference/get_all_pwt_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"countries string iso 3-letter country codes isocode_colname See PFUDatabase::socioecon_cols.","code":""},{"path":"/reference/get_all_pwt_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"data frame containing socioeconomic data pwt10 set countries.","code":""},{"path":"/reference/get_all_pwt_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"","code":"countries <- c(\"GBR\") all_pwt_data <- get_all_pwt_data(countries = countries)"},{"path":"/reference/get_eta_filepaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all file paths to machine efficiency files — get_eta_filepaths","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"machine efficiency files contain FIN_ETA sheet stores efficiencies..","code":""},{"path":"/reference/get_eta_filepaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"","code":"get_eta_filepaths(   filepath,   efficiency_tab_name = PFUDatabase::machine_constants$efficiency_tab_name,   hidden_excel_file_prefix = \"~$\" )"},{"path":"/reference/get_eta_filepaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"filepath file path folder containing machine folders. efficiency_tab_name See PFUDatabase::machine_constants. hidden_excel_file_prefix prefix hidden Excel files. files appear Excel file open ignored.","code":""},{"path":"/reference/get_eta_filepaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"list file paths machine excel files containing FIN_ETA front sheets, therefore usable data.","code":""},{"path":"/reference/get_fd_sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a list of final demand sectors — get_fd_sectors","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"Retrieve list final demand sectors calculation total final consumption final, useful, services energy gross net terms.","code":""},{"path":"/reference/get_fd_sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"","code":"get_fd_sectors()"},{"path":"/reference/get_fd_sectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"list final demand sectors IEATools::fd_sectors.","code":""},{"path":"/reference/get_fd_sectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"","code":"fd_sectors <- get_fd_sectors()"},{"path":"/reference/get_p_industry_prefixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve primary industry prefixes — get_p_industry_prefixes","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"Retrieve primary industry prefixes use Recca::find_p_industry_names. Contains \"Resources\", \"Imports\", \"Stock changes\".","code":""},{"path":"/reference/get_p_industry_prefixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"","code":"get_p_industry_prefixes()"},{"path":"/reference/get_p_industry_prefixes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"list primary industry prefixes IEATools::prim_agg_flows.","code":""},{"path":"/reference/get_p_industry_prefixes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"","code":"p_industry_prefixes <- get_p_industry_prefixes()"},{"path":"/reference/get_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an analysis pipeline — get_pipeline","title":"Create an analysis pipeline — get_pipeline","text":"pipeline targets pipeline creates PFU database.","code":""},{"path":"/reference/get_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an analysis pipeline — get_pipeline","text":"","code":"get_pipeline(   countries = \"all\",   additional_exemplar_countries = NULL,   specify_non_energy_flows = FALSE,   matrix_class = c(\"matrix\", \"Matrix\"),   apply_fixes = FALSE,   years = \"all\",   how_far = \"all_targets\",   iea_data_path,   country_concordance_path,   mw_concordance_path,   amw_analysis_data_path,   hmw_analysis_data_path,   phi_constants_path,   ceda_data_folder,   fao_data_path,   ilo_employment_data_path,   ilo_working_hours_data_path,   machine_data_path,   exemplar_table_path,   fu_analysis_folder,   reports_source_folders,   reports_dest_folder,   pipeline_releases_folder,   pipeline_caches_folder,   release = FALSE )"},{"path":"/reference/get_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an analysis pipeline — get_pipeline","text":"countries vector abbreviations countries whose energy conversion chain analyzed, \"c('GHA', 'ZAF')\". Countries named countries can also serve exemplars final--useful allocations efficiencies. additional_exemplar_countries vector country abbreviations final--useful allocations efficiencies read. energy conversion chain constructed countries. However, final--useful allocations efficiencies may used exemplar information countries countries. Default NULL, indicating additional exemplars. specify_non_energy_flows boolean tells whether provide additional specificity non-energy flows, available. Default FALSE. matrix_class One \"matrix\" \"Matrix\", specifying kind matrix objects created. Default \"matrix\". apply_fixes boolean tells whether fix IEA WEEB data, possible. Default FALSE. years years studied. how_far string indicating last target include plan returned. Default \"all_targets\" indicate targets plan returned. iea_data_path path IEA extended energy balance data .csv format. country_concordance_path path country concordance Excel file. mw_concordance_path path muscle work concordance file. amw_analysis_data_path path animal muscle work data file. hmw_analysis_data_path path human muscle work data file. phi_constants_path path phi (exergy--energy ratio) Excel file. ceda_data_folder path CEDA data text file, .per, format. fao_data_path path Food Agriculture Organization (FAO) data. ilo_employment_data_path path International Labor Organization (ILO) employment data. ilo_working_hours_data_path path International Labor Organization (ILO) working hours data. machine_data_path path machine data .xlsx format. exemplar_table_path path exemplar table. fu_analysis_folder path folder containing final--useful analyses. Sub-folders named 3-letter country abbreviations assumed. reports_source_folders string vector containing paths folders report sources, usually .Rnw .Rmd files. reports_dest_folder path folder reports written. pipeline_releases_folder path folder releases important targets stored later retrieval pinned items pinboard. pipeline_caches_folder path folder .zipped versions pipeline cache stored. release boolean tells whether new release PSUT targets made. Default FALSE.","code":""},{"path":"/reference/get_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an analysis pipeline — get_pipeline","text":"targets pipeline.","code":""},{"path":"/reference/ieamw_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for data frames containing IEA and MW data frames — ieamw_cols","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"string list containing column name column values energy conversion chains (ECCs) PSUT format.","code":""},{"path":"/reference/ieamw_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"","code":"ieamw_cols"},{"path":"/reference/ieamw_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"string list 4 entries. ieamw name column containing metadata ECC sources. \"IEAMW\" iea string identifying ECC data IEA exclusively. \"IEA\" mw string identifying ECC data muscle work (MW) exclusively. \"MW\" string identifying ECC data include IEA muscle work. \"\"","code":""},{"path":"/reference/ieamw_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"","code":"ieamw_cols #> $ieamw #> [1] \"IEAMW\" #>  #> $iea #> [1] \"IEA\" #>  #> $mw #> [1] \"MW\" #>  #> $both #> [1] \"Both\" #>"},{"path":"/reference/is_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Tells whether IEA data are balanced — is_balanced","title":"Tells whether IEA data are balanced — is_balanced","text":"Performs energy balance check way amenable drake subtargets. Internally, function uses IEATools::calc_tidy_iea_df_balances(). Grouping internal function using value grp_vars.","code":""},{"path":"/reference/is_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tells whether IEA data are balanced — is_balanced","text":"","code":"is_balanced(   .iea_data,   countries,   country = IEATools::iea_cols$country,   grp_vars = c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type,     IEATools::iea_cols$last_stage, IEATools::iea_cols$year, IEATools::iea_cols$product) )"},{"path":"/reference/is_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tells whether IEA data are balanced — is_balanced","text":".iea_data tidy IEA data frame countries countries balancing checked strings country name country column IEAData. Default Country. grp_vars groups checked. Default c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type, IEATools::iea_cols$last_stage, IEATools::iea_cols$product).","code":""},{"path":"/reference/is_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tells whether IEA data are balanced — is_balanced","text":"logical stating whether products balanced country interest","code":""},{"path":"/reference/is_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tells whether IEA data are balanced — is_balanced","text":"","code":"# These data are not balanced, because they are raw. IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   is_balanced(countries = \"ZAF\") #> [1] FALSE"},{"path":"/reference/load_amw_pfu_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load animal muscle work data — load_amw_pfu_data","title":"Load animal muscle work data — load_amw_pfu_data","text":"function loads animal muscle work data renames sectors according default arguments rename_mw_sectors().","code":""},{"path":"/reference/load_amw_pfu_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load animal muscle work data — load_amw_pfu_data","text":"","code":"load_amw_pfu_data(fao_data_path, mw_concordance_path, amw_analysis_data_path)"},{"path":"/reference/load_amw_pfu_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load animal muscle work data — load_amw_pfu_data","text":"fao_data_path path FAO data. mw_concordance_path path muscle work concordance. amw_analysis_data_path path animal muscle work data.","code":""},{"path":"/reference/load_amw_pfu_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load animal muscle work data — load_amw_pfu_data","text":"data frame animal muscle work data.","code":""},{"path":"/reference/load_country_concordance_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a country concordance table — load_country_concordance_table","title":"Load a country concordance table — load_country_concordance_table","text":"addition loading country concordance table, function checks errors: missing 3-letter country codes repeated 3-letter country codes. issues cause problem.","code":""},{"path":"/reference/load_country_concordance_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a country concordance table — load_country_concordance_table","text":"","code":"load_country_concordance_table(   country_concordance_path,   sheet = \"country_concordance_table\",   pfu_code_colname = \"PFU.code\" )"},{"path":"/reference/load_country_concordance_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a country concordance table — load_country_concordance_table","text":"country_concordance_path path country concordance file. file assumed Excel file. sheet name sheet read. Default \"country_concordance_table\". pfu_code_colname name column country concordance table contains 3-letter country codes used workflow. Default \"PFU.code\".","code":""},{"path":"/reference/load_country_concordance_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a country concordance table — load_country_concordance_table","text":"country concordance table.","code":""},{"path":"/reference/load_exemplar_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an exemplar table from an Excel file — load_exemplar_table","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar table column country names additional metadata, including exemplar country name changes time.","code":""},{"path":"/reference/load_exemplar_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"","code":"load_exemplar_table(   exemplar_table_path = sample_exemplar_table_path(),   countries = NULL,   years = NULL,   exemplar_table_tab_name = PFUDatabase::exemplar_names$exemplar_tab_name,   prev_names = PFUDatabase::exemplar_names$prev_names,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year )"},{"path":"/reference/load_exemplar_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar_table_path path Excel file containing exemplar table. Default value sample_exemplar_table_path(). countries countries exemplars desired. NULL, default, countries file exemplar_table_path returned. years years want exemplar table, integer. Default NULL, meaning years file exemplar_table_path included. exemplar_table_tab_name, prev_names See PFUDatabase::exemplar_names. year, country See IEATools::iea_cols.","code":""},{"path":"/reference/load_exemplar_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar table","code":""},{"path":"/reference/load_exemplar_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"function gathers (actually, tidyr::pivot_longer()) years Year column.","code":""},{"path":"/reference/load_exemplar_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"","code":"load_exemplar_table() #> # A tibble: 13,176 × 5 #>    Region.code Exemplar.country Country Year  Prev.names #>    <chr>       <chr>            <chr>   <chr> <chr>      #>  1 NAMR        USA              ABW     1960  OAMR       #>  2 NAMR        USA              ABW     1961  OAMR       #>  3 NAMR        USA              ABW     1962  OAMR       #>  4 NAMR        USA              ABW     1963  OAMR       #>  5 NAMR        USA              ABW     1964  OAMR       #>  6 NAMR        USA              ABW     1965  OAMR       #>  7 NAMR        USA              ABW     1966  OAMR       #>  8 NAMR        USA              ABW     1967  OAMR       #>  9 NAMR        USA              ABW     1968  OAMR       #> 10 NAMR        USA              ABW     1969  OAMR       #> # ℹ 13,166 more rows"},{"path":"/reference/load_fu_allocation_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Load FU allocation tables — load_fu_allocation_tables","title":"Load FU allocation tables — load_fu_allocation_tables","text":"function reads final--useful allocation data files fu_analysis_folder start country abbreviations given countries.","code":""},{"path":"/reference/load_fu_allocation_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load FU allocation tables — load_fu_allocation_tables","text":"","code":"load_fu_allocation_tables(   fu_analysis_folder,   specified_iea_data,   countries,   file_suffix = IEATools::fu_analysis_file_info$fu_analysis_file_suffix,   use_subfolders = TRUE,   generate_missing_fu_allocation_template = TRUE,   fu_allocations_tab_name = IEATools::fu_analysis_file_info$fu_allocation_tab_name )"},{"path":"/reference/load_fu_allocation_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load FU allocation tables — load_fu_allocation_tables","text":"fu_analysis_folder folder final--useful analyses loaded. specified_iea_data data frame specified IEA data countries. countries countries allocation tables loaded. file_suffix suffix FU analysis files. Default \" FU Analysis.xlsx\". use_subfolders Tells whether look files subfolders named countries. Default TRUE. generate_missing_fu_allocation_template Tells whether generate missing final--useful allocation template specified_iea_data. Default TRUE. fu_allocations_tab_name name tab final--useful allocations Excel file containing final--useful allocation data. Default \"FU Allocations\".","code":""},{"path":"/reference/load_fu_allocation_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load FU allocation tables — load_fu_allocation_tables","text":"data frame FU Allocation tables read IEATools::load_fu_allocation_data(). FU Allocation data found generate_missing_fu_allocation_template TRUE, empty template written disk empty template returned. FU Allocation data found generate_missing_fu_allocation_template FALSE, NULL returned.","code":""},{"path":"/reference/load_fu_allocation_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load FU allocation tables — load_fu_allocation_tables","text":"default, assumed country's final--useful analysis file subfolder fu_analysis_path. Set use_subfolders FALSE change default behavior. final--useful allocation data available, function automatically creates empty final--useful allocation template writes disk. , function reads empty file. behavior can modified setting argument generate_missing_fu_allocation_template FALSE.","code":""},{"path":"/reference/load_hmw_pfu_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load human muscle work data — load_hmw_pfu_data","title":"Load human muscle work data — load_hmw_pfu_data","text":"function loads human muscle work data renames sectors according default arguments rename_mw_sectors().","code":""},{"path":"/reference/load_hmw_pfu_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load human muscle work data — load_hmw_pfu_data","text":"","code":"load_hmw_pfu_data(   ilo_working_hours_data_path,   ilo_employment_data_path,   mw_concordance_path,   hmw_analysis_data_path )"},{"path":"/reference/load_hmw_pfu_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load human muscle work data — load_hmw_pfu_data","text":"ilo_working_hours_data_path path ILO working hours data. ilo_employment_data_path path ILO employment data. mw_concordance_path path muscle work concordance. hmw_analysis_data_path path human muscle work data.","code":""},{"path":"/reference/load_hmw_pfu_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load human muscle work data — load_hmw_pfu_data","text":"data frame human muscle work data.","code":""},{"path":"/reference/machine_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about the machine efficiency files — machine_constants","title":"Information about the machine efficiency files — machine_constants","text":"string list containing information machine efficiency files. Items list provide default values machine efficiency files, including Excel tab names, etc.","code":""},{"path":"/reference/machine_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about the machine efficiency files — machine_constants","text":"","code":"machine_constants"},{"path":"/reference/machine_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information about the machine efficiency files — machine_constants","text":"string list 1 entries. efficiency_tab_name default name efficiency tabs machine efficiency excel files.","code":""},{"path":"/reference/machine_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about the machine efficiency files — machine_constants","text":"","code":"machine_constants #> $efficiency_tab_name #> [1] \"FIN_ETA\" #>"},{"path":"/reference/make_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance IEA data — make_balanced","title":"Balance IEA data — make_balanced","text":"Balances IEA data way amenable drake subtargets. Internally, function uses IEATools::fix_tidy_iea_df_balances(). Grouping done internal function using value grp_vars.","code":""},{"path":"/reference/make_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance IEA data — make_balanced","text":"","code":"make_balanced(   .iea_data,   max_fix = 6,   countries,   country = IEATools::iea_cols$country,   grp_vars = c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type,     IEATools::iea_cols$last_stage, IEATools::iea_cols$year, IEATools::iea_cols$product) )"},{"path":"/reference/make_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance IEA data — make_balanced","text":".iea_data tidy IEA data frame. max_fix maximum allowable energy imbalance fix. Default 3. countries countries balanced. country See IEATools::iea_cols grp_vars groups checked. Default c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type, IEATools::iea_cols$last_stage, IEATools::iea_cols$product).","code":""},{"path":"/reference/make_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balance IEA data — make_balanced","text":"data frame balanced IEA data.","code":""},{"path":"/reference/make_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance IEA data — make_balanced","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   is_balanced(countries = c(\"GHA\", \"ZAF\")) #> [1] TRUE"},{"path":"/reference/make_iea_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to PSUT matrices — make_iea_psut","title":"Convert to PSUT matrices — make_iea_psut","text":"Converts tidy IEA data PSUT matrices way amenable drake subtargets. Internally, IEATools::prep_psut() conversion matrices.","code":""},{"path":"/reference/make_iea_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to PSUT matrices — make_iea_psut","text":"","code":"make_iea_psut(   SpecifiedIEAData,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country )"},{"path":"/reference/make_iea_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to PSUT matrices — make_iea_psut","text":"SpecifiedIEAData data frame already specified via specify(). countries countries want convert PSUT matrices. matrix_class type matrix created. One \"matrix\" (base class) \"Matrix\" (sparse matrices). country See IEATools::iea_cols.","code":""},{"path":"/reference/make_iea_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to PSUT matrices — make_iea_psut","text":"matsindf-style data frame.","code":""},{"path":"/reference/make_iea_psut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to PSUT matrices — make_iea_psut","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   specify(countries = c(\"GHA\", \"ZAF\")) %>%   make_iea_psut(countries = c(\"GHA\", \"ZAF\")) #> # A tibble: 4 × 13 #>   Country Method Energy.type Last.stage  Year Y               S_units  R        #>   <chr>   <chr>  <chr>       <chr>      <dbl> <list>          <list>   <list>   #> 1 GHA     PCM    E           Final       1971 <dbl [12 × 21]> <dbl[…]> <dbl[…]> #> 2 GHA     PCM    E           Final       2000 <dbl [13 × 20]> <dbl[…]> <dbl[…]> #> 3 ZAF     PCM    E           Final       1971 <dbl [19 × 27]> <dbl[…]> <dbl[…]> #> 4 ZAF     PCM    E           Final       2000 <dbl [22 × 43]> <dbl[…]> <dbl[…]> #> # ℹ 5 more variables: U <list>, U_feed <list>, U_EIOU <list>, r_EIOU <list>, #> #   V <list>"},{"path":"/reference/make_mw_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"function filters countries creates PSUT matrices primary-final-useful muscle work data frames.","code":""},{"path":"/reference/make_mw_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"","code":"make_mw_psut(   .hmw_df,   .amw_df,   countries,   years,   matrix_class = c(\"matrix\", \"Matrix\"),   output_unit = c(\"TJ\", \"ktoe\"),   country = MWTools::mw_cols$country,   year = MWTools::mw_cols$year )"},{"path":"/reference/make_mw_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":".hmw_df, .amw_df Data frames primary-final-useful muscle work data. countries countries analyzed. years years analyzed. matrix_class type matrix created. One \"matrix\" (base class) \"Matrix\" (sparse matrices). output_unit string length one specifies output unit. One \"TJ\" \"ktoe\" terajoules kilotons oil equivalent. country name country column .hmw_df .amw_df. Default MWTools::mw_cols$country. year name year column .hmw_df .amw_df.Default MWTools::mw_cols$year.","code":""},{"path":"/reference/make_mw_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"data frame PSUT matrices muscle work energy conversion chain.","code":""},{"path":"/reference/move_to_exergy.html","id":null,"dir":"Reference","previous_headings":"","what":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"Converts energy conversion chains represented matrices data frame psut_energy energy quantities exergy quantities.","code":""},{"path":"/reference/move_to_exergy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"","code":"move_to_exergy(   psut_energy,   phi_vecs,   countries,   country = IEATools::iea_cols$country,   phi_colname = IEATools::phi_constants_names$phi_colname )"},{"path":"/reference/move_to_exergy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"psut_energy wide--matrices data frame energy conversion chain data. phi_vecs data frame vectors phi (exergy--energy ratios) countries countries task performed. country See IEATools::iea_cols. phi_colname See IEATools::phi_constants.","code":""},{"path":"/reference/move_to_exergy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"version psut_energy additional rows","code":""},{"path":"/reference/move_to_exergy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"steps calculation join phi_vecs psut_energy. Thereafter, call IEATools package matrix multiplications.","code":""},{"path":"/reference/move_to_useful.html","id":null,"dir":"Reference","previous_headings":"","what":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"Extends energy conversion chain final energy last stage useful energy last stage. last-stage-useful energy conversion chain PSUT matrices bound rows bottom psut_final data frame, albeit \"Useful\" instead \"Final\" Last.stage column.","code":""},{"path":"/reference/move_to_useful.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"","code":"move_to_useful(   psut_final,   C_mats,   eta_phi_vecs,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   C_Y = IEATools::template_cols$C_Y,   C_eiou = IEATools::template_cols$C_eiou )"},{"path":"/reference/move_to_useful.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"psut_final data frame rows describe energy conversion chain final energy last stage. C_mats data frame allocation matrices, probably Cmats target. eta_phi_vecs data frame final--useful efficiency exergy--energy ratio vectors. countries countries analyzed. country, year See IEATools::iea_cols. C_Y, C_eiou See IEATools::template_cols.","code":""},{"path":"/reference/move_to_useful.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"data frame energy conversion chain matrices last stage useful energy.","code":""},{"path":"/reference/nonstat_alloc_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"Creates allocation graph completed allocation table, mostly likely created assemble_fu_allocation_tables() function.","code":""},{"path":"/reference/nonstat_alloc_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"","code":"nonstat_alloc_graph(   .df,   country,   ef_product,   destination,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/nonstat_alloc_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":".df data frame comprised completed final energy allocations. country country graph applies. ef_product final energy product graph applies. destination destination sector final energy product. year See IEATools::iea_cols. .values, machine, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/nonstat_alloc_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"ggplot2 graph object","code":""},{"path":"/reference/nonstat_alloc_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"function called repeatedly nonstat_alloc_plots_df(). country, ef_product, destination form title graph.","code":""},{"path":"/reference/nonstat_alloc_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"/reference/nonstat_alloc_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"function adds column ggplot2 graphs completed allocation tables data frame. graphs stored list column named plots.","code":""},{"path":"/reference/nonstat_alloc_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"","code":"nonstat_alloc_plots_df(   .df,   countries,   data_col = \"Data\",   plots = \"Plots\",   country = IEATools::iea_cols$country,   ef_product = IEATools::template_cols$ef_product,   destination = IEATools::template_cols$destination,   quantity = IEATools::template_cols$quantity,   c_source = IEATools::template_cols$c_source,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product )"},{"path":"/reference/nonstat_alloc_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":".df completed allocation tables data frame. Default drake::readd(completed_allocation_tables_target, path = cache_path, character_only = TRUE). countries countries allocation plots created. data_col name output column containing nested data allocation graphs. Default \"Data\". plots name output column containing allocation graphs. Default \"Plots\". country See IEATools::iea_cols. ef_product, destination, quantity, c_source See IEATools::template_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed alloc_graph().","code":""},{"path":"/reference/nonstat_alloc_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"data frame containing list column ggplot2 non-stationary allocation graphs.","code":""},{"path":"/reference/nonstat_alloc_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"data frame grouped variables needed create allocation graph, specifically country, ef_product, destination nested prior making graphs, namely machine, eu_product, quantity, year, .values, c_source, meaning one allocation graph constructed combination variables.","code":""},{"path":"/reference/nonstat_alloc_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Method, ~Energy.type, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Quantity, ~Eu.product, ~C.source,                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 7 #> # Groups:   Country, Method, Energy.type, Ef.product, Destination [2] #>   Country Method Energy.type Ef.product Destination Data             Plots  #>   <chr>   <chr>  <chr>       <chr>      <chr>       <list>           <list> #> 1 GHA     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>   #> 2 ZAF     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>"},{"path":"/reference/phi_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Sources for phi values — phi_sources","title":"Sources for phi values — phi_sources","text":"string list containing named sources phi (exergy--energy ratio) values.","code":""},{"path":"/reference/phi_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sources for phi values — phi_sources","text":"","code":"phi_sources"},{"path":"/reference/phi_sources.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sources for phi values — phi_sources","text":"string list 3 entries. eta_fu_tables Tables final--useful efficiency values. temperature_data Country-average yearly temperature data. phi_constants Tables constant phi values.","code":""},{"path":"/reference/phi_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sources for phi values — phi_sources","text":"","code":"phi_sources #> $eta_fu_tables #> [1] \"eta_fu.tables\" #>  #> $temperature_data #> [1] \"temperature.data\" #>  #> $phi_constants #> [1] \"phi.constants\" #>"},{"path":"/reference/phi_u_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an phi_u graph — phi_u_graph","title":"Generate an phi_u graph — phi_u_graph","text":"Creates phi_u graph completed eta_fu table, created assemble_eta_fu_tables() function.","code":""},{"path":"/reference/phi_u_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an phi_u graph — phi_u_graph","text":"","code":"phi_u_graph(   .df,   countries,   country = IEATools::iea_cols$country,   quantity = IEATools::template_cols$quantity,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/phi_u_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an phi_u graph — phi_u_graph","text":".df data frame comprised completed exergy--energy ratio values countries countries efficiency plots created. country, year See IEATools::iea_cols. .values, machine, quantity, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/phi_u_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an phi_u graph — phi_u_graph","text":"ggplot2 graph object","code":""},{"path":"/reference/phi_u_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an phi_u graph — phi_u_graph","text":"function called repeatedly phi_u_plots_df(). machine, destination form title graph.","code":""},{"path":"/reference/phi_u_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an phi_u graph — phi_u_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"/reference/phi_u_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phi_u graphs in a data frame — phi_u_plots_df","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"function adds column ggplot2 graphs completed phi_u tables data frame. graphs stored list column named plots.","code":""},{"path":"/reference/phi_u_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"","code":"phi_u_plots_df(   .df,   countries,   plots = \"Plots\",   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"/reference/phi_u_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":".df completed final-useful efficiency tables data frame. contains eta.fu phi.u values. Default drake::readd(PFUDatabase::target_names$completed_efficiency_tables, path = cache_path, character_only = TRUE). countries countries exergy--energy ratio plots created. plots name output column containing exergy--energy ratio graph. Default \"plots\". country See IEATools::iea_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed eta_fu_graph(). machine_eu_product name combined machine eu_product column.","code":""},{"path":"/reference/phi_u_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"data frame containing list column ggplot2 exergy--energy ratio graphs.","code":""},{"path":"/reference/phi_u_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"default, completed phi_u tables data frame read drake cache. data frame grouped machine, eu_product nested prior making graphs, meaning one exergy--energy ratio graph constructed combination machine, eu_product.","code":""},{"path":"/reference/phi_u_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Eu.product,                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"MD\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 5 #> # Groups:   Country, Ef.product, Destination [2] #>   Country Ef.product Destination Data             Plots  #>   <chr>   <chr>      <chr>       <list>           <list> #> 1 GHA     Gasoline   Transport   <tibble [4 × 4]> <gg>   #> 2 ZAF     Gasoline   Transport   <tibble [4 × 4]> <gg>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/quasi-quote-assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment — :=","title":"Assignment — :=","text":"See rlang:::= details.","code":""},{"path":"/reference/quasi-quote-assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment — :=","text":"","code":"x := y"},{"path":"/reference/read_all_eta_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"function reads files eat_fin_paths creates data frame important efficiency variables.","code":""},{"path":"/reference/read_all_eta_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"","code":"read_all_eta_files(   eta_fin_paths,   efficiency_tab_name = PFUDatabase::machine_constants$efficiency_tab_name,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   hidden_excel_file_prefix = \"~$\" )"},{"path":"/reference/read_all_eta_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"eta_fin_paths list file paths machine excel files containing FIN_ETA front sheets, therefore usable data. Created calling get_eta_filepaths() function. efficiency_tab_name See PFUDatabase::machine_constants. year See IEATools::iea_cols. .values See IEATools::template_cols. hidden_excel_file_prefix prefix hidden Excel files. files appear Excel file open ignored. Default \"~$\".","code":""},{"path":"/reference/read_all_eta_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"data frame containing Eta.fu Phi.u values present Machine excel files, following column names: \"Country\", \"Energy.type\", \"Last.stage\", \"Method\", \"Machine\", \"Eu.product\", \"Quantity\", \"Year\", \"Value\".","code":""},{"path":"/reference/read_all_eta_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"Note eta_fin_paths typically list file paths, character string. eta_fin_paths can single character string (list), case interpreted directory containing files Eta.fu Phi.u values. eta_fin_paths single character string (list), directory interrogated files, list file paths constructed, files read. get_eta_filepaths() called internally reading files creating data frames.","code":""},{"path":"/reference/rename_mw_sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"muscle work methodology MWTools package uses slightly different final demand sector names compared IEA IEATools package.. function converts MWTools sector names appropriate IEA sector names.","code":""},{"path":"/reference/rename_mw_sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"","code":"rename_mw_sectors(   .df,   sector_colname = MWTools::mw_constants$sector_col,   original_sector_names = c(MWTools::mw_sectors$agriculture_broad.sector,     MWTools::mw_sectors$transport_sector, MWTools::mw_sectors$services_broad.sector,     MWTools::mw_sectors$industry_broad.sector),   new_sector_names = c(IEATools::other_flows$agriculture_forestry,     IEATools::transport_flows$transport_not_elsewhere_specified,     IEATools::other_flows$commercial_and_public_services,     IEATools::industry_flows$industry_not_elsewhere_specified) )"},{"path":"/reference/rename_mw_sectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":".df data frame muscle work data. sector_colname name sector column. Default MWTools::mw_constants$sector_col. original_sector_names vector string sector names replaced. new_sector_names vector string sector names appear output.","code":""},{"path":"/reference/rename_mw_sectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"data frame renamed sectors.","code":""},{"path":"/reference/rename_mw_sectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"","code":"df <- tibble::tribble(~Sector, ~value,                        MWTools::mw_sectors$transport_sector,         10,                        MWTools::mw_sectors$agriculture_broad.sector, 11,                       MWTools::mw_sectors$services_broad.sector,    12,                       MWTools::mw_sectors$industry_broad.sector,    13,                        \"bogus\",                                      14) df #> # A tibble: 5 × 2 #>   Sector      value #>   <chr>       <dbl> #> 1 Transport      10 #> 2 Agriculture    11 #> 3 Services       12 #> 4 Industry       13 #> 5 bogus          14 rename_mw_sectors(df) #> # A tibble: 5 × 2 #>   Sector                            value #>   <chr>                             <dbl> #> 1 Transport not elsewhere specified    10 #> 2 Agriculture/forestry                 11 #> 3 Commercial and public services       12 #> 4 Industry not elsewhere specified     13 #> 5 bogus                                14"},{"path":"/reference/sample_exemplar_table_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"Gives file path sample exemplar table","code":""},{"path":"/reference/sample_exemplar_table_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"","code":"sample_exemplar_table_path()"},{"path":"/reference/sample_exemplar_table_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"path sample exemplar table bundled package.","code":""},{"path":"/reference/sample_exemplar_table_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"","code":"sample_exemplar_table_path() #> [1] \"/Users/mkh2/github/PFUDatabase/inst/extdata/Exemplar_Table.xlsx\""},{"path":"/reference/sep_eta_fu_phi_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"Choose eta.fu phi.u columns data frame eta.fu phi.u vectors.","code":""},{"path":"/reference/sep_eta_fu_phi_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"","code":"sep_eta_fu_phi_u(   eta_fu_phi_u_vecs,   keep = c(IEATools::template_cols$eta_fu, IEATools::template_cols$phi_u),   countries,   country = IEATools::iea_cols$country )"},{"path":"/reference/sep_eta_fu_phi_u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"eta_fu_phi_u_vecs data frame containing metadata columns columns eta_fu (final useful efficiency) phi_u (exergy--energy efficiency ratios). keep Tells column keep, eta_fu phi_u. Must one IEATools::template_cols$eta_fu IEATools::template_cols$phi_u. countries countries analyzed. country See IEATools::iea_cols.","code":""},{"path":"/reference/sep_eta_fu_phi_u.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"data frame metadata either eta_fu column phi_u column","code":""},{"path":"/reference/socioecon_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for socioeconomic data files — socioecon_cols","title":"Constants for socioeconomic data files — socioecon_cols","text":"string list containing values features socioeconomic data files.","code":""},{"path":"/reference/socioecon_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for socioeconomic data files — socioecon_cols","text":"","code":"socioecon_cols"},{"path":"/reference/socioecon_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for socioeconomic data files — socioecon_cols","text":"string list 14 entries. isocode_colname name column containing ISO country codes, \"isocode\". year_colname name column containing years, \"Year\". rgdpe_colname name column containing rgdpe values, \"rgdpe\". rgdpo_colname name column containing rgdpo values, \"rgdpo\". rgdpna_colname name column containing rgdpna values, \"rgdpna\". emp_colname name column containing employment values, \"emp\". avh_colname name column containing avh values, \"avh\". hc_colname name column containing hc values, \"hc\". rnna_colname name column containing rnna values, \"rnna\". rkna_colname name column containing rkna values, \"rkna\". K_colname name column containing capital values, \"K\". Kserv_colname name column containing capital services values, \"Kserv\". L_colname name column containing labor values, \"L\". Ladj_colname name column containing quality-adjusted labor values, \"Ladj\".","code":""},{"path":"/reference/socioecon_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constants for socioeconomic data files — socioecon_cols","text":"","code":"socioecon_cols #> $isocode_colname #> [1] \"isocode\" #>  #> $year_colname #> [1] \"year\" #>  #> $rgdpe_colname #> [1] \"rgdpe\" #>  #> $rgdpo_colname #> [1] \"rgdpo\" #>  #> $rgdpna_colname #> [1] \"rgdpna\" #>  #> $emp_colname #> [1] \"emp\" #>  #> $avh_colname #> [1] \"avh\" #>  #> $hc_colname #> [1] \"hc\" #>  #> $rnna_colname #> [1] \"rnna\" #>  #> $rkna_colname #> [1] \"rkna\" #>  #> $K_colname #> [1] \"K\" #>  #> $Kserv_colname #> [1] \"Kserv\" #>  #> $L_colname #> [1] \"L\" #>  #> $Ladj_colname #> [1] \"Ladj\" #>"},{"path":"/reference/specify.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the IEA data — specify","title":"Specify the IEA data — specify","text":"Specifies IEA data way amenable drake subtargets. See IEATools::specify_all() details.","code":""},{"path":"/reference/specify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the IEA data — specify","text":"","code":"specify(BalancedIEAData, countries, country = IEATools::iea_cols$country)"},{"path":"/reference/specify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the IEA data — specify","text":"BalancedIEAData IEA data already balanced countries countries specification occur country See IEATools::iea_cols.","code":""},{"path":"/reference/specify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the IEA data — specify","text":"data frame specified IEA data","code":""},{"path":"/reference/specify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify the IEA data — specify","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   specify(countries = c(\"GHA\", \"ZAF\")) #> # A tibble: 449 × 11 #>    Country Method Energy.type Last.stage  Year Ledger.side #>    <chr>   <chr>  <chr>       <chr>      <dbl> <chr>       #>  1 GHA     PCM    E           Final       1971 Consumption #>  2 GHA     PCM    E           Final       1971 Consumption #>  3 GHA     PCM    E           Final       1971 Consumption #>  4 GHA     PCM    E           Final       1971 Consumption #>  5 GHA     PCM    E           Final       1971 Consumption #>  6 GHA     PCM    E           Final       1971 Consumption #>  7 GHA     PCM    E           Final       1971 Consumption #>  8 GHA     PCM    E           Final       1971 Consumption #>  9 GHA     PCM    E           Final       1971 Consumption #> 10 GHA     PCM    E           Final       1971 Consumption #> # ℹ 439 more rows #> # ℹ 5 more variables: Flow.aggregation.point <chr>, Flow <chr>, Product <chr>, #> #   Unit <chr>, E.dot <dbl>"},{"path":"/reference/sum_phi_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sums phi_pf and phi_u vectors — sum_phi_vecs","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"function verifies rows common two input vectors.","code":""},{"path":"/reference/sum_phi_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"","code":"sum_phi_vecs(   phi_pf_vecs,   phi_u_vecs,   countries,   country = IEATools::iea_cols$country,   last_stage = IEATools::iea_cols$last_stage,   energy_type = IEATools::iea_cols$energy_type,   method = IEATools::iea_cols$method,   phi_pf_colname = IEATools::template_cols$phi_pf,   phi_u_colname = IEATools::template_cols$phi_u,   phi_colname = IEATools::phi_constants_names$phi_colname,   .nrow_diffs = \".nrow_diffs\",   .phi_shape_OK = \".phi_shape_OK\",   .phi_names_OK = \".phi_names_OK\",   .phi_cols_OK = \".phi_cols_OK\",   .phi_sum_OK = \".phi_sum_OK\",   .phi_pf_colnames = \".phi_pf_colnames\",   .phi_u_colnames = \".phi_u_colnames\" )"},{"path":"/reference/sum_phi_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"phi_pf_vecs data frame phi_pf vectors. phi_u_vecs data frame phi_u vectors. countries countries want perform task. country, last_stage, energy_type, method See IEATools::iea_cols. phi_pf_colname, phi_u_colname See IEATools::template_cols. phi_colname See IEATools::phi_constants_names. .nrow_diffs, .phi_shape_OK, .phi_names_OK, .phi_cols_OK, .phi_sum_OK, .phi_pf_colnames, .phi_u_colnames Names temporary error-checking columns created internally.","code":""},{"path":"/reference/sum_phi_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"data frame summed phi_pf phi_u vectors.","code":""},{"path":"/reference/sum_phi_vecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"","code":"phi_pf_vec <- matrix(c(1.1,                        1.05), nrow = 2, ncol = 1,                      dimnames = list(c(\"Coal\", \"Oil\"), \"phi\")) # Make a data frame of phi_pf vectors phi_pf <- tibble::tibble(phi.pf = RCLabels::make_list(phi_pf_vec, n = 2, lenx = 1),                          Country = \"GHA\",                          Year = c(1971, 2000)) phi_u_vec <- matrix(c(0.8,                       0.9,                       0.7), nrow = 3, ncol = 1,                     dimnames = list(c(\"Light\", \"MD\", \"Propulsion\"), \"phi\")) phi_u <- tibble::tibble(phi.u = RCLabels::make_list(phi_u_vec, n = 2, lenx = 1),                         Country = \"GHA\",                         Year = c(1971, 2000)) sum_phi_vecs(phi_pf, phi_u, countries = \"GHA\") #> # A tibble: 2 × 3 #>   Country  Year phi           #>   <chr>   <dbl> <list>        #> 1 GHA      1971 <dbl [5 × 1]> #> 2 GHA      2000 <dbl [5 × 1]>"},{"path":"/reference/target_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Targets cache target names — target_names","title":"Targets cache target names — target_names","text":"string list containing names targets targets.","code":""},{"path":"/reference/target_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targets cache target names — target_names","text":"","code":"target_names"},{"path":"/reference/target_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Targets cache target names — target_names","text":"string list 48 entries. countries countries analyzed pipeline. additional_exemplar_countries additional exemplar countries allocations efficiencies can obtained. alloc_and_eff_countries allocation efficiency countries target targets cache, giving countries final--useful allocations efficiencies can drawn final--useful analyses. superset countries analyzed. years years analyzed. iea_data_path path file containing IEA extended energy balance data. country_concordance_path path country concordance file. phi_constants_path path exergy--energy ration (phi) constants. ceda_data_folder path folder containing CEDA data. machine_data_path path folder containing machine data excel files. exemplar_table_path path exemplar table. fu_analysis_folder path folder containing final--useful analyses various countries. report_source_folders path folder containing reports run last step pipeline. report_dest_folder path folder containing reports pipeline. pipeline_caches_folder path folder containing pipeline caches release. pipeline_releases_folder path folder containing releases targets. release boolean telling whether release requested. iea_data IEA data countries. country_concordance_table data frame containing concordance information maps full country names custom 3 letter codes. ceda_data name data frame containing CEDA temperature data read ceda_data_folder. all_machine_data data frame containing eta_fu values. machine_data filtered version all_machine_data containing information alloc_and_eff_countries. socio_econ_data data frame containing socioeconomic data, supplied get_L_K_GDP_data(). balanced_before boolean indicating whether iea_data balanced analysis. usually , value typically FALSE. balanced_iea_data balanced version iea_data. balanced_after balanced_before, balancing. always TRUE. ok_to_proceed boolean telling whether can continue pipeline. target errors balanced_after TRUE. specified data frame containing specified IEA data. psut_final data frame containing specified PSUT format. exemplar_lists data frame lists exemplar countries country countries, maybe . phi_constants data frame constant values exergy--energy ratio (phi). incomplete_allocation_tables data frame final--useful allocation tables, one country. allocation tables may incomplete. completed_allocation_tables data frame completed final--useful allocation tables. completed_efficiency_tables data frame completed final--useful efficiency tables. completed_phi_u_tables data frame completed useful-stage exergy--energy ratios. cmats data frame containing CompletedAllocationTables matrix form. eta_fu_phi_u_vecs data frame containing final--useful efficiency vectors useful exergy--energy ratios. eta_fu_vecs data frame containing final--useful efficiency vectors. phi_u_vecs data frame containing useful exergy--energy ratio vectors. phi_pf_vecs data frame containing primary final exergy--energy ratio vectors. phi_vecs data frame containing exergy--energy ratio vectors. psut_useful data frame containing PSUT matrices useful stage. psut data frame containing PSUT matrices useful stage exergy. allocation_graphs data frame containing final--useful allocation graphs. non_stationary_allocation_graphs data frame containing final--useful allocation graphs, non-stationary data . efficiency_graphs data frame containing final--useful efficiency graphs. phi_graphs data frame containing exergy--energy ratio (phi) graphs. release_psut target release psut target. Contains name target message saying release requested. store_cache target stores targets cache. Contains name target message saying release requested.","code":""},{"path":"/reference/target_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Targets cache target names — target_names","text":"","code":"target_names #> $countries #> [1] \"Countries\" #>  #> $additinoal_exemplar_countries #> [1] \"AdditionalExemplarCountries\" #>  #> $alloc_and_eff_countries #> [1] \"AllocAndEffCountries\" #>  #> $years #> [1] \"Years\" #>  #> $iea_data_path #> [1] \"IEADataPath\" #>  #> $country_concordance_path #> [1] \"CountryConcordancePath\" #>  #> $phi_constants_path #> [1] \"PhiConstantsPath\" #>  #> $ceda_data_folder #> [1] \"CEDADataFolder\" #>  #> $machine_data_path #> [1] \"MachineDataPath\" #>  #> $exemplar_table_path #> [1] \"ExemplarTablePath\" #>  #> $fu_analysis_folder #> [1] \"FUAnalysisFolder\" #>  #> $report_source_folders #> [1] \"ReportsSourceFolders\" #>  #> $report_dest_folder #> [1] \"ReportsDestFolder\" #>  #> $pipeline_caches_folder #> [1] \"PipelineCachesFolder\" #>  #> $pipeline_releases_folder #> [1] \"PipelineReleasesFolder\" #>  #> $release #> [1] \"Release\" #>  #> $iea_data #> [1] \"IEAData\" #>  #> $country_concordance_table #> [1] \"CountryConcordanceTable\" #>  #> $ceda_data #> [1] \"CEDAData\" #>  #> $all_machine_data #> [1] \"AllMachineData\" #>  #> $machine_data #> [1] \"MachineData\" #>  #> $socio_econ_data #> [1] \"SocioEconData\" #>  #> $balanced_before #> [1] \"BalancedBefore\" #>  #> $balanced_iea_data #> [1] \"BalancedIEAData\" #>  #> $balanced_after #> [1] \"BalancedAfter\" #>  #> $ok_to_proceed #> [1] \"OKToProceed\" #>  #> $specified #> [1] \"Specified\" #>  #> $psut_final #> [1] \"PSUTFinal\" #>  #> $exemplar_lists #> [1] \"ExemplarLists\" #>  #> $phi_constants #> [1] \"PhiConstants\" #>  #> $incomplete_allocation_tables #> [1] \"IncompleteAllocationTables\" #>  #> $completed_allocation_tables #> [1] \"CompletedAllocationTables\" #>  #> $completed_efficiency_tables #> [1] \"CompletedEfficiencyTables\" #>  #> $completed_phi_u_tables #> [1] \"CompletedPhiuTables\" #>  #> $cmats #> [1] \"Cmats\" #>  #> $eta_fu_phi_u_vecs #> [1] \"EtafuPhiuvecs\" #>  #> $eta_fu_vecs #> [1] \"Etafuvecs\" #>  #> $phi_u_vecs #> [1] \"Phiuvecs\" #>  #> $phi_pf_vecs #> [1] \"Phipfvecs\" #>  #> $phi_vecs #> [1] \"Phivecs\" #>  #> $psut_useful #> [1] \"PSUTUseful\" #>  #> $psut #> [1] \"PSUT\" #>  #> $allocation_graphs #> [1] \"AllocationGraphs\" #>  #> $non_stationary_allocation_graphs #> [1] \"NonStationaryAllocationGraphs\" #>  #> $efficiency_graphs #> [1] \"EfficiencyGraphs\" #>  #> $phi_graphs #> [1] \"PhiGraphs\" #>  #> $release_psut #> [1] \"ReleasePSUT\" #>  #> $store_cache #> [1] \"StoreCache\" #>"},{"path":"/reference/verify_mw_energy_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"constructing muscle work PSUT matrices, energy balance verified. Internally, function uses Recca::verify_SUT_energy_balance() ensure everything balanced.","code":""},{"path":"/reference/verify_mw_energy_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"","code":"verify_mw_energy_balance(   .psut_df,   countries,   country = MWTools::mw_cols$country )"},{"path":"/reference/verify_mw_energy_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":".psut_df data frame muscle work PSUT matrices. countries countries analyzed. country name country column .psut_df.","code":""},{"path":"/reference/verify_mw_energy_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"data frame new boolean column \".balanced\" tells whether matrices balanced.","code":""},{"path":"/reference/verify_mw_energy_balance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":".psut_df zero rows, TRUE returned, enabling pipeline continue, even years muscle work data available.","code":""},{"path":"/news/index.html","id":"pfudatabase-012-2023-08-18","dir":"Changelog","previous_headings":"","what":"PFUDatabase 0.1.2 (2023-08-18)","title":"PFUDatabase 0.1.2 (2023-08-18)","text":"Adapted changes MWTools downloading analyzing ILO data. New targets PSUT_USA EtafuYEIOU.","code":""},{"path":"/news/index.html","id":"pfudatabase-011-2023-05-18-doi","dir":"Changelog","previous_headings":"","what":"PFUDatabase 0.1.1 (2023-05-18)","title":"PFUDatabase 0.1.1 (2023-05-18)","text":"Released version 1.1 database. also releasing version package. Now filtering muscle work data countries, years, methods, energy types, last stages also present IEA data. Effectively, change eliminates MW data 1960-1970 developing nations whose IEA data starts 1971. target PSUTMW_all_years retains muscle work data, target PSUTMW filtered. Back saving cache upon release. cache needed Shiny app. longer tracking 3 separate pinned outputs. Now one pin (PSUT) contains data IEA MW identified IEAMW column. matsbyname::make_list() –> RCLabels::make_list() add_iea_mw_psut() now returns one IEA data frame muscle work data frame NULL, thereby enabling pipeline complete data missing year. verify_mw_energy_balance() now returns TRUE zero-row data frame supplied. change enables analysis years muscle work data available. New functions load_amw_pfu_data(), load_hmw_pfu_data(), rename_mw_sectors() ensure muscle work final demand sectors comport IEA final demand sectors. targets pipeline now longer saves cache. never looked , anyway. targets pipeline now includes muscle work combined IEA data. targets pipeline now allows additional exemplar countries without IEA data skipping writing allocations templates IEA data exists. New targets pipeline matches previous drake workflow extent. Cache now stashed release requested. Now ignore efficiency files begin “~$”, thereby ignoring open Excel sheets. longer skip first row FIN_ETA sheets. first line formerly held modification date.","code":""},{"path":"/news/index.html","id":"pfudatabase-010-2022-04-14-doi","dir":"Changelog","previous_headings":"","what":"PFUDatabase 0.1.0 (2022-04-14)","title":"PFUDatabase 0.1.0 (2022-04-14)","text":"Beginning develop package targets workflow. Several pieces targets pipeline now place.","code":""},{"path":"/news/index.html","id":"pfudatabase-009-2022-04-03-doi","dir":"Changelog","previous_headings":"","what":"PFUDatabase 0.0.9 (2022-04-03)","title":"PFUDatabase 0.0.9 (2022-04-03)","text":"Update names constants debugging file.","code":""},{"path":"/news/index.html","id":"pfudatabase-008-2022-02-24-doi","dir":"Changelog","previous_headings":"","what":"PFUDatabase 0.0.8 (2022-02-24)","title":"PFUDatabase 0.0.8 (2022-02-24)","text":"Name change PFUDatabase. Now using pins package storing PSUT target.","code":""}]
