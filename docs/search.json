[{"path":[]},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement matthew.heun@.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to PFUPipeline","title":"Contributing to PFUPipeline","text":"document outlines propose change PFUPipeline package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to PFUPipeline","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to PFUPipeline","text":"want make change bigger fixing typos, first file issue GitHub make sure someone team agrees proposed change needed. ’ve found bug, please file issue illustrates bug minimal reprex.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to PFUPipeline","text":"Fork package clone onto computer. Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(). Follow prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e., beneath “always resolves latest release.”).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to PFUPipeline","text":"New code written style matches rest code PFUPipeline. use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"tests","dir":"","previous_headings":"Bigger changes","what":"Tests","title":"Contributing to PFUPipeline","text":"use testthat unit tests. maintain 100% test coverage. Contributions reduce test coverage less 100% rejected.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to PFUPipeline","text":"Please note RCLabels project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to PFUPipeline","text":"guide contributing adapted Contributing guide usethis package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 PFUPipeline authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PFUPipeline Demo","text":"vignette demonstrates features PFUPipeline package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"load-pfupipeline","dir":"Articles","previous_headings":"","what":"Load PFUPipeline","title":"PFUPipeline Demo","text":"PFUPipeline package runs targets pipeline stores data Dropbox using pins package. retrieve data, one needs access Dropbox folder containing pipeline releases valid pin name. One valid pin name “psut” valid pin release “20220828T174526Z-60a07”. “20220828T174526Z-60a07” contains data countries (155) years (1960–2019).","code":"folder <- PFUSetup::get_abs_paths()[[\"pipeline_releases_folder\"]] folder #> [1] \"/Users/mkh2/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases\" # version <- \"20220828T174526Z-60a07\" # All countries version <- \"20220909T125050Z-e5a95\" # Only GHA psut_mats <- folder %>%    pins::board_folder(versioned = TRUE) %>%    pins::pin_read(\"psut\", version = version)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"PFUPipeline Demo","text":"psut_mats R data frame. Let’s look contents. metadata columns contain following values.","code":"dplyr::glimpse(psut_mats) #> Rows: 588 #> Columns: 14 #> $ Country     <chr> \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"G… #> $ Method      <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"P… #> $ Energy.type <chr> \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\"… #> $ Last.stage  <chr> \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Fin… #> $ Year        <dbl> 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980… #> $ IEAMW       <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"I… #> $ V           <list> <<matrix[12 x 14]>>, <<matrix[10 x 14]>>, <<matrix[10 x 1… #> $ Y           <list> <<matrix[12 x 22]>>, <<matrix[12 x 23]>>, <<matrix[12 x 2… #> $ S_units     <list> <<matrix[16 x 1]>>, <<matrix[16 x 1]>>, <<matrix[16 x 1]>… #> $ R           <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U_feed      <list> <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, … #> $ U_EIOU      <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U           <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … #> $ r_EIOU      <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … psut_mats$Country %>% unique() #> [1] \"GHA\" psut_mats$Method %>% unique() #> [1] \"PCM\" psut_mats$Energy.type %>% unique() #> [1] \"E\" \"X\" psut_mats$Last.stage %>% unique() #> [1] \"Final\"  \"Useful\" c(psut_mats$Year %>% min(), psut_mats$Year %>% max()) #> [1] 1971 2019 psut_mats$IEAMW %>% unique() #> [1] \"IEA\"  \"MW\"   \"Both\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"example-ecc-matrices","dir":"Articles","previous_headings":"","what":"Example ECC matrices","title":"PFUPipeline Demo","text":"Let’s look matrices using Ghana 1971 example. Simple matrices can found muscle work data frames. matrices can dumped Excel file easier browsing. Sankey diagram can created. useful energy last stage, see food feed creating muscle work. IEA data give rise complicated matrices. one last stage final energy. push useful energy, matrices become complex. Sankey diagram unsurprisingly busier, matrices keep everything organized.","code":"GHA1971_MW_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"MW\") dplyr::glimpse(GHA1971_MW_final) #> Rows: 1 #> Columns: 14 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> GHA1971_MW_final$R[[1]] #>                        Biomass [from Resources] #> Resources [of Biomass]                 1026.386 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$U[[1]] #>                             Farms Feed production Food production #> Biomass                     0.000        119.1334        907.2526 #> Biomass [from Resources] 1026.386          0.0000          0.0000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" GHA1971_MW_final$V[[1]] #>                  Biomass     Feed     Food #> Farms           1026.386  0.00000   0.0000 #> Feed production    0.000 53.61001   0.0000 #> Food production    0.000  0.00000 471.7713 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$Y[[1]] #>      Agriculture/forestry Commercial and public services #> Feed             26.50066                        0.00000 #> Food            367.65411                       49.19114 #>      Industry not elsewhere specified Transport not elsewhere specified #> Feed                          0.00000                          27.10935 #> Food                         54.92608                           0.00000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" gha_mw_file <- file.path(\"~\", \"GHA1971_MW_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_MW_final, path = gha_mw_file, overwrite_file = TRUE) GHA1971_MW_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_MW_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"MW\") GHA1971_MW_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_final, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_useful.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_useful, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"example-calculations","dir":"Articles","previous_headings":"","what":"Example calculations","title":"PFUPipeline Demo","text":"following subsections illustrate example calculations.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"matrix-math","dir":"Articles","previous_headings":"Example calculations","what":"Matrix math","title":"PFUPipeline Demo","text":"calculate value added matrix (W) within data frame using dplyr::mutate().","code":"with_W <- GHA1971_MW_final %>%    dplyr::mutate(     W = matsbyname::transpose_byname(GHA1971_MW_final$V) %>%       matsbyname::difference_byname(GHA1971_MW_final$U)   ) dplyr::glimpse(with_W) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> #> $ W           <list> <<matrix[4 x 3]>> with_W$W[[1]] #>                              Farms Feed production Food production #> Biomass                   1026.386      -119.13336       -907.2526 #> Biomass [from Resources] -1026.386         0.00000          0.0000 #> Feed                         0.000        53.61001          0.0000 #> Food                         0.000         0.00000        471.7713 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"upstream-swim","dir":"Articles","previous_headings":"Example calculations","what":"Upstream swim","title":"PFUPipeline Demo","text":"PSUT framework allows upstream downstream “swims.” final demand matrix IEA data. Let’s say wanted know energy (stages) required provide residential energy country. can use input-output ``upstream swim’’ analysis. First, calculate input-output matrices. Next, define Y_prime matrix contains final demand residences. Now let’s swim upstream Y_prime matrix see upstream energy needed supply Residential final demand. _prime matrices want. keep make new Sankey diagram. Make Sankey diagram energy required supply Residential demand . Sankey diagram, can see ways Ghanaian residences demanded upstream primary energy 1971.","code":"# View(GHA1971_IEA_final$Y[[1]]) with_io_mats <- GHA1971_IEA_final %>%    Recca::calc_io_mats() dplyr::glimpse(with_io_mats) #> Rows: 1 #> Columns: 34 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ V           <list> <<matrix[12 x 14]>> #> $ Y           <list> <<matrix[12 x 22]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ R           <list> <<matrix[2 x 2]>> #> $ U_feed      <list> <<matrix[6 x 5]>> #> $ U_EIOU      <list> <<matrix[2 x 2]>> #> $ U           <list> <<matrix[8 x 5]>> #> $ r_EIOU      <list> <<matrix[8 x 5]>> #> $ y           <list> <<matrix[12 x 1]>> #> $ q           <list> <<matrix[16 x 1]>> #> $ f           <list> <<matrix[5 x 1]>> #> $ g           <list> <<matrix[12 x 1]>> #> $ h           <list> <<matrix[2 x 1]>> #> $ r           <list> <<matrix[2 x 1]>> #> $ W           <list> <<matrix[16 x 12]>> #> $ Z           <list> <<matrix[8 x 12]>> #> $ K           <list> <<matrix[8 x 5]>> #> $ C           <list> <<matrix[14 x 12]>> #> $ D           <list> <<matrix[12 x 16]>> #> $ A           <list> <<matrix[8 x 16]>> #> $ O           <list> <<matrix[2 x 2]>> #> $ L_pxp       <list> <<matrix[16 x 16]>> #> $ L_ixp       <list> <<matrix[12 x 16]>> #> $ Z_feed      <list> <<matrix[6 x 12]>> #> $ K_feed      <list> <<matrix[6 x 5]>> #> $ A_feed      <list> <<matrix[6 x 16]>> #> $ L_pxp_feed  <list> <<matrix[16 x 16]>> #> $ L_ixp_feed  <list> <<matrix[12 x 16]>> with_Y_prime <- with_io_mats %>%    dplyr::mutate(     Y_prime = Y %>%        matsbyname::select_cols_byname(\"Residential\")   ) with_Y_prime$Y_prime[[1]] #>                                       Residential #> Aviation gasoline                               0 #> Charcoal                                      119 #> Crude oil                                       0 #> Electricity                                    14 #> Fuel oil                                        0 #> Gas/diesel oil excl. biofuels                   0 #> Kerosene type jet fuel excl. biofuels           0 #> Liquefied petroleum gases (LPG)                 3 #> Lubricants                                      0 #> Motor gasoline excl. biofuels                   0 #> Other kerosene                                 84 #> Primary solid biofuels                       1464 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" residential_ecc <- with_Y_prime %>%    Recca::new_Y() dplyr::glimpse(residential_ecc) #> Rows: 1 #> Columns: 41 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ V            <list> <<matrix[12 x 14]>> #> $ Y            <list> <<matrix[12 x 22]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ R            <list> <<matrix[2 x 2]>> #> $ U_feed       <list> <<matrix[6 x 5]>> #> $ U_EIOU       <list> <<matrix[2 x 2]>> #> $ U            <list> <<matrix[8 x 5]>> #> $ r_EIOU       <list> <<matrix[8 x 5]>> #> $ y            <list> <<matrix[12 x 1]>> #> $ q            <list> <<matrix[16 x 1]>> #> $ f            <list> <<matrix[5 x 1]>> #> $ g            <list> <<matrix[12 x 1]>> #> $ h            <list> <<matrix[2 x 1]>> #> $ r            <list> <<matrix[2 x 1]>> #> $ W            <list> <<matrix[16 x 12]>> #> $ Z            <list> <<matrix[8 x 12]>> #> $ K            <list> <<matrix[8 x 5]>> #> $ C            <list> <<matrix[14 x 12]>> #> $ D            <list> <<matrix[12 x 16]>> #> $ A            <list> <<matrix[8 x 16]>> #> $ O            <list> <<matrix[2 x 2]>> #> $ L_pxp        <list> <<matrix[16 x 16]>> #> $ L_ixp        <list> <<matrix[12 x 16]>> #> $ Z_feed       <list> <<matrix[6 x 12]>> #> $ K_feed       <list> <<matrix[6 x 5]>> #> $ A_feed       <list> <<matrix[6 x 16]>> #> $ L_pxp_feed   <list> <<matrix[16 x 16]>> #> $ L_ixp_feed   <list> <<matrix[12 x 16]>> #> $ Y_prime      <list> <<matrix[12 x 1]>> #> $ R_prime      <list> <<matrix[2 x 16]>> #> $ U_prime      <list> <<matrix[8 x 12]>> #> $ U_feed_prime <list> <<matrix[6 x 12]>> #> $ U_EIOU_prime <list> <<matrix[8 x 12]>> #> $ r_EIOU_prime <list> <<matrix[8 x 12]>> #> $ V_prime      <list> <<matrix[12 x 16]>> residential_ecc_trimmed <- residential_ecc %>%    dplyr::select(Country, Method, Energy.type, Last.stage, Year, IEAMW,                 R_prime, U_prime, U_feed_prime, U_EIOU_prime,                  r_EIOU_prime, V_prime, Y_prime, S_units) %>%    dplyr::rename(     R = R_prime,      U = U_prime,      U_feed = U_feed_prime,     U_EIOU = U_EIOU_prime,     r_EIOU = r_EIOU_prime,     V = V_prime,      Y = Y_prime   ) %>%    dplyr::mutate(Sector = \"Residential\") dplyr::glimpse(residential_ecc_trimmed) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ R           <list> <<matrix[2 x 16]>> #> $ U           <list> <<matrix[8 x 12]>> #> $ U_feed      <list> <<matrix[6 x 12]>> #> $ U_EIOU      <list> <<matrix[8 x 12]>> #> $ r_EIOU      <list> <<matrix[8 x 12]>> #> $ V           <list> <<matrix[12 x 16]>> #> $ Y           <list> <<matrix[12 x 1]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ Sector      <chr> \"Residential\" residential_ecc_trimmed %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"efficiencies","dir":"Articles","previous_headings":"Example calculations","what":"Efficiencies","title":"PFUPipeline Demo","text":"Residential sector isolated, can calculate efficiency energy use residences.","code":"primary_industries <- IEATools::tpes_flows primary_industries #> $resources #> [1] \"Resources\" #>  #> $production #> [1] \"Production\" #>  #> $imports #> [1] \"Imports\" #>  #> $exports #> [1] \"Exports\" #>  #> $international_marine_bunkers #> [1] \"International marine bunkers\" #>  #> $international_aviation_bunkers #> [1] \"International aviation bunkers\" #>  #> $exports_to_world_marine_bunkers #> [1] \"Exports to World marine bunkers\" #>  #> $exports_to_world_aviation_bunkers #> [1] \"Exports to World aviation bunkers\" #>  #> $stock_changes #> [1] \"Stock changes\" finaldemand_sectors <- IEATools::fd_sectors finaldemand_sectors #> $bkb_peat_briquette_plants #> [1] \"BKB/peat briquette plants\" #>  #> $blast_furnaces #> [1] \"Blast furnaces\" #>  #> $charcoal_plants #> [1] \"Charcoal production plants\" #>  #> $coal_liquefaction_plants #> [1] \"Coal liquefaction plants\" #>  #> $coal_mines #> [1] \"Coal mines\" #>  #> $coke_ovens #> [1] \"Coke ovens\" #>  #> $gas_works #> [1] \"Gas works\" #>  #> $gas_to_liquids_plants #> [1] \"Gas-to-liquids (GTL) plants\" #>  #> $gasification_plants #> [1] \"Gasification plants for biogases\" #>  #> $liquefaction_regasification_plants #> [1] \"Liquefaction (LNG) / regasification plants\" #>  #> $non_specified_eiou #> [1] \"Non-specified (energy)\" #>  #> $nuclear_industry #> [1] \"Nuclear industry\" #>  #> $oil_and_gas_extraction #> [1] \"Oil and gas extraction\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $oil_refineries #> [1] \"Oil refineries\" #>  #> $own_use_elect_chp_heat_plants #> [1] \"Own use in electricity, CHP and heat plants\" #>  #> $main_activity_producer_electricity_plants #> [1] \"Main activity producer electricity plants\" #>  #> $main_activity_producer_chp_plants #> [1] \"Main activity producer CHP plants\" #>  #> $main_activity_producer_heat_plants #> [1] \"Main activity producer heat plants\" #>  #> $patent_fuel_plants #> [1] \"Patent fuel plants\" #>  #> $pumped_storage_plants #> [1] \"Pumped storage plants\" #>  #> $mining_and_quarrying #> [1] \"Mining and quarrying\" #>  #> $construction #> [1] \"Construction\" #>  #> $manufacturing #> [1] \"Manufacturing\" #>  #> $iron_and_steel #> [1] \"Iron and steel\" #>  #> $chemical_and_petrochemical #> [1] \"Chemical and petrochemical\" #>  #> $non_ferrous_metals #> [1] \"Non-ferrous metals\" #>  #> $non_metallic_minerals #> [1] \"Non-metallic minerals\" #>  #> $transport_equipment #> [1] \"Transport equipment\" #>  #> $machinery #> [1] \"Machinery\" #>  #> $food_and_tobacco #> [1] \"Food and tobacco\" #>  #> $paper_pulp_and_print #> [1] \"Paper, pulp and print\" #>  #> $paper_pulp_and_printing #> [1] \"Paper, pulp and printing\" #>  #> $wood_and_wood_products #> [1] \"Wood and wood products\" #>  #> $textile_and_leather #> [1] \"Textile and leather\" #>  #> $non_specified_industry #> [1] \"Non-specified (industry)\" #>  #> $industry_not_elsewhere_specified #> [1] \"Industry not elsewhere specified\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $domestic_navigation #> [1] \"Domestic navigation\" #>  #> $world_marine_bunkers #> [1] \"World marine bunkers\" #>  #> $international_navigation #> [1] \"International navigation\" #>  #> $domestic_aviation #> [1] \"Domestic aviation\" #>  #> $world_aviation_bunkers #> [1] \"World aviation bunkers\" #>  #> $international_aviation #> [1] \"International aviation\" #>  #> $road #> [1] \"Road\" #>  #> $rail #> [1] \"Rail\" #>  #> $pipeline_transport #> [1] \"Pipeline transport\" #>  #> $non_specified_transport #> [1] \"Non-specified (transport)\" #>  #> $transport_not_elsewhere_specified #> [1] \"Transport not elsewhere specified\" #>  #> $residential #> [1] \"Residential\" #>  #> $commercial_and_public_services #> [1] \"Commercial and public services\" #>  #> $agriculture_forestry #> [1] \"Agriculture/forestry\" #>  #> $fishing #> [1] \"Fishing\" #>  #> $non_specified_other #> [1] \"Non-specified (other)\" #>  #> $final_consumption_not_elsewhere_specified #> [1] \"Final consumption not elsewhere specified\" #>  #> $non_energy_use_industry_transformation_energy #> [1] \"Non-energy use industry/transformation/energy\" #>  #> $non_energy_use_in_transport #> [1] \"Non-energy use in transport\" #>  #> $non_energy_use_in_other #> [1] \"Non-energy use in other\" #>  #> [[61]] #> [1] \"Non-energy use in industry\" #>  #> [[62]] #> [1] \"Non-energy use in construction\" #>  #> [[63]] #> [1] \"Non-energy use in mining and quarrying\" #>  #> [[64]] #> [1] \"Non-energy use in iron and steel\" #>  #> [[65]] #> [1] \"Non-energy use in chemical/petrochemical\" #>  #> [[66]] #> [1] \"Non-energy use in non-ferrous metals\" #>  #> [[67]] #> [1] \"Non-energy use in non-metallic minerals\" #>  #> [[68]] #> [1] \"Non-energy use in transport equipment\" #>  #> [[69]] #> [1] \"Non-energy use in machinery\" #>  #> [[70]] #> [1] \"Non-energy use in food/beverages/tobacco\" #>  #> [[71]] #> [1] \"Non-energy use in paper/pulp and printing\" #>  #> [[72]] #> [1] \"Non-energy use in wood and wood products\" #>  #> [[73]] #> [1] \"Non-energy use in textiles and leather\" #>  #> [[74]] #> [1] \"Non-energy use in industry not elsewhere specified\" with_efficiencies <- residential_ecc_trimmed %>%    Recca::primary_aggregates(p_industries = primary_industries, pattern_type = \"leading\") %>%    Recca::finaldemand_aggregates(fd_sectors = finaldemand_sectors) %>%   dplyr::mutate(     eta_pf_net = as.numeric(EX.fd_net) / as.numeric(EX.p),     eta_pf_gross = as.numeric(EX.fd_gross) / as.numeric(EX.p)   ) dplyr::glimpse(with_efficiencies) #> Rows: 1 #> Columns: 20 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ R            <list> <<matrix[2 x 16]>> #> $ U            <list> <<matrix[8 x 12]>> #> $ U_feed       <list> <<matrix[6 x 12]>> #> $ U_EIOU       <list> <<matrix[8 x 12]>> #> $ r_EIOU       <list> <<matrix[8 x 12]>> #> $ V            <list> <<matrix[12 x 16]>> #> $ Y            <list> <<matrix[12 x 1]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ Sector       <chr> \"Residential\" #> $ EX.p         <dbl> 0 #> $ EX.fd_net    <dbl> 1684 #> $ EX.fd_gross  <dbl> 1686.151 #> $ eta_pf_net   <dbl> Inf #> $ eta_pf_gross <dbl> Inf"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"PFUPipeline Demo","text":"different R package (PFUAggDatabase) calculations (!) countries; years; energy exergy; last stage final useful; IEA, MW, ; etc. calculations parallelized across countries. Despite parallelization, calculations take several hours 10-core laptop, (eventually) generating PFUAggDatabase supercomputer.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUDatabase_Demo.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"PFUPipeline Demo","text":"combination, PSUT framework R packages matsbyname, matsindf, Recca provide powerful analysis tools energy conversion chains.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"PFUPipeline Demo","text":"vignette demonstrates features PFUPipeline package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"load-pfupipeline","dir":"Articles","previous_headings":"","what":"Load PFUPipeline","title":"PFUPipeline Demo","text":"PFUPipeline package runs targets pipeline stores data Dropbox using pins package. retrieve data, one needs access Dropbox folder containing pipeline releases valid pin name. One valid pin name “psut” valid pin release “20220828T174526Z-60a07”. “20220828T174526Z-60a07” contains data countries (155) years (1960–2019).","code":"folder <- PFUSetup::get_abs_paths()[[\"pipeline_releases_folder\"]] folder #> [1] \"/Users/mkh2/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases\" # version <- \"20220828T174526Z-60a07\" # All countries version <- \"20220909T125050Z-e5a95\" # Only GHA psut_mats <- folder %>%    pins::board_folder(versioned = TRUE) %>%    pins::pin_read(\"psut\", version = version)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data structure","title":"PFUPipeline Demo","text":"psut_mats R data frame. Let’s look contents. metadata columns contain following values.","code":"dplyr::glimpse(psut_mats) #> Rows: 588 #> Columns: 14 #> $ Country     <chr> \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"GHA\", \"G… #> $ Method      <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"P… #> $ Energy.type <chr> \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\"… #> $ Last.stage  <chr> \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Fin… #> $ Year        <dbl> 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980… #> $ IEAMW       <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"I… #> $ V           <list> <<matrix[12 x 14]>>, <<matrix[10 x 14]>>, <<matrix[10 x 1… #> $ Y           <list> <<matrix[12 x 22]>>, <<matrix[12 x 23]>>, <<matrix[12 x 2… #> $ S_units     <list> <<matrix[16 x 1]>>, <<matrix[16 x 1]>>, <<matrix[16 x 1]>… #> $ R           <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U_feed      <list> <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, <<matrix[6 x 5]>>, … #> $ U_EIOU      <list> <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, <<matrix[2 x 2]>>, … #> $ U           <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … #> $ r_EIOU      <list> <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, <<matrix[8 x 5]>>, … psut_mats$Country %>% unique() #> [1] \"GHA\" psut_mats$Method %>% unique() #> [1] \"PCM\" psut_mats$Energy.type %>% unique() #> [1] \"E\" \"X\" psut_mats$Last.stage %>% unique() #> [1] \"Final\"  \"Useful\" c(psut_mats$Year %>% min(), psut_mats$Year %>% max()) #> [1] 1971 2019 psut_mats$IEAMW %>% unique() #> [1] \"IEA\"  \"MW\"   \"Both\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"example-ecc-matrices","dir":"Articles","previous_headings":"","what":"Example ECC matrices","title":"PFUPipeline Demo","text":"Let’s look matrices using Ghana 1971 example. Simple matrices can found muscle work data frames. matrices can dumped Excel file easier browsing. Sankey diagram can created. useful energy last stage, see food feed creating muscle work. IEA data give rise complicated matrices. one last stage final energy. push useful energy, matrices become complex. Sankey diagram unsurprisingly busier, matrices keep everything organized.","code":"GHA1971_MW_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"MW\") dplyr::glimpse(GHA1971_MW_final) #> Rows: 1 #> Columns: 14 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> GHA1971_MW_final$R[[1]] #>                        Biomass [from Resources] #> Resources [of Biomass]                 1026.386 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$U[[1]] #>                             Farms Feed production Food production #> Biomass                     0.000        119.1334        907.2526 #> Biomass [from Resources] 1026.386          0.0000          0.0000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" GHA1971_MW_final$V[[1]] #>                  Biomass     Feed     Food #> Farms           1026.386  0.00000   0.0000 #> Feed production    0.000 53.61001   0.0000 #> Food production    0.000  0.00000 471.7713 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" GHA1971_MW_final$Y[[1]] #>      Agriculture/forestry Commercial and public services #> Feed             26.50066                        0.00000 #> Food            367.65411                       49.19114 #>      Industry not elsewhere specified Transport not elsewhere specified #> Feed                          0.00000                          27.10935 #> Food                         54.92608                           0.00000 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" gha_mw_file <- file.path(\"~\", \"GHA1971_MW_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_MW_final, path = gha_mw_file, overwrite_file = TRUE) GHA1971_MW_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_MW_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"MW\") GHA1971_MW_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_final <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Final\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_final.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_final, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_final %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1) GHA1971_IEA_useful <- psut_mats %>%    dplyr::filter(Country == \"GHA\", Year == 1971, Energy.type == \"E\",                  Last.stage == \"Useful\", IEAMW == \"IEA\") gha_iea_file <- file.path(\"~\", \"GHA1971_IEA_useful.xlsx\") Recca::write_ecc_to_excel(GHA1971_IEA_useful, path = gha_iea_file, overwrite_file = TRUE) GHA1971_IEA_useful %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"example-calculations","dir":"Articles","previous_headings":"","what":"Example calculations","title":"PFUPipeline Demo","text":"following subsections illustrate example calculations.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"matrix-math","dir":"Articles","previous_headings":"Example calculations","what":"Matrix math","title":"PFUPipeline Demo","text":"calculate value added matrix (W) within data frame using dplyr::mutate().","code":"with_W <- GHA1971_MW_final %>%    dplyr::mutate(     W = matsbyname::transpose_byname(GHA1971_MW_final$V) %>%       matsbyname::difference_byname(GHA1971_MW_final$U)   ) dplyr::glimpse(with_W) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"MW\" #> $ V           <list> <<matrix[3 x 3]>> #> $ Y           <list> <<matrix[2 x 4]>> #> $ S_units     <list> <<matrix[3 x 1]>> #> $ R           <list> <matrix[1 x 1]> #> $ U_feed      <list> <<matrix[2 x 3]>> #> $ U_EIOU      <list> <<matrix[2 x 3]>> #> $ U           <list> <<matrix[2 x 3]>> #> $ r_EIOU      <list> <<matrix[2 x 3]>> #> $ W           <list> <<matrix[4 x 3]>> with_W$W[[1]] #>                              Farms Feed production Food production #> Biomass                   1026.386      -119.13336       -907.2526 #> Biomass [from Resources] -1026.386         0.00000          0.0000 #> Feed                         0.000        53.61001          0.0000 #> Food                         0.000         0.00000        471.7713 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"upstream-swim","dir":"Articles","previous_headings":"Example calculations","what":"Upstream swim","title":"PFUPipeline Demo","text":"PSUT framework allows upstream downstream “swims.” final demand matrix IEA data. Let’s say wanted know energy (stages) required provide residential energy country. can use input-output ``upstream swim’’ analysis. First, calculate input-output matrices. Next, define Y_prime matrix contains final demand residences. Now let’s swim upstream Y_prime matrix see upstream energy needed supply Residential final demand. _prime matrices want. keep make new Sankey diagram. Make Sankey diagram energy required supply Residential demand . Sankey diagram, can see ways Ghanaian residences demanded upstream primary energy 1971.","code":"# View(GHA1971_IEA_final$Y[[1]]) with_io_mats <- GHA1971_IEA_final %>%    Recca::calc_io_mats() dplyr::glimpse(with_io_mats) #> Rows: 1 #> Columns: 34 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ V           <list> <<matrix[12 x 14]>> #> $ Y           <list> <<matrix[12 x 22]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ R           <list> <<matrix[2 x 2]>> #> $ U_feed      <list> <<matrix[6 x 5]>> #> $ U_EIOU      <list> <<matrix[2 x 2]>> #> $ U           <list> <<matrix[8 x 5]>> #> $ r_EIOU      <list> <<matrix[8 x 5]>> #> $ y           <list> <<matrix[12 x 1]>> #> $ q           <list> <<matrix[16 x 1]>> #> $ f           <list> <<matrix[5 x 1]>> #> $ g           <list> <<matrix[12 x 1]>> #> $ h           <list> <<matrix[2 x 1]>> #> $ r           <list> <<matrix[2 x 1]>> #> $ W           <list> <<matrix[16 x 12]>> #> $ Z           <list> <<matrix[8 x 12]>> #> $ K           <list> <<matrix[8 x 5]>> #> $ C           <list> <<matrix[14 x 12]>> #> $ D           <list> <<matrix[12 x 16]>> #> $ A           <list> <<matrix[8 x 16]>> #> $ O           <list> <<matrix[2 x 2]>> #> $ L_pxp       <list> <<matrix[16 x 16]>> #> $ L_ixp       <list> <<matrix[12 x 16]>> #> $ Z_feed      <list> <<matrix[6 x 12]>> #> $ K_feed      <list> <<matrix[6 x 5]>> #> $ A_feed      <list> <<matrix[6 x 16]>> #> $ L_pxp_feed  <list> <<matrix[16 x 16]>> #> $ L_ixp_feed  <list> <<matrix[12 x 16]>> with_Y_prime <- with_io_mats %>%    dplyr::mutate(     Y_prime = Y %>%        matsbyname::select_cols_byname(\"Residential\")   ) with_Y_prime$Y_prime[[1]] #>                                       Residential #> Aviation gasoline                               0 #> Charcoal                                      119 #> Crude oil                                       0 #> Electricity                                    14 #> Fuel oil                                        0 #> Gas/diesel oil excl. biofuels                   0 #> Kerosene type jet fuel excl. biofuels           0 #> Liquefied petroleum gases (LPG)                 3 #> Lubricants                                      0 #> Motor gasoline excl. biofuels                   0 #> Other kerosene                                 84 #> Primary solid biofuels                       1464 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" residential_ecc <- with_Y_prime %>%    Recca::new_Y() dplyr::glimpse(residential_ecc) #> Rows: 1 #> Columns: 41 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ V            <list> <<matrix[12 x 14]>> #> $ Y            <list> <<matrix[12 x 22]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ R            <list> <<matrix[2 x 2]>> #> $ U_feed       <list> <<matrix[6 x 5]>> #> $ U_EIOU       <list> <<matrix[2 x 2]>> #> $ U            <list> <<matrix[8 x 5]>> #> $ r_EIOU       <list> <<matrix[8 x 5]>> #> $ y            <list> <<matrix[12 x 1]>> #> $ q            <list> <<matrix[16 x 1]>> #> $ f            <list> <<matrix[5 x 1]>> #> $ g            <list> <<matrix[12 x 1]>> #> $ h            <list> <<matrix[2 x 1]>> #> $ r            <list> <<matrix[2 x 1]>> #> $ W            <list> <<matrix[16 x 12]>> #> $ Z            <list> <<matrix[8 x 12]>> #> $ K            <list> <<matrix[8 x 5]>> #> $ C            <list> <<matrix[14 x 12]>> #> $ D            <list> <<matrix[12 x 16]>> #> $ A            <list> <<matrix[8 x 16]>> #> $ O            <list> <<matrix[2 x 2]>> #> $ L_pxp        <list> <<matrix[16 x 16]>> #> $ L_ixp        <list> <<matrix[12 x 16]>> #> $ Z_feed       <list> <<matrix[6 x 12]>> #> $ K_feed       <list> <<matrix[6 x 5]>> #> $ A_feed       <list> <<matrix[6 x 16]>> #> $ L_pxp_feed   <list> <<matrix[16 x 16]>> #> $ L_ixp_feed   <list> <<matrix[12 x 16]>> #> $ Y_prime      <list> <<matrix[12 x 1]>> #> $ R_prime      <list> <<matrix[2 x 16]>> #> $ U_prime      <list> <<matrix[8 x 12]>> #> $ U_feed_prime <list> <<matrix[6 x 12]>> #> $ U_EIOU_prime <list> <<matrix[8 x 12]>> #> $ r_EIOU_prime <list> <<matrix[8 x 12]>> #> $ V_prime      <list> <<matrix[12 x 16]>> residential_ecc_trimmed <- residential_ecc %>%    dplyr::select(Country, Method, Energy.type, Last.stage, Year, IEAMW,                 R_prime, U_prime, U_feed_prime, U_EIOU_prime,                  r_EIOU_prime, V_prime, Y_prime, S_units) %>%    dplyr::rename(     R = R_prime,      U = U_prime,      U_feed = U_feed_prime,     U_EIOU = U_EIOU_prime,     r_EIOU = r_EIOU_prime,     V = V_prime,      Y = Y_prime   ) %>%    dplyr::mutate(Sector = \"Residential\") dplyr::glimpse(residential_ecc_trimmed) #> Rows: 1 #> Columns: 15 #> $ Country     <chr> \"GHA\" #> $ Method      <chr> \"PCM\" #> $ Energy.type <chr> \"E\" #> $ Last.stage  <chr> \"Final\" #> $ Year        <dbl> 1971 #> $ IEAMW       <chr> \"IEA\" #> $ R           <list> <<matrix[2 x 16]>> #> $ U           <list> <<matrix[8 x 12]>> #> $ U_feed      <list> <<matrix[6 x 12]>> #> $ U_EIOU      <list> <<matrix[8 x 12]>> #> $ r_EIOU      <list> <<matrix[8 x 12]>> #> $ V           <list> <<matrix[12 x 16]>> #> $ Y           <list> <<matrix[12 x 1]>> #> $ S_units     <list> <<matrix[16 x 1]>> #> $ Sector      <chr> \"Residential\" residential_ecc_trimmed %>%    Recca::make_sankey() %>%    magrittr::extract2(\"Sankey\") %>%    magrittr::extract2(1)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"efficiencies","dir":"Articles","previous_headings":"Example calculations","what":"Efficiencies","title":"PFUPipeline Demo","text":"Residential sector isolated, can calculate efficiency energy use residences.","code":"primary_industries <- IEATools::tpes_flows primary_industries #> $resources #> [1] \"Resources\" #>  #> $production #> [1] \"Production\" #>  #> $imports #> [1] \"Imports\" #>  #> $exports #> [1] \"Exports\" #>  #> $international_marine_bunkers #> [1] \"International marine bunkers\" #>  #> $international_aviation_bunkers #> [1] \"International aviation bunkers\" #>  #> $exports_to_world_marine_bunkers #> [1] \"Exports to World marine bunkers\" #>  #> $exports_to_world_aviation_bunkers #> [1] \"Exports to World aviation bunkers\" #>  #> $stock_changes #> [1] \"Stock changes\" finaldemand_sectors <- IEATools::fd_sectors finaldemand_sectors #> $bkb_peat_briquette_plants #> [1] \"BKB/peat briquette plants\" #>  #> $blast_furnaces #> [1] \"Blast furnaces\" #>  #> $charcoal_plants #> [1] \"Charcoal production plants\" #>  #> $coal_liquefaction_plants #> [1] \"Coal liquefaction plants\" #>  #> $coal_mines #> [1] \"Coal mines\" #>  #> $coke_ovens #> [1] \"Coke ovens\" #>  #> $gas_works #> [1] \"Gas works\" #>  #> $gas_to_liquids_plants #> [1] \"Gas-to-liquids (GTL) plants\" #>  #> $gasification_plants #> [1] \"Gasification plants for biogases\" #>  #> $liquefaction_regasification_plants #> [1] \"Liquefaction (LNG) / regasification plants\" #>  #> $non_specified_eiou #> [1] \"Non-specified (energy)\" #>  #> $nuclear_industry #> [1] \"Nuclear industry\" #>  #> $oil_and_gas_extraction #> [1] \"Oil and gas extraction\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $oil_refineries #> [1] \"Oil refineries\" #>  #> $own_use_elect_chp_heat_plants #> [1] \"Own use in electricity, CHP and heat plants\" #>  #> $main_activity_producer_electricity_plants #> [1] \"Main activity producer electricity plants\" #>  #> $main_activity_producer_chp_plants #> [1] \"Main activity producer CHP plants\" #>  #> $main_activity_producer_heat_plants #> [1] \"Main activity producer heat plants\" #>  #> $patent_fuel_plants #> [1] \"Patent fuel plants\" #>  #> $pumped_storage_plants #> [1] \"Pumped storage plants\" #>  #> $mining_and_quarrying #> [1] \"Mining and quarrying\" #>  #> $construction #> [1] \"Construction\" #>  #> $manufacturing #> [1] \"Manufacturing\" #>  #> $iron_and_steel #> [1] \"Iron and steel\" #>  #> $chemical_and_petrochemical #> [1] \"Chemical and petrochemical\" #>  #> $non_ferrous_metals #> [1] \"Non-ferrous metals\" #>  #> $non_metallic_minerals #> [1] \"Non-metallic minerals\" #>  #> $transport_equipment #> [1] \"Transport equipment\" #>  #> $machinery #> [1] \"Machinery\" #>  #> $food_and_tobacco #> [1] \"Food and tobacco\" #>  #> $paper_pulp_and_print #> [1] \"Paper, pulp and print\" #>  #> $paper_pulp_and_printing #> [1] \"Paper, pulp and printing\" #>  #> $wood_and_wood_products #> [1] \"Wood and wood products\" #>  #> $textile_and_leather #> [1] \"Textile and leather\" #>  #> $non_specified_industry #> [1] \"Non-specified (industry)\" #>  #> $industry_not_elsewhere_specified #> [1] \"Industry not elsewhere specified\" #>  #> $oil_extraction #> [1] \"Oil extraction\" #>  #> $natural_gas_extraction #> [1] \"Natural gas extraction\" #>  #> $domestic_navigation #> [1] \"Domestic navigation\" #>  #> $world_marine_bunkers #> [1] \"World marine bunkers\" #>  #> $international_navigation #> [1] \"International navigation\" #>  #> $domestic_aviation #> [1] \"Domestic aviation\" #>  #> $world_aviation_bunkers #> [1] \"World aviation bunkers\" #>  #> $international_aviation #> [1] \"International aviation\" #>  #> $road #> [1] \"Road\" #>  #> $rail #> [1] \"Rail\" #>  #> $pipeline_transport #> [1] \"Pipeline transport\" #>  #> $non_specified_transport #> [1] \"Non-specified (transport)\" #>  #> $transport_not_elsewhere_specified #> [1] \"Transport not elsewhere specified\" #>  #> $residential #> [1] \"Residential\" #>  #> $commercial_and_public_services #> [1] \"Commercial and public services\" #>  #> $agriculture_forestry #> [1] \"Agriculture/forestry\" #>  #> $fishing #> [1] \"Fishing\" #>  #> $non_specified_other #> [1] \"Non-specified (other)\" #>  #> $final_consumption_not_elsewhere_specified #> [1] \"Final consumption not elsewhere specified\" #>  #> $non_energy_use_industry_transformation_energy #> [1] \"Non-energy use industry/transformation/energy\" #>  #> $non_energy_use_in_transport #> [1] \"Non-energy use in transport\" #>  #> $non_energy_use_in_other #> [1] \"Non-energy use in other\" #>  #> [[61]] #> [1] \"Non-energy use in industry\" #>  #> [[62]] #> [1] \"Non-energy use in construction\" #>  #> [[63]] #> [1] \"Non-energy use in mining and quarrying\" #>  #> [[64]] #> [1] \"Non-energy use in iron and steel\" #>  #> [[65]] #> [1] \"Non-energy use in chemical/petrochemical\" #>  #> [[66]] #> [1] \"Non-energy use in non-ferrous metals\" #>  #> [[67]] #> [1] \"Non-energy use in non-metallic minerals\" #>  #> [[68]] #> [1] \"Non-energy use in transport equipment\" #>  #> [[69]] #> [1] \"Non-energy use in machinery\" #>  #> [[70]] #> [1] \"Non-energy use in food/beverages/tobacco\" #>  #> [[71]] #> [1] \"Non-energy use in paper/pulp and printing\" #>  #> [[72]] #> [1] \"Non-energy use in wood and wood products\" #>  #> [[73]] #> [1] \"Non-energy use in textiles and leather\" #>  #> [[74]] #> [1] \"Non-energy use in industry not elsewhere specified\" with_efficiencies <- residential_ecc_trimmed %>%    Recca::primary_aggregates(p_industries = primary_industries, pattern_type = \"leading\") %>%    Recca::finaldemand_aggregates(fd_sectors = finaldemand_sectors) %>%   dplyr::mutate(     eta_pf_net = as.numeric(EX.fd_net) / as.numeric(EX.p),     eta_pf_gross = as.numeric(EX.fd_gross) / as.numeric(EX.p)   ) dplyr::glimpse(with_efficiencies) #> Rows: 1 #> Columns: 20 #> $ Country      <chr> \"GHA\" #> $ Method       <chr> \"PCM\" #> $ Energy.type  <chr> \"E\" #> $ Last.stage   <chr> \"Final\" #> $ Year         <dbl> 1971 #> $ IEAMW        <chr> \"IEA\" #> $ R            <list> <<matrix[2 x 16]>> #> $ U            <list> <<matrix[8 x 12]>> #> $ U_feed       <list> <<matrix[6 x 12]>> #> $ U_EIOU       <list> <<matrix[8 x 12]>> #> $ r_EIOU       <list> <<matrix[8 x 12]>> #> $ V            <list> <<matrix[12 x 16]>> #> $ Y            <list> <<matrix[12 x 1]>> #> $ S_units      <list> <<matrix[16 x 1]>> #> $ Sector       <chr> \"Residential\" #> $ EX.p         <dbl> 0 #> $ EX.fd_net    <dbl> 1684 #> $ EX.fd_gross  <dbl> 1686.151 #> $ eta_pf_net   <dbl> Inf #> $ eta_pf_gross <dbl> Inf"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"pipelines","dir":"Articles","previous_headings":"","what":"Pipelines","title":"PFUPipeline Demo","text":"different R package (PFUAggDatabase) calculations (!) countries; years; energy exergy; last stage final useful; IEA, MW, ; etc. calculations parallelized across countries. Despite parallelization, calculations take several hours 10-core laptop, (eventually) generating PFUAggDatabase supercomputer.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/PFUPipeline_Demo.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"PFUPipeline Demo","text":"combination, PSUT framework R packages matsbyname, matsindf, Recca provide powerful analysis tools energy conversion chains.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Building Aggregation Maps From Row and Column Labels","text":"Aggregation maps helpful aggregating products industries rows columns PSUT matrices (R, U, V, Y). vignette demonstrates ways use row column names PSUT matrices create aggregation map. provide example, vignette uses data one CL-PFU Database products, namely product named “psut” v0.9 database, matsindf data frame containing PSUT matrices USA, 1960–2019.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"load-psut-data","dir":"Articles","previous_headings":"","what":"Load PSUT data","title":"Building Aggregation Maps From Row and Column Labels","text":"work CL-PFU database shown vignette, sure access several packages. load data, use code like :","code":"library(dplyr) library(magrittr) library(matsbyname) library(pins) library(Recca) library(readxl) pinboard <- pins::board_folder(\"~/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases\") df <- pinboard |>   # Load USA data from v0.9 of the database   pins::pin_read(name = \"psut_usa\", version = \"20230220T223535Z-35e3e\") dplyr::glimpse(df) #> Rows: 720 #> Columns: 14 #> $ Country     <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"U… #> $ Method      <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"P… #> $ Energy.type <chr> \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\"… #> $ Last.stage  <chr> \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Fin… #> $ Year        <dbl> 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969… #> $ IEAMW       <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"I… #> $ Y           <list> <<matrix[24 x 43]>>, <<matrix[24 x 47]>>, <<matrix[24 x 4… #> $ S_units     <list> <<matrix[36 x 1]>>, <<matrix[36 x 1]>>, <<matrix[36 x 1]>… #> $ R           <list> <<matrix[33 x 26]>>, <<matrix[27 x 24]>>, <<matrix[28 x 2… #> $ U           <list> <<matrix[26 x 15]>>, <<matrix[26 x 15]>>, <<matrix[26 x 1… #> $ U_feed      <list> <<matrix[21 x 15]>>, <<matrix[21 x 15]>>, <<matrix[21 x 1… #> $ U_EIOU      <list> <<matrix[8 x 6]>>, <<matrix[8 x 6]>>, <<matrix[8 x 6]>>, … #> $ r_EIOU      <list> <<matrix[26 x 15]>>, <<matrix[26 x 15]>>, <<matrix[26 x 1… #> $ V           <list> <<matrix[15 x 28]>>, <<matrix[15 x 28]>>, <<matrix[15 x 2…"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"extract-row-and-column-names","dir":"Articles","previous_headings":"","what":"Extract row and column names","title":"Building Aggregation Maps From Row and Column Labels","text":"Recca::get_all_products_and_industries() find product industry names row matsindf data frame. results placed two new columns data frame named (default) “Product.names” “Industry.names”. Product industry names can quite different row row data frame, many new energy carriers (products) Last.stage “Useful” compared “Final”. Similarly, industry names may quite different Last.stage “Final” “Useful”.","code":"df_with_prods_inds <- df |>    Recca::get_all_products_and_industries() dplyr::glimpse(df_with_prods_inds) #> Rows: 720 #> Columns: 16 #> $ Country        <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\",… #> $ Method         <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\",… #> $ Energy.type    <chr> \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", \"E\", … #> $ Last.stage     <chr> \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"Final\", \"… #> $ Year           <dbl> 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1… #> $ IEAMW          <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"IEA\",… #> $ Y              <list> <<matrix[24 x 43]>>, <<matrix[24 x 47]>>, <<matrix[24 … #> $ S_units        <list> <<matrix[36 x 1]>>, <<matrix[36 x 1]>>, <<matrix[36 x … #> $ R              <list> <<matrix[33 x 26]>>, <<matrix[27 x 24]>>, <<matrix[28 … #> $ U              <list> <<matrix[26 x 15]>>, <<matrix[26 x 15]>>, <<matrix[26 … #> $ U_feed         <list> <<matrix[21 x 15]>>, <<matrix[21 x 15]>>, <<matrix[21 … #> $ U_EIOU         <list> <<matrix[8 x 6]>>, <<matrix[8 x 6]>>, <<matrix[8 x 6]>… #> $ r_EIOU         <list> <<matrix[26 x 15]>>, <<matrix[26 x 15]>>, <<matrix[26 … #> $ V              <list> <<matrix[15 x 28]>>, <<matrix[15 x 28]>>, <<matrix[15 … #> $ Product.names  <list> <\"Bitumen\", \"Brown coal (if no detail) [from Resources… #> $ Industry.names <list> <\"Imports [of Bitumen]\", \"Imports [of Coke oven coke]\"… # Check a row with \"Final\" energy as the Last.stage. df_with_prods_inds |>    dplyr::filter(Energy.type == \"E\",                  Last.stage == \"Final\",                  Year == 1960,                  IEAMW == \"IEA\") |>    magrittr::extract2(\"Product.names\") #> [[1]] #>  [1] \"Bitumen\"                                                   #>  [2] \"Brown coal (if no detail) [from Resources]\"                #>  [3] \"Coke oven coke\"                                            #>  [4] \"Crude/NGL/feedstocks (if no detail)\"                       #>  [5] \"Crude/NGL/feedstocks (if no detail) [from Resources]\"      #>  [6] \"Electricity\"                                               #>  [7] \"Fuel oil\"                                                  #>  [8] \"Gas/diesel oil excl. biofuels\"                             #>  [9] \"Geothermal [from Resources]\"                               #> [10] \"Hard coal (if no detail)\"                                  #> [11] \"Hard coal (if no detail) [from Resources]\"                 #> [12] \"Hydro [from Resources]\"                                    #> [13] \"Kerosene type jet fuel excl. biofuels\"                     #> [14] \"Liquefied petroleum gases (LPG)\"                           #> [15] \"Lubricants\"                                                #> [16] \"Motor gasoline excl. biofuels\"                             #> [17] \"Natural gas\"                                               #> [18] \"Natural gas [from Resources]\"                              #> [19] \"Non-specified primary biofuels and waste\"                  #> [20] \"Non-specified primary biofuels and waste [from Resources]\" #> [21] \"Nuclear [from Resources]\"                                  #> [22] \"Other kerosene\"                                            #> [23] \"Other oil products\"                                        #> [24] \"Paraffin waxes\"                                            #> [25] \"Patent fuel\"                                               #> [26] \"Petroleum coke\"                                            #> [27] \"Blast furnace gas\"                                         #> [28] \"Brown coal (if no detail)\"                                 #> [29] \"Coke oven gas\"                                             #> [30] \"Gas coke\"                                                  #> [31] \"Gas works gas\"                                             #> [32] \"Geothermal\"                                                #> [33] \"Hydro\"                                                     #> [34] \"Nuclear\"                                                   #> [35] \"Refinery gas\"                                              #> [36] \"Aviation gasoline\"  # Check a row with \"Useful\" energy as the Last.stage. df_with_prods_inds |>    dplyr::filter(Energy.type == \"E\",                  Last.stage == \"Useful\",                  Year == 1960,                  IEAMW == \"IEA\") |>    magrittr::extract2(\"Product.names\") #> [[1]] #>  [1] \"Bitumen\"                                                   #>  [2] \"Brown coal (if no detail) [from Resources]\"                #>  [3] \"Coke oven coke\"                                            #>  [4] \"Crude/NGL/feedstocks (if no detail)\"                       #>  [5] \"Crude/NGL/feedstocks (if no detail) [from Resources]\"      #>  [6] \"Electricity\"                                               #>  [7] \"Fuel oil\"                                                  #>  [8] \"Gas/diesel oil excl. biofuels\"                             #>  [9] \"Geothermal [from Resources]\"                               #> [10] \"Hard coal (if no detail)\"                                  #> [11] \"Hard coal (if no detail) [from Resources]\"                 #> [12] \"Hydro [from Resources]\"                                    #> [13] \"Kerosene type jet fuel excl. biofuels\"                     #> [14] \"Liquefied petroleum gases (LPG)\"                           #> [15] \"Lubricants\"                                                #> [16] \"Motor gasoline excl. biofuels\"                             #> [17] \"Natural gas\"                                               #> [18] \"Natural gas [from Resources]\"                              #> [19] \"Non-specified primary biofuels and waste\"                  #> [20] \"Non-specified primary biofuels and waste [from Resources]\" #> [21] \"Nuclear [from Resources]\"                                  #> [22] \"Other kerosene\"                                            #> [23] \"Other oil products\"                                        #> [24] \"Paraffin waxes\"                                            #> [25] \"Patent fuel\"                                               #> [26] \"Petroleum coke\"                                            #> [27] \"Aviation gasoline\"                                         #> [28] \"Blast furnace gas\"                                         #> [29] \"Brown coal (if no detail)\"                                 #> [30] \"Coke oven gas\"                                             #> [31] \"Gas coke\"                                                  #> [32] \"Gas works gas\"                                             #> [33] \"Geothermal\"                                                #> [34] \"HPA [from Air compressors]\"                                #> [35] \"HPL [from Electric pumps]\"                                 #> [36] \"HPL [from Gas pump jacks]\"                                 #> [37] \"HTH.1600.C [from Blast oxygen furnaces]\"                   #> [38] \"HTH.600.C [from Industrial electric process heaters]\"      #> [39] \"HTH.850.C [from Steam cracking furnaces]\"                  #> [40] \"HTH.960.C [from Electro-chemical processors]\"              #> [41] \"Hydro\"                                                     #> [42] \"IP [from Computers]\"                                       #> [43] \"KE [from Industrial fans]\"                                 #> [44] \"L [from Industrial electric lamps]\"                        #> [45] \"LTC.-10.C [from Industrial refrigerators]\"                 #> [46] \"LTC.20.C [from HVAC]\"                                      #> [47] \"LTH.20.C [from Gas space heaters]\"                         #> [48] \"MacW [from Machine tools]\"                                 #> [49] \"MacW [from Material handlers]\"                             #> [50] \"MTH.100.C [from Gas water heaters]\"                        #> [51] \"Nuclear\"                                                   #> [52] \"Refinery gas\"                                              #> [53] \"RoP [from Electric cars]\"                                  #> [54] \"AirP [from Domestic aircraft]\"                             #> [55] \"HTH.1300.C [from Small scale biomass boilers]\"             #> [56] \"HTH.1600.C [from Electric arc furnaces]\"                   #> [57] \"L [from Commercial indoor electric lamps]\"                 #> [58] \"L [from Commercial outdoor electric lamps]\"                #> [59] \"L [from Domestic electric lamps]\"                          #> [60] \"LTC.-10.C [from Refrigerators]\"                            #> [61] \"LTC.20.C [from Room air conditioners]\"                     #> [62] \"LTH.20.C [from Coal stoves]\"                               #> [63] \"LTH.20.C [from Electric space heaters]\"                    #> [64] \"LTH.20.C [from LPG stoves]\"                                #> [65] \"LTH.20.C [from Oil space heaters]\"                         #> [66] \"LTH.50.C [from Coal stoves]\"                               #> [67] \"LTH.50.C [from LPG stoves]\"                                #> [68] \"MacW [from Tractors]\"                                      #> [69] \"MaP [from Domestic boats]\"                                 #> [70] \"MD [from Domestic appliances]\"                             #> [71] \"MD [from Static diesel engines]\"                           #> [72] \"MD [from Static gasoline engines]\"                         #> [73] \"MTH.100.C [from Coal stoves]\"                              #> [74] \"MTH.100.C [from Electric water heaters]\"                   #> [75] \"MTH.100.C [from Kerosene stoves]\"                          #> [76] \"MTH.100.C [from LPG stoves]\"                               #> [77] \"MTH.100.C [from Oil water heaters]\"                        #> [78] \"MTH.100.C [from Wood stoves]\"                              #> [79] \"MTH.200.C [from Coal stoves]\"                              #> [80] \"MTH.200.C [from Commercial electric ovens]\"                #> [81] \"MTH.200.C [from Commercial gas ovens]\"                     #> [82] \"MTH.200.C [from Domestic electric ovens]\"                  #> [83] \"MTH.200.C [from Domestic gas ovens]\"                       #> [84] \"NEU [from Non-energy consumption]\"                         #> [85] \"RaP [from Diesel trains]\"                                  #> [86] \"RaP [from Electric trains]\"                                #> [87] \"RaP [from Steam trains]\"                                   #> [88] \"RoP [from Diesel HDVs]\"                                    #> [89] \"RoP [from Gasoline LDVs]\"                                  #> [90] \"RoP [from Gasoline motorcycles]\"                           #> [91] \"RoP [from Natural gas vehicles]\" # Check a row with \"Final\" energy as the Last.stage. df_with_prods_inds |>    dplyr::filter(Energy.type == \"E\",                  Last.stage == \"Final\",                  Year == 1960,                  IEAMW == \"IEA\") |>    magrittr::extract2(\"Industry.names\") |>    unlist() #>  [1] \"Imports [of Bitumen]\"                                               #>  [2] \"Imports [of Coke oven coke]\"                                        #>  [3] \"Imports [of Crude/NGL/feedstocks]\"                                  #>  [4] \"Imports [of Electricity]\"                                           #>  [5] \"Imports [of Fuel oil]\"                                              #>  [6] \"Imports [of Gas/diesel oil excl]\"                                   #>  [7] \"Imports [of Hard coal]\"                                             #>  [8] \"Imports [of Kerosene type jet fuel excl]\"                           #>  [9] \"Imports [of Liquefied petroleum gases]\"                             #> [10] \"Imports [of Lubricants]\"                                            #> [11] \"Imports [of Motor gasoline excl]\"                                   #> [12] \"Imports [of Natural gas]\"                                           #> [13] \"Imports [of Other kerosene]\"                                        #> [14] \"Imports [of Other oil products]\"                                    #> [15] \"Imports [of Paraffin waxes]\"                                        #> [16] \"Imports [of Patent fuel]\"                                           #> [17] \"Resources [of Brown coal (if no detail)]\"                           #> [18] \"Resources [of Crude/NGL/feedstocks (if no detail)]\"                 #> [19] \"Resources [of Geothermal]\"                                          #> [20] \"Resources [of Hard coal (if no detail)]\"                            #> [21] \"Resources [of Hydro]\"                                               #> [22] \"Resources [of Natural gas]\"                                         #> [23] \"Resources [of Non-specified primary biofuels and waste]\"            #> [24] \"Resources [of Nuclear]\"                                             #> [25] \"Statistical differences\"                                            #> [26] \"Stock changes [of Bitumen]\"                                         #> [27] \"Stock changes [of Crude/NGL/feedstocks]\"                            #> [28] \"Stock changes [of Fuel oil]\"                                        #> [29] \"Stock changes [of Gas/diesel oil excl]\"                             #> [30] \"Stock changes [of Hard coal]\"                                       #> [31] \"Stock changes [of Kerosene type jet fuel excl]\"                     #> [32] \"Stock changes [of Other oil products]\"                              #> [33] \"Stock changes [of Petroleum coke]\"                                  #> [34] \"Blast furnaces\"                                                     #> [35] \"Coal mines\"                                                         #> [36] \"Coke ovens\"                                                         #> [37] \"Gas works\"                                                          #> [38] \"Main activity producer electricity plants\"                          #> [39] \"Manufacture [of Geothermal]\"                                        #> [40] \"Manufacture [of Hydro]\"                                             #> [41] \"Manufacture [of Non-specified primary biofuels and waste]\"          #> [42] \"Manufacture [of Nuclear]\"                                           #> [43] \"Natural gas extraction\"                                             #> [44] \"Nuclear industry\"                                                   #> [45] \"Oil extraction\"                                                     #> [46] \"Oil refineries\"                                                     #> [47] \"Patent fuel plants\"                                                 #> [48] \"Transfers\"                                                          #> [49] \"Agriculture/forestry\"                                               #> [50] \"Chemical and petrochemical\"                                         #> [51] \"Commercial and public services\"                                     #> [52] \"Domestic aviation\"                                                  #> [53] \"Domestic navigation\"                                                #> [54] \"Exports [of Bitumen]\"                                               #> [55] \"Exports [of Coke oven coke]\"                                        #> [56] \"Exports [of Crude/NGL/feedstocks]\"                                  #> [57] \"Exports [of Electricity]\"                                           #> [58] \"Exports [of Fuel oil]\"                                              #> [59] \"Exports [of Gas/diesel oil excl]\"                                   #> [60] \"Exports [of Hard coal]\"                                             #> [61] \"Exports [of Kerosene type jet fuel excl]\"                           #> [62] \"Exports [of Liquefied petroleum gases]\"                             #> [63] \"Exports [of Lubricants]\"                                            #> [64] \"Exports [of Motor gasoline excl]\"                                   #> [65] \"Exports [of Natural gas]\"                                           #> [66] \"Exports [of Other kerosene]\"                                        #> [67] \"Exports [of Other oil products]\"                                    #> [68] \"Exports [of Paraffin waxes]\"                                        #> [69] \"Exports [of Patent fuel]\"                                           #> [70] \"Exports [of Petroleum coke]\"                                        #> [71] \"Exports to World aviation bunkers [of Kerosene type jet fuel excl]\" #> [72] \"Exports to World marine bunkers [of Fuel oil]\"                      #> [73] \"Exports to World marine bunkers [of Gas/diesel oil excl]\"           #> [74] \"Exports to World marine bunkers [of Hard coal]\"                     #> [75] \"Final consumption not elsewhere specified\"                          #> [76] \"Industry not elsewhere specified\"                                   #> [77] \"Iron and steel\"                                                     #> [78] \"Losses\"                                                             #> [79] \"Non-energy use in transport\"                                        #> [80] \"Non-energy use industry/transformation/energy\"                      #> [81] \"Rail\"                                                               #> [82] \"Residential\"                                                        #> [83] \"Road\"                                                               #> [84] \"Stock changes [of Coke oven coke]\"                                  #> [85] \"Stock changes [of Liquefied petroleum gases]\"                       #> [86] \"Stock changes [of Lubricants]\"                                      #> [87] \"Stock changes [of Motor gasoline excl]\"                             #> [88] \"Stock changes [of Natural gas]\"                                     #> [89] \"Stock changes [of Other kerosene]\"                                  #> [90] \"Stock changes [of Paraffin waxes]\"  # Check a row with \"Useful\" energy as the Last.stage. df_with_prods_inds |>    dplyr::filter(Energy.type == \"E\",                  Last.stage == \"Useful\",                  Year == 1960,                  IEAMW == \"IEA\") |>    magrittr::extract2(\"Industry.names\") |>    unlist() #>   [1] \"Imports [of Bitumen]\"                                               #>   [2] \"Imports [of Coke oven coke]\"                                        #>   [3] \"Imports [of Crude/NGL/feedstocks]\"                                  #>   [4] \"Imports [of Electricity]\"                                           #>   [5] \"Imports [of Fuel oil]\"                                              #>   [6] \"Imports [of Gas/diesel oil excl]\"                                   #>   [7] \"Imports [of Hard coal]\"                                             #>   [8] \"Imports [of Kerosene type jet fuel excl]\"                           #>   [9] \"Imports [of Liquefied petroleum gases]\"                             #>  [10] \"Imports [of Lubricants]\"                                            #>  [11] \"Imports [of Motor gasoline excl]\"                                   #>  [12] \"Imports [of Natural gas]\"                                           #>  [13] \"Imports [of Other kerosene]\"                                        #>  [14] \"Imports [of Other oil products]\"                                    #>  [15] \"Imports [of Paraffin waxes]\"                                        #>  [16] \"Imports [of Patent fuel]\"                                           #>  [17] \"Resources [of Brown coal (if no detail)]\"                           #>  [18] \"Resources [of Crude/NGL/feedstocks (if no detail)]\"                 #>  [19] \"Resources [of Geothermal]\"                                          #>  [20] \"Resources [of Hard coal (if no detail)]\"                            #>  [21] \"Resources [of Hydro]\"                                               #>  [22] \"Resources [of Natural gas]\"                                         #>  [23] \"Resources [of Non-specified primary biofuels and waste]\"            #>  [24] \"Resources [of Nuclear]\"                                             #>  [25] \"Statistical differences\"                                            #>  [26] \"Stock changes [of Bitumen]\"                                         #>  [27] \"Stock changes [of Crude/NGL/feedstocks]\"                            #>  [28] \"Stock changes [of Fuel oil]\"                                        #>  [29] \"Stock changes [of Gas/diesel oil excl]\"                             #>  [30] \"Stock changes [of Hard coal]\"                                       #>  [31] \"Stock changes [of Kerosene type jet fuel excl]\"                     #>  [32] \"Stock changes [of Other oil products]\"                              #>  [33] \"Stock changes [of Petroleum coke]\"                                  #>  [34] \"Air compressors -> HPA\"                                             #>  [35] \"Blast furnaces\"                                                     #>  [36] \"Blast oxygen furnaces -> HTH.1600.C\"                                #>  [37] \"Coal mines\"                                                         #>  [38] \"Coal stoves -> LTH.20.C\"                                            #>  [39] \"Coal stoves -> LTH.50.C\"                                            #>  [40] \"Coal stoves -> MTH.100.C\"                                           #>  [41] \"Coal stoves -> MTH.200.C\"                                           #>  [42] \"Coke ovens\"                                                         #>  [43] \"Commercial electric ovens -> MTH.200.C\"                             #>  [44] \"Commercial gas ovens -> MTH.200.C\"                                  #>  [45] \"Commercial indoor electric lamps -> L\"                              #>  [46] \"Commercial outdoor electric lamps -> L\"                             #>  [47] \"Computers -> IP\"                                                    #>  [48] \"Diesel HDVs -> RoP\"                                                 #>  [49] \"Diesel trains -> RaP\"                                               #>  [50] \"Domestic aircraft -> AirP\"                                          #>  [51] \"Domestic appliances -> MD\"                                          #>  [52] \"Domestic boats -> MaP\"                                              #>  [53] \"Domestic electric lamps -> L\"                                       #>  [54] \"Domestic electric ovens -> MTH.200.C\"                               #>  [55] \"Domestic gas ovens -> MTH.200.C\"                                    #>  [56] \"Electric arc furnaces -> HTH.1600.C\"                                #>  [57] \"Electric cars -> RoP\"                                               #>  [58] \"Electric pumps -> HPL\"                                              #>  [59] \"Electric space heaters -> LTH.20.C\"                                 #>  [60] \"Electric trains -> RaP\"                                             #>  [61] \"Electric water heaters -> MTH.100.C\"                                #>  [62] \"Electro-chemical processors -> HTH.960.C\"                           #>  [63] \"Gas pump jacks -> HPL\"                                              #>  [64] \"Gas space heaters -> LTH.20.C\"                                      #>  [65] \"Gas water heaters -> MTH.100.C\"                                     #>  [66] \"Gas works\"                                                          #>  [67] \"Gasoline LDVs -> RoP\"                                               #>  [68] \"Gasoline motorcycles -> RoP\"                                        #>  [69] \"HVAC -> LTC.20.C\"                                                   #>  [70] \"Industrial electric lamps -> L\"                                     #>  [71] \"Industrial electric process heaters -> HTH.600.C\"                   #>  [72] \"Industrial fans -> KE\"                                              #>  [73] \"Industrial refrigerators -> LTC.-10.C\"                              #>  [74] \"Kerosene stoves -> MTH.100.C\"                                       #>  [75] \"LPG stoves -> LTH.20.C\"                                             #>  [76] \"LPG stoves -> LTH.50.C\"                                             #>  [77] \"LPG stoves -> MTH.100.C\"                                            #>  [78] \"Machine tools -> MacW\"                                              #>  [79] \"Main activity producer electricity plants\"                          #>  [80] \"Manufacture [of Geothermal]\"                                        #>  [81] \"Manufacture [of Hydro]\"                                             #>  [82] \"Manufacture [of Non-specified primary biofuels and waste]\"          #>  [83] \"Manufacture [of Nuclear]\"                                           #>  [84] \"Material handlers -> MacW\"                                          #>  [85] \"Natural gas extraction\"                                             #>  [86] \"Natural gas vehicles -> RoP\"                                        #>  [87] \"Non-energy consumption -> NEU\"                                      #>  [88] \"Nuclear industry\"                                                   #>  [89] \"Oil extraction\"                                                     #>  [90] \"Oil refineries\"                                                     #>  [91] \"Oil space heaters -> LTH.20.C\"                                      #>  [92] \"Oil water heaters -> MTH.100.C\"                                     #>  [93] \"Patent fuel plants\"                                                 #>  [94] \"Refrigerators -> LTC.-10.C\"                                         #>  [95] \"Room air conditioners -> LTC.20.C\"                                  #>  [96] \"Small scale biomass boilers -> HTH.1300.C\"                          #>  [97] \"Static diesel engines -> MD\"                                        #>  [98] \"Static gasoline engines -> MD\"                                      #>  [99] \"Steam cracking furnaces -> HTH.850.C\"                               #> [100] \"Steam trains -> RaP\"                                                #> [101] \"Tractors -> MacW\"                                                   #> [102] \"Transfers\"                                                          #> [103] \"Wood stoves -> MTH.100.C\"                                           #> [104] \"Agriculture/forestry\"                                               #> [105] \"Chemical and petrochemical\"                                         #> [106] \"Commercial and public services\"                                     #> [107] \"Domestic aviation\"                                                  #> [108] \"Domestic navigation\"                                                #> [109] \"Exports [of Bitumen]\"                                               #> [110] \"Exports [of Coke oven coke]\"                                        #> [111] \"Exports [of Crude/NGL/feedstocks]\"                                  #> [112] \"Exports [of Electricity]\"                                           #> [113] \"Exports [of Fuel oil]\"                                              #> [114] \"Exports [of Gas/diesel oil excl]\"                                   #> [115] \"Exports [of Hard coal]\"                                             #> [116] \"Exports [of Kerosene type jet fuel excl]\"                           #> [117] \"Exports [of Liquefied petroleum gases]\"                             #> [118] \"Exports [of Lubricants]\"                                            #> [119] \"Exports [of Motor gasoline excl]\"                                   #> [120] \"Exports [of Natural gas]\"                                           #> [121] \"Exports [of Other kerosene]\"                                        #> [122] \"Exports [of Other oil products]\"                                    #> [123] \"Exports [of Paraffin waxes]\"                                        #> [124] \"Exports [of Patent fuel]\"                                           #> [125] \"Exports [of Petroleum coke]\"                                        #> [126] \"Exports to World aviation bunkers [of Kerosene type jet fuel excl]\" #> [127] \"Exports to World marine bunkers [of Fuel oil]\"                      #> [128] \"Exports to World marine bunkers [of Gas/diesel oil excl]\"           #> [129] \"Exports to World marine bunkers [of Hard coal]\"                     #> [130] \"Final consumption not elsewhere specified\"                          #> [131] \"Industry not elsewhere specified\"                                   #> [132] \"Iron and steel\"                                                     #> [133] \"Losses\"                                                             #> [134] \"Non-energy use in transport\"                                        #> [135] \"Non-energy use industry/transformation/energy\"                      #> [136] \"Rail\"                                                               #> [137] \"Residential\"                                                        #> [138] \"Road\"                                                               #> [139] \"Stock changes [of Coke oven coke]\"                                  #> [140] \"Stock changes [of Liquefied petroleum gases]\"                       #> [141] \"Stock changes [of Lubricants]\"                                      #> [142] \"Stock changes [of Motor gasoline excl]\"                             #> [143] \"Stock changes [of Natural gas]\"                                     #> [144] \"Stock changes [of Other kerosene]\"                                  #> [145] \"Stock changes [of Paraffin waxes]\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"get-lists-of-unique-product-and-industry-names","dir":"Articles","previous_headings":"","what":"Get lists of unique product and industry names","title":"Building Aggregation Maps From Row and Column Labels","text":"obtain lists unique product industry names, one can use unique().","code":"# Unique products in the data frame df_with_prods_inds$Product.names |>    unlist() |>    unique() #>   [1] \"Bitumen\"                                                   #>   [2] \"Brown coal (if no detail) [from Resources]\"                #>   [3] \"Coke oven coke\"                                            #>   [4] \"Crude/NGL/feedstocks (if no detail)\"                       #>   [5] \"Crude/NGL/feedstocks (if no detail) [from Resources]\"      #>   [6] \"Electricity\"                                               #>   [7] \"Fuel oil\"                                                  #>   [8] \"Gas/diesel oil excl. biofuels\"                             #>   [9] \"Geothermal [from Resources]\"                               #>  [10] \"Hard coal (if no detail)\"                                  #>  [11] \"Hard coal (if no detail) [from Resources]\"                 #>  [12] \"Hydro [from Resources]\"                                    #>  [13] \"Kerosene type jet fuel excl. biofuels\"                     #>  [14] \"Liquefied petroleum gases (LPG)\"                           #>  [15] \"Lubricants\"                                                #>  [16] \"Motor gasoline excl. biofuels\"                             #>  [17] \"Natural gas\"                                               #>  [18] \"Natural gas [from Resources]\"                              #>  [19] \"Non-specified primary biofuels and waste\"                  #>  [20] \"Non-specified primary biofuels and waste [from Resources]\" #>  [21] \"Nuclear [from Resources]\"                                  #>  [22] \"Other kerosene\"                                            #>  [23] \"Other oil products\"                                        #>  [24] \"Paraffin waxes\"                                            #>  [25] \"Patent fuel\"                                               #>  [26] \"Petroleum coke\"                                            #>  [27] \"Blast furnace gas\"                                         #>  [28] \"Brown coal (if no detail)\"                                 #>  [29] \"Coke oven gas\"                                             #>  [30] \"Gas coke\"                                                  #>  [31] \"Gas works gas\"                                             #>  [32] \"Geothermal\"                                                #>  [33] \"Hydro\"                                                     #>  [34] \"Nuclear\"                                                   #>  [35] \"Refinery gas\"                                              #>  [36] \"Aviation gasoline\"                                         #>  [37] \"Naphtha\"                                                   #>  [38] \"Crude oil\"                                                 #>  [39] \"Crude oil [from Resources]\"                                #>  [40] \"Natural gas liquids [from Resources]\"                      #>  [41] \"Natural gas liquids\"                                       #>  [42] \"Refinery feedstocks\"                                       #>  [43] \"Coking coal\"                                               #>  [44] \"Coking coal [from Resources]\"                              #>  [45] \"Gasoline type jet fuel\"                                    #>  [46] \"Lignite [from Resources]\"                                  #>  [47] \"Other bituminous coal\"                                     #>  [48] \"Other bituminous coal [from Resources]\"                    #>  [49] \"Other hydrocarbons [from Resources]\"                       #>  [50] \"Sub-bituminous coal [from Resources]\"                      #>  [51] \"White spirit & SBP\"                                        #>  [52] \"Lignite\"                                                   #>  [53] \"Other hydrocarbons\"                                        #>  [54] \"Sub-bituminous coal\"                                       #>  [55] \"Heat\"                                                      #>  [56] \"Solar photovoltaics [from Resources]\"                      #>  [57] \"Solar photovoltaics\"                                       #>  [58] \"Solar thermal [from Resources]\"                            #>  [59] \"Wind [from Resources]\"                                     #>  [60] \"Solar thermal\"                                             #>  [61] \"Wind\"                                                      #>  [62] \"Biogases [from Resources]\"                                 #>  [63] \"Ethane\"                                                    #>  [64] \"Industrial waste [from Resources]\"                         #>  [65] \"Municipal waste (non-renewable) [from Resources]\"          #>  [66] \"Municipal waste (renewable) [from Resources]\"              #>  [67] \"Primary solid biofuels\"                                    #>  [68] \"Primary solid biofuels [from Resources]\"                   #>  [69] \"Biogases\"                                                  #>  [70] \"Industrial waste\"                                          #>  [71] \"Municipal waste (non-renewable)\"                           #>  [72] \"Municipal waste (renewable)\"                               #>  [73] \"Peat [from Resources]\"                                     #>  [74] \"Peat\"                                                      #>  [75] \"Additives/blending components\"                             #>  [76] \"Additives/blending components [from Resources]\"            #>  [77] \"Biogasoline\"                                               #>  [78] \"Biogasoline [from Resources]\"                              #>  [79] \"Biodiesels\"                                                #>  [80] \"Biodiesels [from Resources]\"                               #>  [81] \"Other liquid biofuels\"                                     #>  [82] \"Other liquid biofuels [from Resources]\"                    #>  [83] \"Anthracite\"                                                #>  [84] \"Anthracite [from Resources]\"                               #>  [85] \"HPA [from Air compressors]\"                                #>  [86] \"HPL [from Electric pumps]\"                                 #>  [87] \"HPL [from Gas pump jacks]\"                                 #>  [88] \"HTH.1600.C [from Blast oxygen furnaces]\"                   #>  [89] \"HTH.600.C [from Industrial electric process heaters]\"      #>  [90] \"HTH.850.C [from Steam cracking furnaces]\"                  #>  [91] \"HTH.960.C [from Electro-chemical processors]\"              #>  [92] \"IP [from Computers]\"                                       #>  [93] \"KE [from Industrial fans]\"                                 #>  [94] \"L [from Industrial electric lamps]\"                        #>  [95] \"LTC.-10.C [from Industrial refrigerators]\"                 #>  [96] \"LTC.20.C [from HVAC]\"                                      #>  [97] \"LTH.20.C [from Gas space heaters]\"                         #>  [98] \"MacW [from Machine tools]\"                                 #>  [99] \"MacW [from Material handlers]\"                             #> [100] \"MTH.100.C [from Gas water heaters]\"                        #> [101] \"RoP [from Electric cars]\"                                  #> [102] \"AirP [from Domestic aircraft]\"                             #> [103] \"HTH.1300.C [from Small scale biomass boilers]\"             #> [104] \"HTH.1600.C [from Electric arc furnaces]\"                   #> [105] \"L [from Commercial indoor electric lamps]\"                 #> [106] \"L [from Commercial outdoor electric lamps]\"                #> [107] \"L [from Domestic electric lamps]\"                          #> [108] \"LTC.-10.C [from Refrigerators]\"                            #> [109] \"LTC.20.C [from Room air conditioners]\"                     #> [110] \"LTH.20.C [from Coal stoves]\"                               #> [111] \"LTH.20.C [from Electric space heaters]\"                    #> [112] \"LTH.20.C [from LPG stoves]\"                                #> [113] \"LTH.20.C [from Oil space heaters]\"                         #> [114] \"LTH.50.C [from Coal stoves]\"                               #> [115] \"LTH.50.C [from LPG stoves]\"                                #> [116] \"MacW [from Tractors]\"                                      #> [117] \"MaP [from Domestic boats]\"                                 #> [118] \"MD [from Domestic appliances]\"                             #> [119] \"MD [from Static diesel engines]\"                           #> [120] \"MD [from Static gasoline engines]\"                         #> [121] \"MTH.100.C [from Coal stoves]\"                              #> [122] \"MTH.100.C [from Electric water heaters]\"                   #> [123] \"MTH.100.C [from Kerosene stoves]\"                          #> [124] \"MTH.100.C [from LPG stoves]\"                               #> [125] \"MTH.100.C [from Oil water heaters]\"                        #> [126] \"MTH.100.C [from Wood stoves]\"                              #> [127] \"MTH.200.C [from Coal stoves]\"                              #> [128] \"MTH.200.C [from Commercial electric ovens]\"                #> [129] \"MTH.200.C [from Commercial gas ovens]\"                     #> [130] \"MTH.200.C [from Domestic electric ovens]\"                  #> [131] \"MTH.200.C [from Domestic gas ovens]\"                       #> [132] \"NEU [from Non-energy consumption]\"                         #> [133] \"RaP [from Diesel trains]\"                                  #> [134] \"RaP [from Electric trains]\"                                #> [135] \"RaP [from Steam trains]\"                                   #> [136] \"RoP [from Diesel HDVs]\"                                    #> [137] \"RoP [from Gasoline LDVs]\"                                  #> [138] \"RoP [from Gasoline motorcycles]\"                           #> [139] \"RoP [from Natural gas vehicles]\"                           #> [140] \"MacW [from Electric cable shovels]\"                        #> [141] \"MF [from Electric continuous miners]\"                      #> [142] \"MF [from Ore grinding mills]\"                              #> [143] \"HPNG [from Pipeline gas compressors]\"                      #> [144] \"HTH.1000.C [from Clinker kilns]\"                           #> [145] \"HTH.400.C [from Ammonia synthesizers]\"                     #> [146] \"HTH.960.C [from Electrolytic smelters]\"                    #> [147] \"MacW [from Paper machines]\"                                #> [148] \"MTH.200.C [from Bayer kilns]\"                              #> [149] \"MTH.300.C [from Heat machines]\"                            #> [150] \"MacW [from Diesel bulldozers]\"                             #> [151] \"MacW [from Diesel hydraulic mobiles]\"                      #> [152] \"RoP [from Diesel haulage trucks]\"                          #> [153] \"LTH.20.C [from Ground source heat pumps]\"                  #> [154] \"LTH.20.C [from Wood stoves]\"                               #> [155] \"LTH.50.C [from Wood stoves]\"                               #> [156] \"LTH.60.C [from Solar thermal water heaters]\"               #> [157] \"MacW [from Electric cable cranes]\"                         #> [158] \"MacW [from Electric hand tools]\"                           #> [159] \"MacW [from Electric hydraulic mobiles]\"                    #> [160] \"MF [from Diesel rock borers]\"                              #> [161] \"HPL [from Diesel pumps]\"                                   #> [162] \"Biomass [from Resources]\"                                  #> [163] \"Biomass\"                                                   #> [164] \"Feed\"                                                      #> [165] \"Food\"                                                      #> [166] \"AnMech [from Asses]\"                                       #> [167] \"AnMech [from Buffaloes]\"                                   #> [168] \"AnMech [from Camelids]\"                                    #> [169] \"AnMech [from Cattle]\"                                      #> [170] \"AnMech [from Horses]\"                                      #> [171] \"AnMech [from Mules]\"                                       #> [172] \"HuMech [from Human females]\"                               #> [173] \"HuMech [from Human males]\"  # Unique industries in the data frame df_with_prods_inds$Industry.names |>    unlist() |>    unique() #>   [1] \"Imports [of Bitumen]\"                                               #>   [2] \"Imports [of Coke oven coke]\"                                        #>   [3] \"Imports [of Crude/NGL/feedstocks]\"                                  #>   [4] \"Imports [of Electricity]\"                                           #>   [5] \"Imports [of Fuel oil]\"                                              #>   [6] \"Imports [of Gas/diesel oil excl]\"                                   #>   [7] \"Imports [of Hard coal]\"                                             #>   [8] \"Imports [of Kerosene type jet fuel excl]\"                           #>   [9] \"Imports [of Liquefied petroleum gases]\"                             #>  [10] \"Imports [of Lubricants]\"                                            #>  [11] \"Imports [of Motor gasoline excl]\"                                   #>  [12] \"Imports [of Natural gas]\"                                           #>  [13] \"Imports [of Other kerosene]\"                                        #>  [14] \"Imports [of Other oil products]\"                                    #>  [15] \"Imports [of Paraffin waxes]\"                                        #>  [16] \"Imports [of Patent fuel]\"                                           #>  [17] \"Resources [of Brown coal (if no detail)]\"                           #>  [18] \"Resources [of Crude/NGL/feedstocks (if no detail)]\"                 #>  [19] \"Resources [of Geothermal]\"                                          #>  [20] \"Resources [of Hard coal (if no detail)]\"                            #>  [21] \"Resources [of Hydro]\"                                               #>  [22] \"Resources [of Natural gas]\"                                         #>  [23] \"Resources [of Non-specified primary biofuels and waste]\"            #>  [24] \"Resources [of Nuclear]\"                                             #>  [25] \"Statistical differences\"                                            #>  [26] \"Stock changes [of Bitumen]\"                                         #>  [27] \"Stock changes [of Crude/NGL/feedstocks]\"                            #>  [28] \"Stock changes [of Fuel oil]\"                                        #>  [29] \"Stock changes [of Gas/diesel oil excl]\"                             #>  [30] \"Stock changes [of Hard coal]\"                                       #>  [31] \"Stock changes [of Kerosene type jet fuel excl]\"                     #>  [32] \"Stock changes [of Other oil products]\"                              #>  [33] \"Stock changes [of Petroleum coke]\"                                  #>  [34] \"Blast furnaces\"                                                     #>  [35] \"Coal mines\"                                                         #>  [36] \"Coke ovens\"                                                         #>  [37] \"Gas works\"                                                          #>  [38] \"Main activity producer electricity plants\"                          #>  [39] \"Manufacture [of Geothermal]\"                                        #>  [40] \"Manufacture [of Hydro]\"                                             #>  [41] \"Manufacture [of Non-specified primary biofuels and waste]\"          #>  [42] \"Manufacture [of Nuclear]\"                                           #>  [43] \"Natural gas extraction\"                                             #>  [44] \"Nuclear industry\"                                                   #>  [45] \"Oil extraction\"                                                     #>  [46] \"Oil refineries\"                                                     #>  [47] \"Patent fuel plants\"                                                 #>  [48] \"Transfers\"                                                          #>  [49] \"Agriculture/forestry\"                                               #>  [50] \"Chemical and petrochemical\"                                         #>  [51] \"Commercial and public services\"                                     #>  [52] \"Domestic aviation\"                                                  #>  [53] \"Domestic navigation\"                                                #>  [54] \"Exports [of Bitumen]\"                                               #>  [55] \"Exports [of Coke oven coke]\"                                        #>  [56] \"Exports [of Crude/NGL/feedstocks]\"                                  #>  [57] \"Exports [of Electricity]\"                                           #>  [58] \"Exports [of Fuel oil]\"                                              #>  [59] \"Exports [of Gas/diesel oil excl]\"                                   #>  [60] \"Exports [of Hard coal]\"                                             #>  [61] \"Exports [of Kerosene type jet fuel excl]\"                           #>  [62] \"Exports [of Liquefied petroleum gases]\"                             #>  [63] \"Exports [of Lubricants]\"                                            #>  [64] \"Exports [of Motor gasoline excl]\"                                   #>  [65] \"Exports [of Natural gas]\"                                           #>  [66] \"Exports [of Other kerosene]\"                                        #>  [67] \"Exports [of Other oil products]\"                                    #>  [68] \"Exports [of Paraffin waxes]\"                                        #>  [69] \"Exports [of Patent fuel]\"                                           #>  [70] \"Exports [of Petroleum coke]\"                                        #>  [71] \"Exports to World aviation bunkers [of Kerosene type jet fuel excl]\" #>  [72] \"Exports to World marine bunkers [of Fuel oil]\"                      #>  [73] \"Exports to World marine bunkers [of Gas/diesel oil excl]\"           #>  [74] \"Exports to World marine bunkers [of Hard coal]\"                     #>  [75] \"Final consumption not elsewhere specified\"                          #>  [76] \"Industry not elsewhere specified\"                                   #>  [77] \"Iron and steel\"                                                     #>  [78] \"Losses\"                                                             #>  [79] \"Non-energy use in transport\"                                        #>  [80] \"Non-energy use industry/transformation/energy\"                      #>  [81] \"Rail\"                                                               #>  [82] \"Residential\"                                                        #>  [83] \"Road\"                                                               #>  [84] \"Stock changes [of Coke oven coke]\"                                  #>  [85] \"Stock changes [of Liquefied petroleum gases]\"                       #>  [86] \"Stock changes [of Lubricants]\"                                      #>  [87] \"Stock changes [of Motor gasoline excl]\"                             #>  [88] \"Stock changes [of Natural gas]\"                                     #>  [89] \"Stock changes [of Other kerosene]\"                                  #>  [90] \"Stock changes [of Paraffin waxes]\"                                  #>  [91] \"Imports [of Naphtha]\"                                               #>  [92] \"Stock changes [of Naphtha]\"                                         #>  [93] \"Stock changes [of Aviation gasoline]\"                               #>  [94] \"Exports [of Aviation gasoline]\"                                     #>  [95] \"Exports [of Naphtha]\"                                               #>  [96] \"Exports [of Gas works gas]\"                                         #>  [97] \"Pipeline transport\"                                                 #>  [98] \"Imports [of Crude oil]\"                                             #>  [99] \"Resources [of Crude oil]\"                                           #> [100] \"Resources [of Natural gas liquids]\"                                 #> [101] \"Exports [of Crude oil]\"                                             #> [102] \"Food and tobacco\"                                                   #> [103] \"Machinery\"                                                          #> [104] \"Mining and quarrying\"                                               #> [105] \"Non-ferrous metals\"                                                 #> [106] \"Non-metallic minerals\"                                              #> [107] \"Paper, pulp and printing\"                                           #> [108] \"Stock changes [of Crude oil]\"                                       #> [109] \"Textile and leather\"                                                #> [110] \"Transport equipment\"                                                #> [111] \"Wood and wood products\"                                             #> [112] \"Stock changes [of Patent fuel]\"                                     #> [113] \"Imports [of Brown coal]\"                                            #> [114] \"Exports [of Brown coal]\"                                            #> [115] \"Imports [of Natural gas liquids]\"                                   #> [116] \"Imports [of Refinery feedstocks]\"                                   #> [117] \"Exports [of Natural gas liquids]\"                                   #> [118] \"Stock changes [of Natural gas liquids]\"                             #> [119] \"Stock changes [of Refinery feedstocks]\"                             #> [120] \"Imports [of Aviation gasoline]\"                                     #> [121] \"Imports [of Gasoline type jet fuel]\"                                #> [122] \"Imports [of Other bituminous coal]\"                                 #> [123] \"Imports [of White spirit & SBP]\"                                    #> [124] \"Resources [of Coking coal]\"                                         #> [125] \"Resources [of Lignite]\"                                             #> [126] \"Resources [of Other bituminous coal]\"                               #> [127] \"Resources [of Other hydrocarbons]\"                                  #> [128] \"Resources [of Sub-bituminous coal]\"                                 #> [129] \"Stock changes [of Coking coal]\"                                     #> [130] \"Stock changes [of Gasoline type jet fuel]\"                          #> [131] \"Stock changes [of Other bituminous coal]\"                           #> [132] \"Exports [of Coking coal]\"                                           #> [133] \"Exports [of Lignite]\"                                               #> [134] \"Exports [of Other bituminous coal]\"                                 #> [135] \"Exports [of White spirit & SBP]\"                                    #> [136] \"Stock changes [of Lignite]\"                                         #> [137] \"Stock changes [of White spirit & SBP]\"                              #> [138] \"Exports [of Gasoline type jet fuel]\"                                #> [139] \"Stock changes [of Sub-bituminous coal]\"                             #> [140] \"Main activity producer CHP plants\"                                  #> [141] \"Resources [of Solar photovoltaics]\"                                 #> [142] \"Stock changes [of Other hydrocarbons]\"                              #> [143] \"Manufacture [of Solar photovoltaics]\"                               #> [144] \"Construction\"                                                       #> [145] \"Imports [of Petroleum coke]\"                                        #> [146] \"Resources [of Solar thermal]\"                                       #> [147] \"Resources [of Wind]\"                                                #> [148] \"Manufacture [of Solar thermal]\"                                     #> [149] \"Manufacture [of Wind]\"                                              #> [150] \"Imports [of Other hydrocarbons]\"                                    #> [151] \"Resources [of Biogases]\"                                            #> [152] \"Resources [of Industrial waste]\"                                    #> [153] \"Resources [of Municipal waste (non-renewable)]\"                     #> [154] \"Resources [of Municipal waste (renewable)]\"                         #> [155] \"Resources [of Primary solid biofuels]\"                              #> [156] \"Stock changes [of Ethane]\"                                          #> [157] \"For blended natural gas\"                                            #> [158] \"Manufacture [of Biogases]\"                                          #> [159] \"Manufacture [of Industrial waste]\"                                  #> [160] \"Manufacture [of Municipal waste (non-renewable)]\"                   #> [161] \"Manufacture [of Municipal waste (renewable)]\"                       #> [162] \"Manufacture [of Primary solid biofuels]\"                            #> [163] \"Transport not elsewhere specified\"                                  #> [164] \"Imports [of Sub-bituminous coal]\"                                   #> [165] \"Imports [of Ethane]\"                                                #> [166] \"Resources [of Peat]\"                                                #> [167] \"Main activity producer heat plants\"                                 #> [168] \"Manufacture [of Peat]\"                                              #> [169] \"Imports [of Additives/blending components]\"                         #> [170] \"Imports [of Biogasoline]\"                                           #> [171] \"Resources [of Additives/blending components]\"                       #> [172] \"Resources [of Biogasoline]\"                                         #> [173] \"Manufacture [of Biogasoline]\"                                       #> [174] \"Exports [of Sub-bituminous coal]\"                                   #> [175] \"Stock changes [of Additives/blending components]\"                   #> [176] \"Stock changes [of Biogasoline]\"                                     #> [177] \"Exports [of Additives/blending components]\"                         #> [178] \"Imports [of Coking coal]\"                                           #> [179] \"Imports [of Lignite]\"                                               #> [180] \"Resources [of Biodiesels]\"                                          #> [181] \"Manufacture [of Biodiesels]\"                                        #> [182] \"Resources [of Other liquid biofuels]\"                               #> [183] \"Manufacture [of Other liquid biofuels]\"                             #> [184] \"Imports [of Anthracite]\"                                            #> [185] \"Resources [of Anthracite]\"                                          #> [186] \"Stock changes [of Anthracite]\"                                      #> [187] \"Exports [of Anthracite]\"                                            #> [188] \"Imports [of Biodiesels]\"                                            #> [189] \"Exports [of Biodiesels]\"                                            #> [190] \"Stock changes [of Biodiesels]\"                                      #> [191] \"Exports [of Biogasoline]\"                                           #> [192] \"Non-specified\"                                                      #> [193] \"Non-energy use in other\"                                            #> [194] \"Exports to World marine bunkers [of Biodiesels]\"                    #> [195] \"Exports [of Refinery feedstocks]\"                                   #> [196] \"Exports [of Ethane]\"                                                #> [197] \"Air compressors -> HPA\"                                             #> [198] \"Blast oxygen furnaces -> HTH.1600.C\"                                #> [199] \"Coal stoves -> LTH.20.C\"                                            #> [200] \"Coal stoves -> LTH.50.C\"                                            #> [201] \"Coal stoves -> MTH.100.C\"                                           #> [202] \"Coal stoves -> MTH.200.C\"                                           #> [203] \"Commercial electric ovens -> MTH.200.C\"                             #> [204] \"Commercial gas ovens -> MTH.200.C\"                                  #> [205] \"Commercial indoor electric lamps -> L\"                              #> [206] \"Commercial outdoor electric lamps -> L\"                             #> [207] \"Computers -> IP\"                                                    #> [208] \"Diesel HDVs -> RoP\"                                                 #> [209] \"Diesel trains -> RaP\"                                               #> [210] \"Domestic aircraft -> AirP\"                                          #> [211] \"Domestic appliances -> MD\"                                          #> [212] \"Domestic boats -> MaP\"                                              #> [213] \"Domestic electric lamps -> L\"                                       #> [214] \"Domestic electric ovens -> MTH.200.C\"                               #> [215] \"Domestic gas ovens -> MTH.200.C\"                                    #> [216] \"Electric arc furnaces -> HTH.1600.C\"                                #> [217] \"Electric cars -> RoP\"                                               #> [218] \"Electric pumps -> HPL\"                                              #> [219] \"Electric space heaters -> LTH.20.C\"                                 #> [220] \"Electric trains -> RaP\"                                             #> [221] \"Electric water heaters -> MTH.100.C\"                                #> [222] \"Electro-chemical processors -> HTH.960.C\"                           #> [223] \"Gas pump jacks -> HPL\"                                              #> [224] \"Gas space heaters -> LTH.20.C\"                                      #> [225] \"Gas water heaters -> MTH.100.C\"                                     #> [226] \"Gasoline LDVs -> RoP\"                                               #> [227] \"Gasoline motorcycles -> RoP\"                                        #> [228] \"HVAC -> LTC.20.C\"                                                   #> [229] \"Industrial electric lamps -> L\"                                     #> [230] \"Industrial electric process heaters -> HTH.600.C\"                   #> [231] \"Industrial fans -> KE\"                                              #> [232] \"Industrial refrigerators -> LTC.-10.C\"                              #> [233] \"Kerosene stoves -> MTH.100.C\"                                       #> [234] \"LPG stoves -> LTH.20.C\"                                             #> [235] \"LPG stoves -> LTH.50.C\"                                             #> [236] \"LPG stoves -> MTH.100.C\"                                            #> [237] \"Machine tools -> MacW\"                                              #> [238] \"Material handlers -> MacW\"                                          #> [239] \"Natural gas vehicles -> RoP\"                                        #> [240] \"Non-energy consumption -> NEU\"                                      #> [241] \"Oil space heaters -> LTH.20.C\"                                      #> [242] \"Oil water heaters -> MTH.100.C\"                                     #> [243] \"Refrigerators -> LTC.-10.C\"                                         #> [244] \"Room air conditioners -> LTC.20.C\"                                  #> [245] \"Small scale biomass boilers -> HTH.1300.C\"                          #> [246] \"Static diesel engines -> MD\"                                        #> [247] \"Static gasoline engines -> MD\"                                      #> [248] \"Steam cracking furnaces -> HTH.850.C\"                               #> [249] \"Steam trains -> RaP\"                                                #> [250] \"Tractors -> MacW\"                                                   #> [251] \"Wood stoves -> MTH.100.C\"                                           #> [252] \"Electric cable shovels -> MacW\"                                     #> [253] \"Electric continuous miners -> MF\"                                   #> [254] \"Ore grinding mills -> MF\"                                           #> [255] \"Pipeline gas compressors -> HPNG\"                                   #> [256] \"Ammonia synthesizers -> HTH.400.C\"                                  #> [257] \"Bayer kilns -> MTH.200.C\"                                           #> [258] \"Clinker kilns -> HTH.1000.C\"                                        #> [259] \"Electrolytic smelters -> HTH.960.C\"                                 #> [260] \"Paper machines -> MacW\"                                             #> [261] \"Heat machines -> MTH.300.C\"                                         #> [262] \"Diesel bulldozers -> MacW\"                                          #> [263] \"Diesel haulage trucks -> RoP\"                                       #> [264] \"Diesel hydraulic mobiles -> MacW\"                                   #> [265] \"Ground source heat pumps -> LTH.20.C\"                               #> [266] \"Wood stoves -> LTH.20.C\"                                            #> [267] \"Wood stoves -> LTH.50.C\"                                            #> [268] \"Solar thermal water heaters -> LTH.60.C\"                            #> [269] \"Electric cable cranes -> MacW\"                                      #> [270] \"Electric hand tools -> MacW\"                                        #> [271] \"Electric hydraulic mobiles -> MacW\"                                 #> [272] \"Diesel pumps -> HPL\"                                                #> [273] \"Diesel rock borers -> MF\"                                           #> [274] \"Resources [of Biomass]\"                                             #> [275] \"Farms\"                                                              #> [276] \"Feed production\"                                                    #> [277] \"Food production\"                                                    #> [278] \"Asses -> AnMech\"                                                    #> [279] \"Buffaloes -> AnMech\"                                                #> [280] \"Camelids -> AnMech\"                                                 #> [281] \"Cattle -> AnMech\"                                                   #> [282] \"Horses -> AnMech\"                                                   #> [283] \"Human females -> HuMech\"                                            #> [284] \"Human males -> HuMech\"                                              #> [285] \"Mules -> AnMech\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"aggregate-by-parts-of-row-and-column-labels","dir":"Articles","previous_headings":"","what":"Aggregate by parts of row and column labels","title":"Building Aggregation Maps From Row and Column Labels","text":"Recca::get_all_products_and_industries() can also select parts row column label. Knowing (eventually) want aggregate nouns, can extract nouns (prefixes) row column labels, shown code . Extracting piece row column names significantly slower extracting entire row column names. , one can use unique() find nouns required aggregation maps. lists shorter lists whole names products industries, fewer unique nouns unique row column labels. lists nouns can used create aggregation maps, shown next section.","code":"df_with_prods_inds_nouns <- df |>   # Restrict years to reduce execution time.   dplyr::filter(Year == 1960) |>   Recca::get_all_products_and_industries(     piece = \"noun\",     inf_notation = TRUE,     notation = list(RCLabels::bracket_notation, RCLabels::arrow_notation)) dplyr::glimpse(df_with_prods_inds_nouns) #> Rows: 12 #> Columns: 16 #> $ Country        <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\",… #> $ Method         <chr> \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\", \"PCM\",… #> $ Energy.type    <chr> \"E\", \"E\", \"X\", \"X\", \"E\", \"E\", \"X\", \"X\", \"E\", \"E\", \"X\", … #> $ Last.stage     <chr> \"Final\", \"Useful\", \"Final\", \"Useful\", \"Final\", \"Useful\"… #> $ Year           <dbl> 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1960, 1… #> $ IEAMW          <chr> \"IEA\", \"IEA\", \"IEA\", \"IEA\", \"MW\", \"MW\", \"MW\", \"MW\", \"Bo… #> $ Y              <list> <<matrix[24 x 43]>>, <<matrix[77 x 43]>>, <<matrix[24 … #> $ S_units        <list> <<matrix[36 x 1]>>, <<matrix[36 x 1]>>, <<matrix[36 x … #> $ R              <list> <<matrix[33 x 26]>>, <<matrix[33 x 26]>>, <<matrix[33 … #> $ U              <list> <<matrix[26 x 15]>>, <<matrix[53 x 70]>>, <<matrix[26 … #> $ U_feed         <list> <<matrix[21 x 15]>>, <<matrix[36 x 70]>>, <<matrix[21 … #> $ U_EIOU         <list> <<matrix[8 x 6]>>, <<matrix[17 x 6]>>, <<matrix[8 x 6]… #> $ r_EIOU         <list> <<matrix[26 x 15]>>, <<matrix[53 x 70]>>, <<matrix[26 … #> $ V              <list> <<matrix[15 x 28]>>, <<matrix[70 x 83]>>, <<matrix[15 … #> $ Product.names  <list> <\"Bitumen\", \"Brown coal (if no detail)\", \"Coke oven co… #> $ Industry.names <list> <\"Imports\", \"Resources\", \"Statistical differences\", \"S… # Unique products (nouns only) in the data frame df_with_prods_inds_nouns$Product.names |>    unlist() |>    unique() #>  [1] \"Bitumen\"                                  #>  [2] \"Brown coal (if no detail)\"                #>  [3] \"Coke oven coke\"                           #>  [4] \"Crude/NGL/feedstocks (if no detail)\"      #>  [5] \"Electricity\"                              #>  [6] \"Fuel oil\"                                 #>  [7] \"Gas/diesel oil excl. biofuels\"            #>  [8] \"Geothermal\"                               #>  [9] \"Hard coal (if no detail)\"                 #> [10] \"Hydro\"                                    #> [11] \"Kerosene type jet fuel excl. biofuels\"    #> [12] \"Liquefied petroleum gases (LPG)\"          #> [13] \"Lubricants\"                               #> [14] \"Motor gasoline excl. biofuels\"            #> [15] \"Natural gas\"                              #> [16] \"Non-specified primary biofuels and waste\" #> [17] \"Nuclear\"                                  #> [18] \"Other kerosene\"                           #> [19] \"Other oil products\"                       #> [20] \"Paraffin waxes\"                           #> [21] \"Patent fuel\"                              #> [22] \"Petroleum coke\"                           #> [23] \"Blast furnace gas\"                        #> [24] \"Coke oven gas\"                            #> [25] \"Gas coke\"                                 #> [26] \"Gas works gas\"                            #> [27] \"Refinery gas\"                             #> [28] \"Aviation gasoline\"                        #> [29] \"HPA\"                                      #> [30] \"HPL\"                                      #> [31] \"HTH.1600.C\"                               #> [32] \"HTH.600.C\"                                #> [33] \"HTH.850.C\"                                #> [34] \"HTH.960.C\"                                #> [35] \"IP\"                                       #> [36] \"KE\"                                       #> [37] \"L\"                                        #> [38] \"LTC.-10.C\"                                #> [39] \"LTC.20.C\"                                 #> [40] \"LTH.20.C\"                                 #> [41] \"MacW\"                                     #> [42] \"MTH.100.C\"                                #> [43] \"RoP\"                                      #> [44] \"AirP\"                                     #> [45] \"HTH.1300.C\"                               #> [46] \"LTH.50.C\"                                 #> [47] \"MaP\"                                      #> [48] \"MD\"                                       #> [49] \"MTH.200.C\"                                #> [50] \"NEU\"                                      #> [51] \"RaP\"                                      #> [52] \"Biomass\"                                  #> [53] \"Feed\"                                     #> [54] \"Food\"                                     #> [55] \"AnMech\"                                   #> [56] \"HuMech\"  # Unique industries (nouns only) in the data frame df_with_prods_inds_nouns$Industry.names |>    unlist() |>    unique() #>  [1] \"Imports\"                                       #>  [2] \"Resources\"                                     #>  [3] \"Statistical differences\"                       #>  [4] \"Stock changes\"                                 #>  [5] \"Blast furnaces\"                                #>  [6] \"Coal mines\"                                    #>  [7] \"Coke ovens\"                                    #>  [8] \"Gas works\"                                     #>  [9] \"Main activity producer electricity plants\"     #> [10] \"Manufacture\"                                   #> [11] \"Natural gas extraction\"                        #> [12] \"Nuclear industry\"                              #> [13] \"Oil extraction\"                                #> [14] \"Oil refineries\"                                #> [15] \"Patent fuel plants\"                            #> [16] \"Transfers\"                                     #> [17] \"Agriculture/forestry\"                          #> [18] \"Chemical and petrochemical\"                    #> [19] \"Commercial and public services\"                #> [20] \"Domestic aviation\"                             #> [21] \"Domestic navigation\"                           #> [22] \"Exports\"                                       #> [23] \"Exports to World aviation bunkers\"             #> [24] \"Exports to World marine bunkers\"               #> [25] \"Final consumption not elsewhere specified\"     #> [26] \"Industry not elsewhere specified\"              #> [27] \"Iron and steel\"                                #> [28] \"Losses\"                                        #> [29] \"Non-energy use in transport\"                   #> [30] \"Non-energy use industry/transformation/energy\" #> [31] \"Rail\"                                          #> [32] \"Residential\"                                   #> [33] \"Road\"                                          #> [34] \"Air compressors\"                               #> [35] \"Blast oxygen furnaces\"                         #> [36] \"Coal stoves\"                                   #> [37] \"Commercial electric ovens\"                     #> [38] \"Commercial gas ovens\"                          #> [39] \"Commercial indoor electric lamps\"              #> [40] \"Commercial outdoor electric lamps\"             #> [41] \"Computers\"                                     #> [42] \"Diesel HDVs\"                                   #> [43] \"Diesel trains\"                                 #> [44] \"Domestic aircraft\"                             #> [45] \"Domestic appliances\"                           #> [46] \"Domestic boats\"                                #> [47] \"Domestic electric lamps\"                       #> [48] \"Domestic electric ovens\"                       #> [49] \"Domestic gas ovens\"                            #> [50] \"Electric arc furnaces\"                         #> [51] \"Electric cars\"                                 #> [52] \"Electric pumps\"                                #> [53] \"Electric space heaters\"                        #> [54] \"Electric trains\"                               #> [55] \"Electric water heaters\"                        #> [56] \"Electro-chemical processors\"                   #> [57] \"Gas pump jacks\"                                #> [58] \"Gas space heaters\"                             #> [59] \"Gas water heaters\"                             #> [60] \"Gasoline LDVs\"                                 #> [61] \"Gasoline motorcycles\"                          #> [62] \"HVAC\"                                          #> [63] \"Industrial electric lamps\"                     #> [64] \"Industrial electric process heaters\"           #> [65] \"Industrial fans\"                               #> [66] \"Industrial refrigerators\"                      #> [67] \"Kerosene stoves\"                               #> [68] \"LPG stoves\"                                    #> [69] \"Machine tools\"                                 #> [70] \"Material handlers\"                             #> [71] \"Natural gas vehicles\"                          #> [72] \"Non-energy consumption\"                        #> [73] \"Oil space heaters\"                             #> [74] \"Oil water heaters\"                             #> [75] \"Refrigerators\"                                 #> [76] \"Room air conditioners\"                         #> [77] \"Small scale biomass boilers\"                   #> [78] \"Static diesel engines\"                         #> [79] \"Static gasoline engines\"                       #> [80] \"Steam cracking furnaces\"                       #> [81] \"Steam trains\"                                  #> [82] \"Tractors\"                                      #> [83] \"Wood stoves\"                                   #> [84] \"Farms\"                                         #> [85] \"Feed production\"                               #> [86] \"Food production\"                               #> [87] \"Transport not elsewhere specified\"             #> [88] \"Asses\"                                         #> [89] \"Buffaloes\"                                     #> [90] \"Camelids\"                                      #> [91] \"Cattle\"                                        #> [92] \"Horses\"                                        #> [93] \"Human females\"                                 #> [94] \"Human males\"                                   #> [95] \"Mules\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"construct-an-aggregation-map","dir":"Articles","previous_headings":"","what":"Construct an aggregation map","title":"Building Aggregation Maps From Row and Column Labels","text":"aggregation map description way aggregation performed. R terms, aggregation map simply named list values row column names (pieces names) aggregated names new names aggregated rows columns. example, Aggregation maps can also constructed data frame “Many” “” columns. Aggregation tables can created Excel file read R readxl package. Example aggregation tables can found “Aggregation_maps.xlsx” file PFUPipeline package.","code":"prod_agg_map_example <- list(   `Coal & coal products` = c(\"Hard coal (if no detail)\",                               \"Brown coal (if no detail)\",                              \"Anthracite\",                              \"Coking coal\",                              \"Other bituminous coal\",                              \"Sub-bituminous coal\"),    `Oil & oil products` = c(\"Crude/NGL/feedstocks (if no detail)\",                             \"Crude oil\",                             \"Natural gas liquids\",                             \"Refinery feedstocks\",                             \"Additives/blending components\",                             \"Other hydrocarbons\") ) prod_agg_table_example <- tibble::tribble(   ~Many, ~Few,    \"Hard coal (if no detail)\", \"Coal & coal products\",   \"Brown coal (if no detail)\", \"Coal & coal products\",   \"Anthracite\", \"Coal & coal products\",   \"Coking coal\", \"Coal & coal products\",   \"Other bituminous coal\", \"Coal & coal products\",   \"Sub-bituminous coal\", \"Coal & coal products\",   \"Crude/NGL/feedstocks (if no detail)\", \"Oil & oil products\",   \"Crude oil\", \"Oil & oil products\",   \"Natural gas liquids\", \"Oil & oil products\",   \"Refinery feedstocks\", \"Oil & oil products\",   \"Additives/blending components\", \"Oil & oil products\",   \"Other hydrocarbons\", \"Oil & oil products\" ) prod_agg_table_example #> # A tibble: 12 × 2 #>    Many                                Few                  #>    <chr>                               <chr>                #>  1 Hard coal (if no detail)            Coal & coal products #>  2 Brown coal (if no detail)           Coal & coal products #>  3 Anthracite                          Coal & coal products #>  4 Coking coal                         Coal & coal products #>  5 Other bituminous coal               Coal & coal products #>  6 Sub-bituminous coal                 Coal & coal products #>  7 Crude/NGL/feedstocks (if no detail) Oil & oil products   #>  8 Crude oil                           Oil & oil products   #>  9 Natural gas liquids                 Oil & oil products   #> 10 Refinery feedstocks                 Oil & oil products   #> 11 Additives/blending components       Oil & oil products   #> 12 Other hydrocarbons                  Oil & oil products  matsbyname::agg_table_to_agg_map(prod_agg_table_example,                                  many_colname = \"Many\",                                   few_colname = \"Few\") #> $`Coal & coal products` #> [1] \"Hard coal (if no detail)\"  \"Brown coal (if no detail)\" #> [3] \"Anthracite\"                \"Coking coal\"               #> [5] \"Other bituminous coal\"     \"Sub-bituminous coal\"       #>  #> $`Oil & oil products` #> [1] \"Crude/NGL/feedstocks (if no detail)\" \"Crude oil\"                           #> [3] \"Natural gas liquids\"                 \"Refinery feedstocks\"                 #> [5] \"Additives/blending components\"       \"Other hydrocarbons\" prod_agg_map <- system.file(\"extdata\", \"Aggregation_Tables.xlsx\",                               package=\"PFUPipeline\") |>    readxl::read_excel(sheet = \"product_aggregation\") |>    matsbyname::agg_table_to_agg_map(many_colname = \"Many\",                                     few_colname = \"Few\") prod_agg_map #> $Biofuels #> [1] \"Primary solid biofuels\"                   #> [2] \"Biogases\"                                 #> [3] \"Biogasoline\"                              #> [4] \"Biodiesels\"                               #> [5] \"Bio jet kerosene\"                         #> [6] \"Other liquid biofuels\"                    #> [7] \"Non-specified primary biofuels and waste\" #> [8] \"Charcoal\"                                 #>  #> $`Coal & coal products` #>  [1] \"Hard coal (if no detail)\"  \"Brown coal (if no detail)\" #>  [3] \"Anthracite\"                \"Coking coal\"               #>  [5] \"Other bituminous coal\"     \"Sub-bituminous coal\"       #>  [7] \"Lignite\"                   \"Patent fuel\"               #>  [9] \"Coke oven coke\"            \"Gas coke\"                  #> [11] \"Coal tar\"                  \"BKB\"                       #> [13] \"Gas works gas\"             \"Coke oven gas\"             #> [15] \"Blast furnace gas\"         \"Other recovered gases\"     #> [17] \"Peat\"                      \"Peat products\"             #>  #> $Electricity #> [1] \"Nuclear\"              \"Hydro\"                \"Solar photovoltaics\"  #> [4] \"Tide, wave and ocean\" \"Wind\"                 \"Other sources\"        #> [7] \"Electricity\"          #>  #> $Feed #> [1] \"Feed\" #>  #> $Food #> [1] \"Food\" #>  #> $HPF #> [1] \"HPA\"  \"HPL\"  \"HPNG\" #>  #> $HTH #> [1] \"HTH.1000.C\" \"HTH.1300.C\" \"HTH.1600.C\" \"HTH.400.C\"  \"HTH.600.C\"  #> [6] \"HTH.850.C\"  \"HTH.960.C\"  #>  #> $Heat #> [1] \"Elec/heat output from non-specified manufactured gases\" #> [2] \"Heat output from non-specified combustible fuels\"       #> [3] \"Geothermal\"                                             #> [4] \"Solar thermal\"                                          #> [5] \"Heat\"                                                   #>  #> $IP #> [1] \"IP\" #>  #> $L #> [1] \"L\" #>  #> $LTC #> [1] \"LTC.-10.C\" \"LTC.20.C\"  #>  #> $LTH #> [1] \"LTH.20.C\" \"LTH.50.C\" \"LTH.60.C\" #>  #> $MTH #> [1] \"MTH.100.C\" \"MTH.200.C\" \"MTH.300.C\" #>  #> $MechW #> [1] \"KE\"   \"MD\"   \"MF\"   \"MacW\" #>  #> $MuscW #> [1] \"AMW\" \"HMW\" #>  #> $NEU #> [1] \"NEU\" #>  #> $`Natural gas` #> [1] \"Natural gas\" #>  #> $`Oil & oil products` #>  [1] \"Oil shale and oil sands\"               #>  [2] \"Crude/NGL/feedstocks (if no detail)\"   #>  [3] \"Crude oil\"                             #>  [4] \"Natural gas liquids\"                   #>  [5] \"Refinery feedstocks\\\"\"                 #>  [6] \"Additives/blending components\"         #>  [7] \"Other hydrocarbons\"                    #>  [8] \"Refinery gas\"                          #>  [9] \"Ethane\"                                #> [10] \"Liquefied petroleum gases (LPG)\"       #> [11] \"Motor gasoline excl. biofuels\"         #> [12] \"Aviation gasoline\"                     #> [13] \"Gasoline type jet fuel\"                #> [14] \"Kerosene type jet fuel excl. biofuels\" #> [15] \"Other kerosene\"                        #> [16] \"Gas/diesel oil excl. biofuels\"         #> [17] \"Fuel oil\"                              #> [18] \"Naphtha\"                               #> [19] \"White spirit & SBP\"                    #> [20] \"Lubricants\"                            #> [21] \"Bitumen\"                               #> [22] \"Paraffin waxes\"                        #> [23] \"Petroleum coke\"                        #> [24] \"Other oil products\"                    #>  #> $Prop #> [1] \"AirP\" \"MaP\"  \"RaP\"  \"RoP\"  #>  #> $Waste #> [1] \"Industrial waste\"                \"Municipal waste (renewable)\"     #> [3] \"Municipal waste (non-renewable)\"  ind_agg_map <- system.file(\"extdata\", \"Aggregation_Tables.xlsx\",                                package=\"PFUPipeline\") |>    readxl::read_excel(sheet = \"industry_aggregation\") |>    matsbyname::agg_table_to_agg_map(many_colname = \"Many\",                                     few_colname = \"Few\") ind_agg_map #> $`Agriculture, forestry, and fishing` #> [1] \"Agriculture/forestry\" \"Fishing\"              #>  #> $`Commercial and public services` #> [1] \"Commercial and public services\" #>  #> $`Energy industry own use` #>  [1] \"Coal mines\"                                  #>  [2] \"Oil and gas extraction\"                      #>  [3] \"Blast furnaces\"                              #>  [4] \"Gas works\"                                   #>  [5] \"Gasification plants for biogases\"            #>  [6] \"Coke ovens\"                                  #>  [7] \"Patent fuel plants\"                          #>  [8] \"BKB/peat briquette plants\"                   #>  [9] \"Oil refineries\"                              #> [10] \"Coal liquefaction plants\"                    #> [11] \"Liquefaction (LNG) / regasification plants\"  #> [12] \"Gas-to-liquids (GTL) plants\"                 #> [13] \"Own use in electricity, CHP and heat plants\" #> [14] \"Pumped storage plants\"                       #> [15] \"Nuclear industry\"                            #> [16] \"Charcoal production plants\"                  #> [17] \"Non-specified (energy)\"                      #> [18] \"Main activity producer electricity plants\"   #> [19] \"Main activity producer CHP plants\"           #> [20] \"Main activity producer heat plants\"          #> [21] \"Manufacture\"                                 #> [22] \"Natural gas extraction\"                      #> [23] \"Oil extraction\"                              #> [24] \"Transfers\"                                   #>  #> $Industry #>  [1] \"Mining and quarrying\"             \"Construction\"                     #>  [3] \"Iron and steel\"                   \"Chemical and petrochemical\"       #>  [5] \"Non-ferrous metals\"               \"Non-metallic minerals\"            #>  [7] \"Transport equipment\"              \"Machinery\"                        #>  [9] \"Food and tobacco\"                 \"Paper, pulp and printing\"         #> [11] \"Wood and wood products\"           \"Textile and leather\"              #> [13] \"Industry not elsewhere specified\" #>  #> $Manufacture #> [1] \"Manufacture\" #>  #> $`Non-energy use` #>  [1] \"Non-energy use industry/transformation/energy\"      #>  [2] \"Non-energy use in transport\"                        #>  [3] \"Non-energy use in other\"                            #>  [4] \"Non-energy use in construction\"                     #>  [5] \"Non-energy use in mining and quarrying\"             #>  [6] \"Non-energy use in iron and steel\"                   #>  [7] \"Non-energy use in chemical/petrochemical\"           #>  [8] \"Non-energy use in non-ferrous metals\"               #>  [9] \"Non-energy use in non-metallic minerals\"            #> [10] \"Non-energy use in transport equipment\"              #> [11] \"Non-energy use in machinery\"                        #> [12] \"Non-energy use in food/beverages/tobacco\"           #> [13] \"Non-energy use in paper/pulp and printing\"          #> [14] \"Non-energy use in wood and wood products\"           #> [15] \"Non-energy use in textiles and leather\"             #> [16] \"Non-energy use in industry not elsewhere specified\" #>  #> $Residential #> [1] \"Residential\" #>  #> $Transport #>  [1] \"World aviation bunkers\"            \"Domestic aviation\"                 #>  [3] \"Road\"                              \"Rail\"                              #>  [5] \"Pipeline transport\"                \"World marine bunkers\"              #>  [7] \"Exports to World marine bunkers\"   \"Domestic navigation\"               #>  [9] \"Transport not elsewhere specified\" \"International aviation\"            #> [11] \"International navigation\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"perform-the-aggregations","dir":"Articles","previous_headings":"","what":"Perform the aggregations","title":"Building Aggregation Maps From Row and Column Labels","text":"two matsbyname functions assist aggregations: matsbyname::aggregate_byname() matsbyname::aggregate_pieces_byname(). third function (matsbyname::aggregate_to_pref_suff_byname()) deprecated favor matsbyname::aggregate_pieces_byname(). Knowing matsbyname package can aggregate piece row column label (including prefix, suffix, noun, object preposition), aggregation maps can constructed focusing nouns (prefixes) row column names. aggregate matrices df object, one can use code like following example. aggregated matrices simpler original matrices, expected.","code":"aggregated <- df |>    # Restrict to a single year to reduce execution time.   dplyr::filter(Year == 1960) |>    dplyr::mutate(     # Aggregate R     R_agg = .data[[\"R\"]] |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Industry\",         inf_notation = TRUE,         notation = list(list(RCLabels::bracket_notation, RCLabels::arrow_notation)),       ) |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Product\",         inf_notation = FALSE,         notation = RCLabels::bracket_notation,         aggregation_map = list(prod_agg_map)       ),     # Aggregate U_feed     U_feed_agg = .data[[\"U_feed\"]] |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Product\",         inf_notation = FALSE,         notation = RCLabels::bracket_notation,         aggregation_map = list(prod_agg_map)       ) |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Industry\",         inf_notation = TRUE,         notation = list(list(RCLabels::bracket_notation, RCLabels::arrow_notation)),         aggregation_map = list(ind_agg_map)       ),     # Aggregate U_EIOU     U_EIOU_agg = .data[[\"U_EIOU\"]] |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Product\",         inf_notation = FALSE,         notation = RCLabels::bracket_notation,         aggregation_map = list(prod_agg_map)       ) |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Industry\",         inf_notation = TRUE,         notation = list(list(RCLabels::bracket_notation, RCLabels::arrow_notation)),         aggregation_map = list(ind_agg_map)       ),     # Create aggregated U matrix     U_agg = matsbyname::sum_byname(.data[[\"U_feed_agg\"]], .data[[\"U_EIOU_agg\"]]),     # Create aggregated r_EIOU matrix     r_EIOU_agg = matsbyname::quotient_byname(.data[[\"U_EIOU\"]], .data[[\"U\"]]) |>       matsbyname::replaceNaN_byname(),     # Aggregate V     V_agg = .data[[\"V\"]] |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Industry\",         inf_notation = TRUE,         notation = list(list(RCLabels::bracket_notation, RCLabels::arrow_notation)),       ) |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Product\",         inf_notation = FALSE,         notation = RCLabels::bracket_notation,         aggregation_map = list(prod_agg_map)       ),     # Aggregate Y     Y_agg = .data[[\"Y\"]] |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Product\",         inf_notation = FALSE,         notation = RCLabels::bracket_notation,         aggregation_map = list(prod_agg_map)       ) |>       matsbyname::aggregate_pieces_byname(         piece = \"noun\",         margin = \"Industry\",         inf_notation = TRUE,         notation = list(list(RCLabels::bracket_notation, RCLabels::arrow_notation)),         aggregation_map = list(ind_agg_map)       )   ) aggregated$R_agg[[1]] #>                         Biofuels Coal & coal products Electricity Heat #> Imports                        0                  225         458    0 #> Resources                  32367               243640       12823   30 #> Statistical differences        1                 6571           0    0 #> Stock changes                  0                  771           0    0 #>                         Natural gas Oil & oil products #> Imports                        3656              93392 #> Resources                    283514             392570 #> Statistical differences           1               7046 #> Stock changes                     0               5999 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\"  aggregated$U_feed_agg[[1]] #>                      Energy industry own use #> Biofuels                               32388 #> Coal & coal products                  433824 #> Electricity                            25646 #> Heat                                      60 #> Natural gas                           327540 #> Oil & oil products                    855297 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\"  aggregated$U_EIOU_agg[[1]] #>                      Energy industry own use #> Coal & coal products                    6473 #> Electricity                             3756 #> Natural gas                            37137 #> Oil & oil products                     35612 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\"  aggregated$U_agg[[1]] #>                      Energy industry own use #> Biofuels                               32388 #> Coal & coal products                  440297 #> Electricity                            29402 #> Heat                                      60 #> Natural gas                           364677 #> Oil & oil products                    890909 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\"  aggregated$V_agg[[1]] #>                                           Biofuels Coal & coal products #> Blast furnaces                                   0                 9500 #> Coal mines                                       0               243640 #> Coke ovens                                       0                46862 #> Gas works                                        0                 4365 #> Main activity producer electricity plants        0                    0 #> Manufacture                                  32367                    0 #> Natural gas extraction                           0                    0 #> Nuclear industry                                 0                    0 #> Oil extraction                                   0                    0 #> Oil refineries                                   0                    0 #> Patent fuel plants                               0                  489 #> Transfers                                        0                    0 #>                                           Electricity Heat Natural gas #> Blast furnaces                                   0.00    0           0 #> Coal mines                                       0.00    0           0 #> Coke ovens                                       0.00    0           0 #> Gas works                                        0.00    0           0 #> Main activity producer electricity plants    68712.48    0           0 #> Manufacture                                  12823.00   30           0 #> Natural gas extraction                           0.00    0      283514 #> Nuclear industry                                47.52    0           0 #> Oil extraction                                   0.00    0           0 #> Oil refineries                                   0.00    0           0 #> Patent fuel plants                               0.00    0           0 #> Transfers                                        0.00    0           0 #>                                           Oil & oil products #> Blast furnaces                                             0 #> Coal mines                                                 0 #> Coke ovens                                                 0 #> Gas works                                                  0 #> Main activity producer electricity plants                  0 #> Manufacture                                                0 #> Natural gas extraction                                     0 #> Nuclear industry                                           0 #> Oil extraction                                        392570 #> Oil refineries                                        439718 #> Patent fuel plants                                         0 #> Transfers                                              15901 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\"  aggregated$Y_agg[[1]] #>                      Agriculture, forestry, and fishing #> Biofuels                                              0 #> Coal & coal products                                  0 #> Electricity                                        2517 #> Natural gas                                           0 #> Oil & oil products                                 8250 #>                      Commercial and public services Exports #> Biofuels                                          0       0 #> Coal & coal products                          13883   21586 #> Electricity                                   11032      68 #> Natural gas                                   23955     265 #> Oil & oil products                            27606   10063 #>                      Exports to World aviation bunkers #> Biofuels                                             0 #> Coal & coal products                                 0 #> Electricity                                          0 #> Natural gas                                          0 #> Oil & oil products                                1895 #>                      Final consumption not elsewhere specified Industry Losses #> Biofuels                                                 15666    16681      0 #> Coal & coal products                                         0    65298      0 #> Electricity                                                  0    27859   6237 #> Natural gas                                                  0    94743  11090 #> Oil & oil products                                        9886    74409      0 #>                      Non-energy use Residential Statistical differences #> Biofuels                          0           0                       0 #> Coal & coal products              0       11960                    1530 #> Electricity                       0       17283                       0 #> Natural gas                       0       72862                       0 #> Oil & oil products            40462       45566                       4 #>                      Stock changes Transport #> Biofuels                         0         0 #> Coal & coal products            33      1476 #> Electricity                      0       466 #> Natural gas                   3093         0 #> Oil & oil products            1618    236528 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/building_aggregation_maps.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Building Aggregation Maps From Row and Column Labels","text":"judicious use several helpful functions (Recca::get_all_products_and_industries(), matsbyname::agg_table_to_agg_map(), matsbyname::aggregate_pieces_byname()), one can aggregate PSUT matrices arranged matsindf data frame.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Following a Product Through an Energy Conversion Chain","text":"can helpful follow product energy conversion chain (ECC) CL-PFU database trace production consumption. enables comparison raw data enhance understanding way PSUT framework represents IEA data. provide example, vignette follows one product (Naphtha) USA 2013 2014. Comparison two years demonstrates interesting feature CL-PFU database.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"evaluate-a-single-year","dir":"Articles","previous_headings":"","what":"Evaluate a single year","title":"Following a Product Through an Energy Conversion Chain","text":"work CL-PFU database vignette, sure access several packages. matsbyname package especially useful isolating particular product energy conversion chain. load data 2013 2014 CL-PFU Database, one can use following code:","code":"library(dplyr) library(knitr) library(matsbyname) library(pins) pinboard <- pins::board_folder(\"~/Dropbox/Fellowship 1960-2015 PFU database/OutputData/PipelineReleases\") df <- pinboard %>%   # Load USA data from v0.9 of the database   pins::pin_read(name = \"psut_usa\", version = \"20230220T223535Z-35e3e\") %>%    # Isolate data of interest   dplyr::filter(Year %in% c(2013, 2014),                  Energy.type == \"E\",                 Last.stage == \"Final\",                  IEAMW == \"IEA\") dplyr::glimpse(df) #> Rows: 2 #> Columns: 14 #> $ Country     <chr> \"USA\", \"USA\" #> $ Method      <chr> \"PCM\", \"PCM\" #> $ Energy.type <chr> \"E\", \"E\" #> $ Last.stage  <chr> \"Final\", \"Final\" #> $ Year        <dbl> 2013, 2014 #> $ IEAMW       <chr> \"IEA\", \"IEA\" #> $ Y           <list> <<matrix[41 x 64]>>, <<matrix[42 x 77]>> #> $ S_units     <list> <<matrix[70 x 1]>>, <<matrix[70 x 1]>> #> $ R           <list> <<matrix[73 x 58]>>, <<matrix[62 x 54]>> #> $ U           <list> <<matrix[64 x 26]>>, <<matrix[66 x 26]>> #> $ U_feed      <list> <<matrix[59 x 26]>>, <<matrix[58 x 26]>> #> $ U_EIOU      <list> <<matrix[18 x 8]>>, <<matrix[21 x 8]>> #> $ r_EIOU      <list> <<matrix[64 x 26]>>, <<matrix[66 x 26]>> #> $ V           <list> <<matrix[27 x 46]>>, <<matrix[27 x 47]>>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"interrogate-psut-matrices","dir":"Articles","previous_headings":"","what":"Interrogate PSUT matrices","title":"Following a Product Through an Energy Conversion Chain","text":"Next, interrogate PSUT matrices (R, Y, V, Y) Naphtha. (Note row 1 contains 2013 data row 2 contains 2014 data.) Along way, compare original IEA World Extended Energy Balance (WEEB) data. begin 2013 data. R matrix contains exogenous inputs Naphtha ECC. 2013, “Imports” releases stock (“Stock changes”) Naphtha. IEA data show information. However, use (U) Naphtha energy industry 2013. IEA EWEB data show . (1 ktoe Naphtha used 2014, see later.) Oil refineries make (V) Naphtha. product Naphtha found V matrix comes “Oil refineries” row IEA’s EWEB data. Naphtha consumed final demand (Y) Non-energy use industry/transformation/energy. , consumption Naphtha non-energy uses evident IEA’s EWEB data.","code":"R_supply_2013 <- df$R[[1]] %>%    matsbyname::select_rows_byname(\"Naphtha\") %>%   matsbyname::clean_byname() R_supply_2013 #>                            Naphtha #> Imports [of Naphtha]          1392 #> Stock changes [of Naphtha]      34 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" U_consumption_2013 <- df$U[[1]] %>%    matsbyname::select_rows_byname(\"Naphtha\") %>%   matsbyname::clean_byname() U_consumption_2013 #> NULL V_supply_2013 <- df$V[[1]] %>%    matsbyname::select_cols_byname(\"Naphtha\") %>%   matsbyname::clean_byname() V_supply_2013 #>                Naphtha #> Oil refineries   11007 #> attr(,\"rowtype\") #> [1] \"Industry\" #> attr(,\"coltype\") #> [1] \"Product\" Y_consumption_2013 <- df$Y[[1]] %>%    matsbyname::select_rows_byname(\"Naphtha\") %>%   matsbyname::clean_byname() Y_consumption_2013 #>         Non-energy use industry/transformation/energy #> Naphtha                                         12433 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"verify-overall-energy-balance","dir":"Articles","previous_headings":"","what":"Verify overall energy balance","title":"Following a Product Through an Energy Conversion Chain","text":"can see Naphtha balanced, expected, 2013. fact, energy balance verified products CL-PFU database time construction. Small corrections made, necessary (< 5 ktoe) placed “Statistical differences” category. Thus, energy balance guaranteed every energy carrier CL-PFU database.","code":"supply_2013 <- matsbyname::sumall_byname(R_supply_2013) +    as.numeric(V_supply_2013) supply_2013 #> [1] 12433 consumption_2013 <- as.numeric(Y_consumption_2013) consumption_2013 #> [1] 12433 # This difference should be exactly 0, and it is. supply_2013 - consumption_2013 #> [1] 0"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"compare-across-years","dir":"Articles","previous_headings":"","what":"Compare across years","title":"Following a Product Through an Energy Conversion Chain","text":"data 2013 interesting feature: U matrix empty Naphtha, Naphtha used transformation processes. However, 2014, energy industry used 1 ktoe Naphtha. CL-PFU database contains three U matrices (U , U_feed, U_EIOU) related matrix (r_EIOU). can use U_feed U_EIOU learn purpose 1 ktoe Naphtha consumption energy industry 2014. see use Naphtha energy industry self-consumption Oil refineries. Incidentally, always true U = U_feed + U_eiou. U_feed U_EIOU matrices give split feedstocks Energy industry use. matrix r_EIOU gives element-wise ratio U_EIOU U.","code":"# Row 2 contains data for 2014. df$U[[2]] %>%    matsbyname::select_rows_byname(\"Naphtha\") %>%   matsbyname::clean_byname() #>         Oil refineries #> Naphtha              1 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\" df$U_feed[[2]] |>    matsbyname::select_rows_byname(\"Naphtha\") |>    matsbyname::clean_byname() #> NULL  df$U_EIOU[[2]] |>    matsbyname::select_rows_byname(\"Naphtha\") |>    matsbyname::clean_byname() #>         Oil refineries #> Naphtha              1 #> attr(,\"rowtype\") #> [1] \"Product\" #> attr(,\"coltype\") #> [1] \"Industry\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/articles/following_a_product.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Following a Product Through an Energy Conversion Chain","text":"judicious use functions matsbyname packages, analysts can isolate single energy carrier follow Imports, Stock changes, use, production, final demand CL-PFU database. Following single energy carrier PFU Database comparing raw IEA data can lead better understanding IEA data mapped PSUT matrices.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthew Heun. Author, maintainer. Emmanuel Aramendia. Author. Zeke Marshall. Author.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Matthew Kuperus Heun (2024). Functions Workflows Primary-Final-Useful Societal Exergy Analysis Within PSUT Framework. R package version 0.1.8. https://doi.org/10.5281/zenodo.5228375","code":"@Manual{,   title = {PFUDatabase: Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework},   author = {Matthew Kuperus Heun and Zeke Marshall},   year = {2024},   note = {R package version 0.1.8},   url = {https://doi.org/10.5281/zenodo.5228375}, }"},{"path":[]},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"CL-PFU database uses many sources input data spanning hundreds data files. creating CL-PFU database, matrices created according PSUT framework, final energy data extended useful stage, energy conversion chains converted exergy quantifications. way specify calculation steps needed. Furthermore, calculations take many hours complete, done stay done debugging. Calculation pipelines needed, ones clearly identify steps database creation ones can resumed needed. package (PFUPipeline) provides functions create several products CL-PFU database. primary objective PFUPipeline create data frames RUVY matrices matsindf format. targets pipeline provides helpful dependency management calculations.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"RStudio console, type","code":"library(targets)              # to load the targets package    tar_visnetwork()              # to see a directed acyclic graph of the calculations that will take place    tar_make_future(workers = 2)  # to execute the calculations (or `workers = 8`, if you have enough cores)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"accessing-targets","dir":"","previous_headings":"","what":"Accessing targets","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"list targets can found PFUPipeline::target_names. list target meanings can found ?PFUPipeline::target_names. targets::tar_read(<<target>>) pulls value target targets cache. (<<target>> unquoted symbol Specified.)","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"fresh-start","dir":"","previous_headings":"","what":"Fresh start","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"targets::tar_destroy() invalidates targets cache forces reanalysis everything. Reanalyzing everything may take .","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"more-information","dir":"","previous_headings":"","what":"More Information","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"information targets package, see targets manual. documentation PFUPipeline package, see https://EnergyEconomyDecoupling.github.io/PFUPipeline/.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"history","dir":"","previous_headings":"","what":"History","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"CL-PFU database supported EPSRC fellowship awarded Paul Brockway Leeds University. goal fellowship building world database country-specific primary, final, useful exergy 1960–2019.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Functions and Workflows for Primary-Final-Useful Societal Exergy Analysis Within the PSUT Framework","text":"Emmanuel Aramendia, University Leeds Paul Brockway, University Leeds Matthew Kuperus Heun, Calvin University Zeke Marshall, University Leeds","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/add_iea_mw_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"create combined energy conversion chain (ECC) containing IEA muscle work data, PSUT matrices ECC summed. function sums R, U, V, Y, U_feed, U_eiou matrices directly. also re-calculates r_eiou matrix.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/add_iea_mw_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"","code":"add_iea_mw_psut(   .iea_psut = NULL,   .mw_psut = NULL,   countries,   iea_suffix = \"_iea\",   mw_suffix = \"_mw\",   R = IEATools::psut_cols$R,   U = IEATools::psut_cols$U,   V = IEATools::psut_cols$V,   Y = IEATools::psut_cols$Y,   U_feed = IEATools::psut_cols$U_feed,   U_eiou = IEATools::psut_cols$U_eiou,   s_units = IEATools::psut_cols$s_units,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   r_eiou = IEATools::psut_cols$r_eiou )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/add_iea_mw_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":".iea_psut IEA PSUT data frame. .mw_psut muscle work PSUT data frame. countries countries analyzed. iea_suffix suffix IEA columns, used internally. Default \"_iea\". mw_suffix suffix muscle work columns, used internally. Default \"_mw\". R name column R matrices. Default IEATools::psut_cols$R. U name column U matrices. Default IEATools::psut_cols$U. V name column V matrices. Default IEATools::psut_cols$V. Y name column Y matrices. Default IEATools::psut_cols$Y. U_feed name column U_feed matrices. Default IEATools::psut_cols$U_feed. U_eiou name column U_eiou matrices. Default IEATools::psut_cols$U_eiou. s_units name column s_units matrices. Default IEATools::psut_cols$s_units. country name country column. Default IEATools$iea_cols$country. year name year column. Default IEATools$iea_cols$year. method name method column. Default IEATools$iea_cols$method. energy_type name energy type column. Default IEATools$iea_cols$energy_type. last_stage name last_stage column. Default IEATools$iea_cols$last_stage. r_eiou name r_eiou column. Default IEATools$iea_cols$r_eiou.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/add_iea_mw_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"data frame summed matrices.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/add_iea_mw_psut.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum IEA and muscle work ECC matrices — add_iea_mw_psut","text":"either iea_psut .mw_psut NULL, returned.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/aggcountries_mw_to_iea.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"function reads exemplar table containing countries country code country code associated territory IEA data recorded years 1960 - 2020. country defined territorial boundaries 2020 may energy statistics recorded number regions, number years.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/aggcountries_mw_to_iea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"","code":"aggcountries_mw_to_iea(   mw_df,   exemplar_table_path = PFUSetup::get_abs_paths()$exemplar_table_path,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   unit = IEATools::iea_cols$unit,   e_dot = IEATools::iea_cols$e_dot,   agg_code_col = PFUPipeline::exemplar_names$agg_code_col,   region_code = PFUPipeline::exemplar_names$region_code,   exemplar_country = PFUPipeline::exemplar_names$exemplar_country,   species = MWTools::mw_constants$species,   stage_col = MWTools::mw_constants$stage_col,   sector_col = MWTools::mw_constants$sector_col )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/aggcountries_mw_to_iea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate ILO and FAO country data into IEA country groupings — aggcountries_mw_to_iea","text":"mw_df data frame containing raw animal muscle work human muscle work data. Usually retrieved AMWPFUDataRaw HMWPFUDataRaw targets. exemplar_table_path See PFUSetup::get_abs_paths(). country, year, unit, e_dot See IEATools::iea_cols. agg_code_col, region_code, exemplar_country See PFUPipeline::exemplar_names. species, stage_col, sector_col See MWTools::mw_constants.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/all_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"All countries and selected country groups — all_countries","title":"All countries and selected country groups — all_countries","text":"individual countries selected country groups IEA's World Extended energy balances 2021.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/all_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All countries and selected country groups — all_countries","text":"","code":"all_countries"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/all_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"All countries and selected country groups — all_countries","text":"string list 166 entries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/all_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All countries and selected country groups — all_countries","text":"","code":"all_countries #> $afri #> [1] \"AFRI\" #>  #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $asia #> [1] \"ASIA\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $eurp #> [1] \"EURP\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mide #> [1] \"MIDE\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $samr #> [1] \"SAMR\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wrld #> [1] \"WRLD\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an allocation graph — alloc_graph","title":"Generate an allocation graph — alloc_graph","text":"Creates allocation graph completed allocation table, mostly likely created assemble_fu_allocation_tables() function.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an allocation graph — alloc_graph","text":"","code":"alloc_graph(   .df,   country,   ef_product,   destination,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an allocation graph — alloc_graph","text":".df data frame comprised completed final energy allocations. country country graph applies. ef_product final energy product graph applies. destination destination sector final energy product. year See IEATools::iea_cols. .values, machine, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an allocation graph — alloc_graph","text":"ggplot2 graph object.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an allocation graph — alloc_graph","text":"function called repeatedly alloc_plots_df(). country, ef_product, destination form title graph.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an allocation graph — alloc_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create allocation graphs in a data frame — alloc_plots_df","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"function adds column ggplot2 graphs completed allocation tables data frame. graphs stored list column named plots.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"","code":"alloc_plots_df(   .df,   countries,   data_col = \"Data\",   plots = \"Plots\",   country = IEATools::iea_cols$country,   ef_product = IEATools::template_cols$ef_product,   destination = IEATools::template_cols$destination,   quantity = IEATools::template_cols$quantity,   c_source = IEATools::template_cols$c_source,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create allocation graphs in a data frame — alloc_plots_df","text":".df completed allocation tables data frame. Default drake::readd(completed_allocation_tables_target, path = cache_path, character_only = TRUE). countries countries allocation plots created. data_col name output column containing nested data allocation graphs. Default \"Data\". plots name output column containing allocation graphs. Default \"Plots\". country See IEATools::iea_cols. ef_product, destination, quantity, c_source See IEATools::template_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed alloc_graph().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"data frame containing list column ggplot2 allocation graphs.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"data frame grouped variables needed create allocation graph, specifically country, ef_product, destination nested prior making graphs, namely machine, eu_product, quantity, year, .values, c_source, meaning one allocation graph constructed combination variables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/alloc_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create allocation graphs in a data frame — alloc_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Method, ~Energy.type, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Quantity, ~Eu.product, ~C.source,                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 7 #> # Groups:   Country, Method, Energy.type, Ef.product, Destination [2] #>   Country Method Energy.type Ef.product Destination Data             Plots  #>   <chr>   <chr>  <chr>       <chr>      <chr>       <list>           <list> #> 1 GHA     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>   #> 2 ZAF     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"function used drake workflow assemble completed final--useful efficiency tables given set incomplete efficiency tables. Information exemplar countries used complete incomplete final--useful efficiency tables. See examples construct exemplar_lists.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"","code":"assemble_eta_fu_tables(   incomplete_eta_fu_tables,   exemplar_lists,   completed_fu_allocation_tables,   countries,   years = NULL,   which_quantity = c(IEATools::template_cols$eta_fu),   country = IEATools::iea_cols$country,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   unit = IEATools::iea_cols$unit,   year = IEATools::iea_cols$year,   e_dot = IEATools::iea_cols$e_dot,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   c_source = IEATools::template_cols$c_source,   eta_fu_source = IEATools::template_cols$eta_fu_source,   e_dot_machine = IEATools::template_cols$e_dot_machine,   e_dot_machine_perc = IEATools::template_cols$e_dot_machine_perc,   quantity = IEATools::template_cols$quantity,   maximum_values = IEATools::template_cols$maximum_values,   e_dot_perc = IEATools::template_cols$e_dot_perc,   exemplars = PFUPipeline::exemplar_names$exemplars,   exemplar_tables = PFUPipeline::exemplar_names$exemplar_tables,   alloc_data = PFUPipeline::exemplar_names$alloc_data,   incomplete_eta_tables = PFUPipeline::exemplar_names$incomplete_eta_table,   complete_eta_tables = PFUPipeline::exemplar_names$complete_eta_table,   .values = IEATools::template_cols$.values )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"incomplete_eta_fu_tables incomplete data frame final--useful efficiencies Machines completed_fu_allocation_tables. exemplar_lists data frame containing country year columns along column ordered vectors strings telling countries considered exemplars country year row. completed_fu_allocation_tables data frame containing completed final--useful allocation data, typically result calling assemble_fu_allocation_tables. countries vector countries completed final--useful allocation tables assembled. years years analysis desired. Default NULL, meaning analyze years. which_quantity vector quantities completed eta_FU table. Default c(IEATools::template_cols$eta_fu, IEATools::template_cols$phi_u). Must one default values. country, method, energy_type, last_stage, year, unit, e_dot See IEATools::iea_cols. machine, eu_product, eta_fu, phi_u, c_source, eta_fu_source, e_dot_machine, e_dot_machine_perc, quantity, maximum_values, e_dot_perc, .values See IEATools::template_cols. exemplars, exemplar_tables, alloc_data, incomplete_eta_tables, complete_eta_tables See PFUPipeline::exemplar_names.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"tidy data frame containing completed final--useful efficiency tables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"Note function can accept tidy wide year data frames. return value tidy data frame. Note .values argument applies incomplete_eta_fu_tables completed_fu_allocation_tables. Callers ensure value columns data frames (incomplete_eta_fu_tables completed_fu_allocation_tables) named identically name passed .values argument. Note which_quantity argument accident history. one time, function also assembled tables phi.u (useful exergy--energy ratio) values. present, function assembles eta.fu (final--useful efficiency) tables, valid value which_quantity IEATools::template_cols$eta_fu.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_eta_fu_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed final-to-useful efficiency tables — assemble_eta_fu_tables","text":"","code":"# Make some incomplete efficiency tables for GHA by removing Wood cookstoves. # Information from the exemplar, ZAF, will supply efficiency for Wood cookstoves for GHA. incomplete_eta_fu_tables <- IEATools::load_eta_fu_data() %>%   dplyr::filter(! (Country == \"GHA\" & Machine == \"Wood cookstoves\")) # The rows for Wood cookstoves are missing. incomplete_eta_fu_tables %>%   dplyr::filter(Country == \"GHA\", Machine == \"Wood cookstoves\") #>  [1] Country        Method         Energy.type    Last.stage     Unit           #>  [6] Machine        Eu.product     Quantity       Maximum.values 1971           #> [11] 2000           #> <0 rows> (or 0-length row.names) # Set up exemplar list el <- tibble::tribble(   ~Country, ~Year, ~Exemplars,   \"GHA\", 1971, c(\"ZAF\"),   \"GHA\", 2000, c(\"ZAF\")) # Load FU allocation data. # An efficiency is needed for each machine in FU allocation data. fu_allocation_data <- IEATools::load_fu_allocation_data() # Assemble complete allocation tables completed <- assemble_eta_fu_tables(incomplete_eta_fu_tables = incomplete_eta_fu_tables,                                     exemplar_lists = el,                                     completed_fu_allocation_tables = fu_allocation_data,                                     countries = \"GHA\") # The missing rows have been picked up from the exemplar country, ZAF. completed %>%   dplyr::filter(Country == \"GHA\", Machine == \"Wood cookstoves\") #> # A tibble: 2 × 10 #>   Country Method Energy.type Last.stage Machine        Eu.product Quantity  Year #>   <chr>   <chr>  <chr>       <chr>      <chr>          <chr>      <chr>    <dbl> #> 1 GHA     PCM    E           Final      Wood cookstov… MTH.100.C  eta.fu    1971 #> 2 GHA     PCM    E           Final      Wood cookstov… MTH.100.C  eta.fu    2000 #> # ℹ 2 more variables: .values <dbl>, eta.fu.source <chr>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"function used drake workflow assemble completed final--useful allocation tables given set incomplete allocation tables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"","code":"assemble_fu_allocation_tables(   incomplete_allocation_tables,   exemplar_lists,   specified_iea_data,   countries,   years = NULL,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   exemplars = PFUPipeline::exemplar_names$exemplars,   exemplar_tables = PFUPipeline::exemplar_names$exemplar_tables,   iea_data = PFUPipeline::exemplar_names$iea_data,   incomplete_alloc_tables = PFUPipeline::exemplar_names$incomplete_alloc_table,   complete_alloc_tables = PFUPipeline::exemplar_names$complete_alloc_table )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"incomplete_allocation_tables data frame containing (potentially) incomplete final--useful allocation tables. data frame may tidy wide years. exemplar_lists data frame containing country year columns along column ordered vectors strings telling countries considered exemplars country year row. specified_iea_data data frame containing specified IEA data. countries vector countries completed final--useful allocation tables assembled. years years analysis desired. Default NULL, meaning analyze years. country, year See IEATools::iea_cols. exemplars, exemplar_tables, iea_data, incomplete_alloc_tables, complete_alloc_tables See PFUPipeline::exemplar_names.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"tidy data frame containing completed final--useful allocation tables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"Note function can accept tidy wide year data frames. return value tidy data frame. Information exemplar countries used complete incomplete final--useful efficiency tables. See examples construct exemplar_lists.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_fu_allocation_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed final-to-useful allocation tables — assemble_fu_allocation_tables","text":"","code":"# Load final-to-useful allocation tables, but eliminate one category of consumption, # Residential consumption of Primary solid biofuels, # which will be filled by the exemplar for GHA, ZAF. incomplete_fu_allocation_tables <- IEATools::load_fu_allocation_data() %>%   dplyr::filter(! (Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\")) # Show that those rows are gone. incomplete_fu_allocation_tables %>%   dplyr::filter(Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #>  [1] Country                Method                 Energy.type            #>  [4] Last.stage             Ledger.side            Flow.aggregation.point #>  [7] Unit                   Ef.product             Machine                #> [10] Eu.product             Destination            Quantity               #> [13] Maximum.values         1971                   2000                   #> <0 rows> (or 0-length row.names) # But the missing rows of GHA are present in allocation data for ZAF. incomplete_fu_allocation_tables %>%   dplyr::filter(Country == \"ZAF\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #>   Country Method Energy.type Last.stage Ledger.side Flow.aggregation.point Unit #> 1     ZAF    PCM           E      Final Consumption                  Other ktoe #> 2     ZAF    PCM           E      Final Consumption                  Other ktoe #> 3     ZAF    PCM           E      Final Consumption                  Other ktoe #> 4     ZAF    PCM           E      Final Consumption                  Other ktoe #> 5     ZAF    PCM           E      Final Consumption                  Other ktoe #>               Ef.product         Machine Eu.product Destination  Quantity #> 1 Primary solid biofuels            <NA>       <NA> Residential     E.dot #> 2 Primary solid biofuels            <NA>       <NA> Residential E.dot [%] #> 3 Primary solid biofuels Wood cookstoves  MTH.100.C Residential   C_1 [%] #> 4 Primary solid biofuels   Wood furnaces   LTH.20.C Residential   C_2 [%] #> 5 Primary solid biofuels            <NA>       <NA> Residential   C_3 [%] #>   Maximum.values         1971         2000 #> 1   5574.9498000 3869.3035000 5574.9498000 #> 2      0.1198823    0.1198823    0.1139165 #> 3             NA    0.5000000    0.5000000 #> 4             NA    0.5000000    0.5000000 #> 5             NA           NA           NA # Set up exemplar list el <- tibble::tribble(   ~Country, ~Year, ~Exemplars,   \"GHA\", 1971, c(\"ZAF\"),   \"GHA\", 2000, c(\"ZAF\")) el #> # A tibble: 2 × 3 #>   Country  Year Exemplars #>   <chr>   <dbl> <chr>     #> 1 GHA      1971 ZAF       #> 2 GHA      2000 ZAF       # Load IEA data iea_data <- IEATools::load_tidy_iea_df() %>%   IEATools::specify_all() # Assemble complete allocation tables completed <- assemble_fu_allocation_tables(incomplete_allocation_tables =                                              incomplete_fu_allocation_tables,                                            exemplar_lists = el,                                            specified_iea_data = iea_data,                                            countries = \"GHA\") # Missing data for GHA has been picked up from ZAF. completed %>%   dplyr::filter(Country == \"GHA\" & Ef.product == \"Primary solid biofuels\" &     Destination == \"Residential\") #> # A tibble: 4 × 14 #>   Country Method Energy.type Last.stage Ledger.side Flow.aggregation.point #>   <chr>   <chr>  <chr>       <chr>      <chr>       <chr>                  #> 1 GHA     PCM    E           Final      Consumption Other                  #> 2 GHA     PCM    E           Final      Consumption Other                  #> 3 GHA     PCM    E           Final      Consumption Other                  #> 4 GHA     PCM    E           Final      Consumption Other                  #> # ℹ 8 more variables: Ef.product <chr>, Machine <chr>, Eu.product <chr>, #> #   Destination <chr>, Quantity <chr>, Year <dbl>, .values <dbl>, #> #   C.source <chr>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"function used drake workflow assemble completed phi (exergy--energy ratio) tables given set phi tables read machine data files phi constants table. algorithm gives priority order: phi values incomplete_phi_u_table argument phi values climatic temperatures phi values phi_constants_table argument","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"","code":"assemble_phi_u_tables(   incomplete_phi_u_table,   phi_constants_table,   completed_efficiency_table = NULL,   countries,   years = NULL,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   product = IEATools::iea_cols$product,   machine = IEATools::template_cols$machine,   quantity = IEATools::template_cols$quantity,   phi_u = IEATools::template_cols$phi_u,   .values = IEATools::template_cols$.values,   eu_product = IEATools::template_cols$eu_product,   eta_fu_source = IEATools::template_cols$eta_fu_source,   phi_colname = IEATools::phi_constants_names$phi_colname,   phi_source_colname = IEATools::phi_constants_names$phi_source_colname,   is_useful = IEATools::phi_constants_names$is_useful_colname,   eta_fu_tables = PFUPipeline::phi_sources$eta_fu_tables,   phi_constants = PFUPipeline::phi_sources$phi_constants )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"incomplete_phi_u_table data frame phi values read machine efficiency phi data files. data frame can \"incomplete,\" .e., can missing phi values. phi values phi_constants_table used instead. phi_constants_table data frame constant phi values reasonable default values energy products. completed_efficiency_table data frame containing completed efficiency tables. data frame identifies useful products need phi values. Default NULL, meaning missing (NA) values incomplete_phi_u_table completed. countries vector countries completed phi tables assembled. years years analysis desired. Default NULL, meaning analyze years. country, year, product See IEATools::iea_cols. machine, quantity, phi_u, .values, eu_product, eta_fu_source See IEATools::template_cols. phi_colname, phi_source_colname, is_useful See IEATools::phi_constants_names. eta_fu_tables, phi_constants See PFUPipeline::phi_sources.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"data frame phi values every combination country, year, machine, destination, etc.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"Note needed phi values taken completed_efficiency_table (NULL). completed_efficiency_table NULL, needed phi values taken incomplete_phi_u_table, meaning empty (NA) phi values obtained climatic temperatures phi_constants_table.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/assemble_phi_u_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble completed phi (exergy-to-energy ratio) tables — assemble_phi_u_tables","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following object is masked from ‘package:testthat’: #>  #>     matches #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(IEATools) library(magrittr) #>  #> Attaching package: ‘magrittr’ #> The following objects are masked from ‘package:testthat’: #>  #>     equals, is_less_than, not phi_constants_table <- IEATools::load_phi_constants_table() # Load a phi_u_table. phi_table <- IEATools::load_eta_fu_data() %>%   # Convert to tidy format.   dplyr::mutate(     \"{IEATools::template_cols$maximum_values}\" := NULL,     \"{IEATools::iea_cols$unit}\" := NULL   ) %>%   tidyr::pivot_longer(cols = IEATools::year_cols(.),                       names_to = IEATools::iea_cols$year,                       values_to = IEATools::template_cols$.values) %>%   # Convert to a table of phi values only   dplyr::filter(.data[[IEATools::template_cols$quantity]] == IEATools::template_cols$phi_u) # Set a value to NA (Charcoal stoves, MTH.100.C, GHA, 1971) in the phi table.   incomplete_phi_table <- phi_table %>%     dplyr::mutate(       \"{IEATools::template_cols$.values}\" := dplyr::case_when(         .data[[IEATools::iea_cols$country]] == \"GHA\" &         .data[[IEATools::iea_cols$year]] == 1971 &         .data[[IEATools::template_cols$machine]] == \"Charcoal stoves\" ~ NA_real_,         TRUE ~ .data[[IEATools::template_cols$.values]]       )     ) # Run through the assemble_phi_u_tables function completed_phi_u_table <- assemble_phi_u_tables(incomplete_phi_table,                                                phi_constants_table,                                                countries = \"GHA\") # Show that Charcoal stoves was filled completed_phi_u_table %>%   dplyr::filter(.data[[IEATools::template_cols$machine]] == \"Charcoal stoves\") #> # A tibble: 2 × 10 #>   Country Method Energy.type Last.stage Machine        Eu.product Quantity Year  #>   <chr>   <chr>  <chr>       <chr>      <chr>          <chr>      <chr>    <chr> #> 1 GHA     PCM    E           Final      Charcoal stov… MTH.100.C  phi.u    2000  #> 2 GHA     PCM    E           Final      Charcoal stov… MTH.100.C  phi.u    1971  #> # ℹ 2 more variables: .values <dbl>, phi.source <chr>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/build_psut_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the final PSUT data frame — build_psut_dataframe","title":"Build the final PSUT data frame — build_psut_dataframe","text":"Combines PSUT descriptions based IEA data exclusively, muscle work data exclusively, summed IEA MW data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/build_psut_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the final PSUT data frame — build_psut_dataframe","text":"","code":"build_psut_dataframe(   psutiea = NULL,   psutmw = NULL,   psutieamw = NULL,   country_colname = IEATools::iea_cols$country,   method_colname = IEATools::iea_cols$method,   energy_type_colname = IEATools::iea_cols$energy_type,   last_stage_colname = IEATools::iea_cols$last_stage,   year_colname = IEATools::iea_cols$year,   ieamw_colname = PFUPipeline::ieamw_cols$ieamw,   R_colname = IEATools::psut_cols$R,   U_colname = IEATools::psut_cols$U,   U_feed_colname = IEATools::psut_cols$U_feed,   U_eiou_colname = IEATools::psut_cols$U_eiou,   r_eiou_colname = IEATools::psut_cols$r_eiou,   V_colname = IEATools::psut_cols$V,   Y_colname = IEATools::psut_cols$Y,   S_units_colname = IEATools::psut_cols$s_units,   iea = PFUPipeline::ieamw_cols$iea,   mw = PFUPipeline::ieamw_cols$mw,   both = PFUPipeline::ieamw_cols$both )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/build_psut_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the final PSUT data frame — build_psut_dataframe","text":"psutiea PSUT data frame IEA data. Default NULL. psutmw PSUT data frame muscle work data. Default NULL. psutieamw PSUT data frame combined IEA MW data. Default NULL. country_colname, method_colname, energy_type_colname, last_stage_colname, year_colname Column names. See IEATools::iea_cols defaults. ieamw_colname name column identifies whether data IEA, muscle work (MW) . Default PFUPipeline::ieamw_cols$ieamw. R_colname, U_colname, U_feed_colname, U_eiou_colname, r_eiou_colname, V_colname, Y_colname, S_units_colname Names matrix columns. See IEATools::psut_cols. iea string identifies ECC data IEA . Default PFUPipeline::ieamw_cols$iea. mw string identifies ECC data muscle work . Default PFUPipeline::ieamw_cols$mw. string identifies ECC data IEA muscle work. Default PFUPipeline::ieamw_cols. Default PFUPipeline::ieamw_cols$.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/build_psut_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build the final PSUT data frame — build_psut_dataframe","text":"data frame PSUTIEA, PSUTMW, PSUTIEAMW  rbind()ed together, new column (IEAMW_colname) distinguishes among .","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add allocation matrices to a data frame — calc_C_mats","title":"Add allocation matrices to a data frame — calc_C_mats","text":"function adds allocation matrices (C_Y C_EIOU) previously-created CompletedAllocationTables target.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add allocation matrices to a data frame — calc_C_mats","text":"","code":"calc_C_mats(   completed_allocation_tables,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   c_source = IEATools::template_cols$c_source,   .values = IEATools::template_cols$.values,   C_Y = IEATools::template_cols$C_Y,   C_EIOU = IEATools::template_cols$C_eiou )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add allocation matrices to a data frame — calc_C_mats","text":"completed_allocation_tables completed allocation tables allocation (C) matrices created. data frame likely CompletedAllocationTables target. countries countries C matrices formed. matrix_class type matrix produced. One \"matrix\" (default sparse) \"Matrix\" (may sparse). country, year See IEATools::iea_cols. c_source, .values, C_Y, C_EIOU See IEATools::template_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add allocation matrices to a data frame — calc_C_mats","text":"data frame C_Y C_EIOU columns containing allocation matrices.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the aggregated C matrices — calc_C_mats_agg","title":"Calculates the aggregated C matrices — calc_C_mats_agg","text":"Calculates aggregated C matrices","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the aggregated C matrices — calc_C_mats_agg","text":"","code":"calc_C_mats_agg(   C_mats,   psut_iea,   C_EIOU = \"C_EIOU\",   C_Y = \"C_Y\",   Y = \"Y\",   U_EIOU = \"U_EIOU\",   C_EIOU_agg = \"C_EIOU_agg\",   C_Y_agg = \"C_Y_agg\",   C_EIOU_Y_agg = \"C_EIOU_Y_agg\",   country = IEATools::iea_cols$country,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   year = IEATools::iea_cols$year )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the aggregated C matrices — calc_C_mats_agg","text":"C_mats data frame containing C matrices. psut_iea data frame containing IEA data final stage, energy terms, PSUT format. C_EIOU name column containing C_EIOU matrix input data frame. C_Y name column containing C_Y matrix input data frame. Y name column containing Y matrix input data frame. U_EIOU name column containing U_EIOU matrix input data frame. C_EIOU_agg name column containing C_EIOU aggregated matrix output data frame. C_Y_agg name column containing C_Y aggregated matrix output data frame. C_EIOU_Y_agg name column containing C_EIOU_Y aggregated matrix output data frame. country, method, energy_type, last_stage, year See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_C_mats_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the aggregated C matrices — calc_C_mats_agg","text":"data frame containing aggregated C matrices EIOU, Y EIOU Y together.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eloss_exiobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the final energy to energy losses multipliers — calc_Ef_to_Eloss_exiobase","title":"Calculates the final energy to energy losses multipliers — calc_Ef_to_Eloss_exiobase","text":"Calculates final energy energy losses multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eloss_exiobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the final energy to energy losses multipliers — calc_Ef_to_Eloss_exiobase","text":"","code":"calc_Ef_to_Eloss_exiobase(ExiobaseEftoEuMultipliers_df)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eloss_exiobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the final energy to energy losses multipliers — calc_Ef_to_Eloss_exiobase","text":"ExiobaseEftoEuMultipliers_df data frame final energy useful energy multipliers previously calculated","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eloss_exiobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the final energy to energy losses multipliers — calc_Ef_to_Eloss_exiobase","text":"data frame final energy energy losses multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eu_exiobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the final energy to useful energy multipliers — calc_Ef_to_Eu_exiobase","title":"Calculates the final energy to useful energy multipliers — calc_Ef_to_Eu_exiobase","text":"Calculates final energy useful energy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eu_exiobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the final energy to useful energy multipliers — calc_Ef_to_Eu_exiobase","text":"","code":"calc_Ef_to_Eu_exiobase(   eta_fu_Y_EIOU_mats,   eta_fu_Y_EIOU_agg,   years_exiobase,   full_list_exiobase_flows,   country_concordance_table_df,   useful_energy_flow = \"Useful.energy.flow\",   exiobase_flow = \"Exiobase.Flow\",   pfu_code = \"PFU.code\",   pfu_flow = \"PFU.flow\",   iea_country_name = \"IEA.country.name\",   iea_country_name_accented = \"IEA.name.accented\",   phi = \"phi\",   matnames = \"matnames\",   colnames = \"colnames\",   matvals = \"matvals\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   energy_type_E = IEATools::energy_types$e,   country = IEATools::iea_cols$country,   product = IEATools::iea_cols$product,   year = IEATools::iea_cols$year,   flow = IEATools::iea_cols$flow,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   eta_p_eiou = \"eta_p_eiou\",   eta_p_eiou_y = \"eta_p_eiou_y\",   eta_fu_Y_E = \"eta_fu_Y_E\",   eta_fu_EIOU_E = \"eta_fu_EIOU_E\",   eta = \"eta\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eu_exiobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the final energy to useful energy multipliers — calc_Ef_to_Eu_exiobase","text":"eta_fu_Y_EIOU_mats input data frame containing matrices efficiencies final demand sector energy industry eta_fu_Y_EIOU_agg input data frame containing matrices economy-wide efficiencies energy product years_exiobase years coefficients provided Exiobase team full_list_exiobase_flows full list energy flows used Exiobase pipeline led KR country_concordance_table_df data frame containing country concordance table useful_energy_flow name column stating whether flow final energy flow exiobase_flow name column stating name Exiobase flow pfu_code name column containing PFU country name pfu_flow name column containing PFU flow names iea_country_name name column containing IEA country name iea_country_name_accented name column containing IEA country name accents phi name column containing phi values matnames name column containing matrices names unpacking matrices colnames name column containing column names unpacking matrices matvals name column containing matrices values unpacking matrices rowtypes name column containing matrices row types names unpacking matrices coltypes name column containing matrices column types unpacking matrices energy_type_E letter standing energy energy type. country, year, product, flow, method, energy_type, last_stage See IEATools::iea_cols. eta_p_eiou name column containing efficiencies products used EIOU eta_p_eiou_y name column containing efficiencies products used final demand. eta_fu_Y_E name column containing efficiencies products used part final demand. eta_fu_EIOU_E name column containing efficiencies products used part EIOU matrix. eta name column containing efficiencies.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Eu_exiobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the final energy to useful energy multipliers — calc_Ef_to_Eu_exiobase","text":"dataframe final energy useful energy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xf_exiobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the final energy to final exergy multipliers — calc_Ef_to_Xf_exiobase","title":"Calculates the final energy to final exergy multipliers — calc_Ef_to_Xf_exiobase","text":"Calculates final energy final exergy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xf_exiobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the final energy to final exergy multipliers — calc_Ef_to_Xf_exiobase","text":"","code":"calc_Ef_to_Xf_exiobase(   phi_vecs,   years_exiobase,   full_list_exiobase_flows,   country_concordance_table_df,   final_energy_flow = \"Final.energy.flow\",   exiobase_flow = \"Exiobase.Flow\",   pfu_code = \"PFU.code\",   iea_country_name = \"IEA.country.name\",   iea_country_name_accented = \"IEA.name.accented\",   phi = \"phi\",   matnames = \"matnames\",   colnames = \"colnames\",   matvals = \"matvals\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   country = IEATools::iea_cols$country,   product = IEATools::iea_cols$product,   year = IEATools::iea_cols$year,   flow = IEATools::iea_cols$flow )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xf_exiobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the final energy to final exergy multipliers — calc_Ef_to_Xf_exiobase","text":"phi_vecs data frame phi (exergy--energy ratio) coefficients. years_exiobase years coefficients provided Exiobase team full_list_exiobase_flows full list energy flows used Exiobase pipeline led KR country_concordance_table_df data frame containing country concordance table final_energy_flow name column stating whether flow final energy flow exiobase_flow name column stating name Exiobase flow pfu_code name column containing PFU country name iea_country_name name column containing IEA country name iea_country_name_accented name column containing IEA country name accents phi name column containing phi values matnames name column containing matrices names unpacking matrices colnames name column containing column names unpacking matrices matvals name column containing matrices values unpacking matrices rowtypes name column containing matrices row types names unpacking matrices coltypes name column containing matrices column types unpacking matrices country, year, product, flow See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xf_exiobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the final energy to final exergy multipliers — calc_Ef_to_Xf_exiobase","text":"data frame final energy final exergy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xloss_exiobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the final energy to exergy losses multipliers — calc_Ef_to_Xloss_exiobase","title":"Calculates the final energy to exergy losses multipliers — calc_Ef_to_Xloss_exiobase","text":"Calculates final energy exergy losses multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xloss_exiobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the final energy to exergy losses multipliers — calc_Ef_to_Xloss_exiobase","text":"","code":"calc_Ef_to_Xloss_exiobase(ExiobaseEftoXuMultipliers_df)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xloss_exiobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the final energy to exergy losses multipliers — calc_Ef_to_Xloss_exiobase","text":"ExiobaseEftoXuMultipliers_df data frame final energy useful exergy multipliers previously calculated","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xloss_exiobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the final energy to exergy losses multipliers — calc_Ef_to_Xloss_exiobase","text":"data frame final energy exergy losses multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xu_exiobase.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the final energy to useful exergy multipliers — calc_Ef_to_Xu_exiobase","title":"Calculates the final energy to useful exergy multipliers — calc_Ef_to_Xu_exiobase","text":"Calculates final energy useful exergy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xu_exiobase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the final energy to useful exergy multipliers — calc_Ef_to_Xu_exiobase","text":"","code":"calc_Ef_to_Xu_exiobase(   EtafuYEIOU_mats,   phi_vecs,   eta_fu_phi_Y_EIOU_agg,   years_exiobase,   full_list_exiobase_flows,   country_concordance_table_df,   useful_energy_flow = \"Useful.energy.flow\",   exiobase_flow = \"Exiobase.Flow\",   pfu_code = \"PFU.code\",   pfu_flow = \"PFU.flow\",   iea_country_name = \"IEA.country.name\",   iea_country_name_accented = \"IEA.name.accented\",   phi = \"phi\",   matnames = \"matnames\",   colnames = \"colnames\",   matvals = \"matvals\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\",   energy_type_E = IEATools::energy_types$e,   country = IEATools::iea_cols$country,   product = IEATools::iea_cols$product,   year = IEATools::iea_cols$year,   flow = IEATools::iea_cols$flow,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   eta_p_eiou = \"eta_p_eiou\",   eta_p_eiou_y = \"eta_p_eiou_y\",   eta_fu_Y_E = \"eta_fu_Y_E\",   eta_fu_EIOU_E = \"eta_fu_EIOU_E\",   eta_fu_Y_X = \"eta_fu_Y_X\",   eta_fu_EIOU_X = \"eta_fu_EIOU_X\",   eta_phi_p_eiou = \"eta_phi_p_eiou\",   eta_phi_p_eiou_y = \"eta_phi_p_eiou_y\",   phi_eta_X = \"phi_eta_X\",   eta = \"eta\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xu_exiobase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the final energy to useful exergy multipliers — calc_Ef_to_Xu_exiobase","text":"EtafuYEIOU_mats input data frame containing matrices efficiencies final demand sector energy industry phi_vecs data frame phi (exergy--energy ratio) coefficients. eta_fu_phi_Y_EIOU_agg data frame containing matrices economy-wide efficiencies time phi values energy product years_exiobase years coefficients provided Exiobase team full_list_exiobase_flows full list energy flows used Exiobase pipeline led KR country_concordance_table_df data frame containing country concordance table useful_energy_flow name column stating whether flow final energy flow exiobase_flow name column stating name Exiobase flow pfu_code name column containing PFU country name pfu_flow name column containing PFU flow names iea_country_name name column containing IEA country name iea_country_name_accented name column containing IEA country name accents phi name column containing phi values matnames name column containing matrices names unpacking matrices colnames name column containing column names unpacking matrices matvals name column containing matrices values unpacking matrices rowtypes name column containing matrices row types names unpacking matrices coltypes name column containing matrices column types unpacking matrices energy_type_E letter standing energy energy type. country, year, product, flow, method, energy_type, last_stage See IEATools::iea_cols. eta_p_eiou name column containing efficiencies. eta_p_eiou_y name column containing efficiencies products used part final demand eta_fu_Y_E name column containing efficiencies products used part final demand. eta_fu_EIOU_E name column containing efficiencies products used part EIOU matrix. eta_fu_Y_X name column containing exergy efficiencies products used part final demand. eta_fu_EIOU_X name column containing exergy efficiencies products used part EIOU. eta_phi_p_eiou name column containing efficiency values multiplied phi values products used EIOU. eta_phi_p_eiou_y name column containing efficiency values multiplied phi values products used economy-wide. phi_eta_X name column containing efficiencies, multiplied phi values, products used part EIOU matrix. eta name column containing efficiencies.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_Ef_to_Xu_exiobase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the final energy to useful exergy multipliers — calc_Ef_to_Xu_exiobase","text":"data frame final energy useful exergy multipliers","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_eff_phi_Y_EIOU_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the average FU energy efficiency times phi value — calc_eta_fu_eff_phi_Y_EIOU_agg","title":"Calculates the average FU energy efficiency times phi value — calc_eta_fu_eff_phi_Y_EIOU_agg","text":"Calculates average FU energy efficiency times phi value","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_eff_phi_Y_EIOU_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the average FU energy efficiency times phi value — calc_eta_fu_eff_phi_Y_EIOU_agg","text":"","code":"calc_eta_fu_eff_phi_Y_EIOU_agg(   C_mats_agg,   eta_fu_vecs,   phi_vecs,   non_energy_use_machine = \"Non-energy consumption -> NEU\",   eta.fu = \"eta.fu\",   C_EIOU_agg = \"C_EIOU_agg\",   C_Y_agg = \"C_Y_agg\",   C_EIOU_Y_agg = \"C_EIOU_Y_agg\",   C_EIOU_agg_excl_NEU = \"C_EIOU_agg_excl_NEU\",   C_Y_agg_excl_NEU = \"C_Y_agg_excl_NEU\",   C_EIOU_Y_agg_excl_NEU = \"C_EIOU_Y_agg_excl_NEU\",   eta_phi_p_eiou = \"eta_phi_p_eiou\",   eta_phi_p_y = \"eta_phi_p_y\",   eta_phi_p_eiou_y = \"eta_phi_p_eiou_y\",   phi = \"phi\",   country = IEATools::iea_cols$country,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   year = IEATools::iea_cols$year,   product = IEATools::iea_cols$product )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_eff_phi_Y_EIOU_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the average FU energy efficiency times phi value — calc_eta_fu_eff_phi_Y_EIOU_agg","text":"C_mats_agg data frame containing aggregated C matrices. eta_fu_vecs data frame containing efficiency vectors. phi_vecs data frame containing phi vectors non_energy_use_machine character string non-energy use machine needs excluded efficiencies excluding non-energy uses. eta.fu name column containing machine efficiencies eta_fu_vecs data frame. C_EIOU_agg name column containing C_EIOU aggregated matrix output data frame. C_Y_agg name column containing C_Y aggregated matrix output data frame. C_EIOU_Y_agg name column containing C_EIOU_Y aggregated matrix output data frame. C_EIOU_agg_excl_NEU name temporary column containing C_EIOU aggregated matrix excluding non-energy uses. C_Y_agg_excl_NEU name temporary column containing C_Y aggregated matrix excluding non-energy uses. C_EIOU_Y_agg_excl_NEU name temporary column containing C_EIOU_Y aggregated matrix excluding non-energy uses. eta_phi_p_eiou name column containing efficiency product used EIOU. eta_phi_p_y name column containing efficiency product used final demand. eta_phi_p_eiou_y name column containing efficiency product used either EIOU final demand. phi name column containing phi values. country, method, energy_type, last_stage, year, product See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_eff_phi_Y_EIOU_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the average FU energy efficiency times phi value — calc_eta_fu_eff_phi_Y_EIOU_agg","text":"data frame containing average FU efficiencies times phi values product used EIOU, Y, economy-wide (Y EIOU).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_phi_u_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"function adds final--useful efficiency (eta) exergy--energy ratio vectors previously-created WithCmats target.#'","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_phi_u_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"","code":"calc_eta_fu_phi_u_vecs(   completed_efficiency_tables,   completed_phi_tables,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   c_source = IEATools::template_cols$c_source,   eta_fu_source = IEATools::template_cols$eta_fu_source,   .values = IEATools::template_cols$.values,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   phi_u_source = IEATools::phi_constants_names$phi_source_colname )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_phi_u_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"completed_efficiency_tables completed efficiency tables efficiency (eta_fu) vectors created. data frame likely CompletedEfficiencyTables target. completed_phi_tables completed phi tables exergy--energy ratio vectors (phi_u) created.data frame likely CompletedPhiTables target. countries countries eta_fu phi_u vectors formed. matrix_class type matrix produced. One \"matrix\" (default sparse) \"Matrix\" (may sparse). country, year See IEATools::ieacols. c_source, eta_fu_source, .values, eta_fu, phi_u See IEATools::template_cols. phi_u_source See IEATools::phi_constants_names.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_eta_fu_phi_u_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add efficiency (eta) and exergy-to-energy ratio (phi) vectors\nto a data frame. — calc_eta_fu_phi_u_vecs","text":"data frame eta_fu phi_u vectors added columns.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_agg_efficiencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the aggregated FU efficiency of products when used in EIOU, Y, or economy-wide — calc_fu_Y_EIOU_agg_efficiencies","title":"Calculates the aggregated FU efficiency of products when used in EIOU, Y, or economy-wide — calc_fu_Y_EIOU_agg_efficiencies","text":"Calculates aggregated FU efficiency products used EIOU, Y, economy-wide","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_agg_efficiencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the aggregated FU efficiency of products when used in EIOU, Y, or economy-wide — calc_fu_Y_EIOU_agg_efficiencies","text":"","code":"calc_fu_Y_EIOU_agg_efficiencies(   C_mats_agg,   eta_fu_vecs,   phi_vecs,   non_energy_use_machine = \"Non-energy consumption -> NEU\",   eta.fu = \"eta.fu\",   C_EIOU_agg = \"C_EIOU_agg\",   C_Y_agg = \"C_Y_agg\",   C_EIOU_Y_agg = \"C_EIOU_Y_agg\",   C_EIOU_agg_excl_NEU = \"C_EIOU_agg_excl_NEU\",   C_Y_agg_excl_NEU = \"C_Y_agg_excl_NEU\",   C_EIOU_Y_agg_excl_NEU = \"C_EIOU_Y_agg_excl_NEU\",   eta_p_eiou = \"eta_p_eiou\",   eta_p_y = \"eta_p_y\",   eta_p_eiou_y = \"eta_p_eiou_y\",   phi = \"phi\",   country = IEATools::iea_cols$country,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage,   year = IEATools::iea_cols$year,   product = IEATools::iea_cols$product )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_agg_efficiencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the aggregated FU efficiency of products when used in EIOU, Y, or economy-wide — calc_fu_Y_EIOU_agg_efficiencies","text":"C_mats_agg data frame containing aggregated C matrices. eta_fu_vecs data frame containing efficiency vectors. phi_vecs data frame containing phi values. non_energy_use_machine character string non-energy use machine needs excluded efficiencies excluding non-energy uses. eta.fu name column containing machine efficiencies eta_fu_vecs data frame. C_EIOU_agg name column containing C_EIOU aggregated matrix output data frame. C_Y_agg name column containing C_Y aggregated matrix output data frame. C_EIOU_Y_agg name column containing C_EIOU_Y aggregated matrix output data frame. C_EIOU_agg_excl_NEU name temporary column containing C_EIOU aggregated matrix excluding non-energy uses. C_Y_agg_excl_NEU name temporary column containing C_Y aggregated matrix excluding non-energy uses. C_EIOU_Y_agg_excl_NEU name temporary column containing C_EIOU_Y aggregated matrix excluding non-energy uses. eta_p_eiou name column containing efficiency product used EIOU. eta_p_y name column containing efficiency product used final demand. eta_p_eiou_y name column containing efficiency product used either EIOU final demand. phi name column containing phi values. country, method, energy_type, last_stage, year, product See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_agg_efficiencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the aggregated FU efficiency of products when used in EIOU, Y, or economy-wide — calc_fu_Y_EIOU_agg_efficiencies","text":"data frame containing product efficiencies used EIOU, Y, economy-wide (Y EIOU).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_efficiencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"Knowing allocations (C_mats), machine efficiencies (eta_m_vecs), exergy--energy ratios (phi_vecs), possible calculate final--useful efficiencies final demand energy industry use energy conversion chain. function performs calculations using Recca::calc_eta_fu_Y_eiou().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_efficiencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"","code":"calc_fu_Y_EIOU_efficiencies(   C_mats,   eta_fu_vecs,   phi_vecs,   countries,   country = IEATools::iea_cols$country,   last_stage = IEATools::iea_cols$last_stage,   energy_type = IEATools::iea_cols$energy_type,   method = IEATools::iea_cols$method,   year = IEATools::iea_cols$year )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_efficiencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"C_mats data frame containing allocation matrices. eta_fu_vecs data frame containing vectors machine efficiencies, probably Etafuvecs target. phi_vecs data frame containing vectors exergy--energy ratios, probably Phivecs target. countries countries analysis performed. country, last_stage, energy_type, method, year See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_fu_Y_EIOU_efficiencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate final-to-useful efficiencies — calc_fu_Y_EIOU_efficiencies","text":"data frame final--useful efficiencies energy sector energy carrier.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_pf_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"function creates data frame contains metadata columns phi_u_vecs column phi_pf vectors. work accomplished creating vector phi_constants, adding one instance vector right side phi_constants data frame row data frame, deleting phi_u_colname data frame.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_pf_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"","code":"calc_phi_pf_vecs(   phi_constants,   phi_u_vecs,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country,   product = IEATools::iea_cols$product,   eta_fu = IEATools::template_cols$eta_fu,   phi_u = IEATools::template_cols$phi_u,   phi_pf_colname = IEATools::template_cols$phi_pf,   phi_colname = IEATools::phi_constants_names$phi_colname,   is_useful_colname = IEATools::phi_constants_names$is_useful_colname )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_pf_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"phi_constants data frame constant phi values (primary, final, useful stages) columns product, phi_colname, is_useful_colname. phi_u_vecs data frame containing metadata columns column phi_u vectors. column phi_pf vectors replaces column phi_u vectors output. countries countries want perform task. matrix_class string tells type matrix create, \"matrix\" (built-type) \"Matrix\" (sparse). Default \"matrix\". country, product See IEATools::iea_cols. eta_fu, phi_u, phi_pf_colname See IEATools::template_cols. phi_colname, is_useful_colname See IEATools::phi_constants_colnames.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_pf_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"version phi_constants data frame column useful phi (useful exergy--energy ratio) vectors replaced column primary final phi vectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_pf_vecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data frame of phi_pf vectors — calc_phi_pf_vecs","text":"","code":"phi_constants <- IEATools::sample_phi_constants_path() %>%   IEATools::load_phi_constants_table() phi_u_vecs <- tibble::tibble(Country = \"GHA\",                              Year = 1971,                              rownames = c(\"Light\", \"MD\"),                              colnames = \"col\",                              matnames = \"phi.u\",                              matvals = c(0.8, 0.9),                              rowtypes = \"rowtype\",                              coltypes = \"coltype\") %>%   dplyr::group_by(Country, Year) %>%   matsindf::collapse_to_matrices() %>%   dplyr::rename(phi.u = matvals) %>%   dplyr::mutate(     Quantity = NULL   ) calc_phi_pf_vecs(phi_constants, phi_u_vecs, countries = \"GHA\") #>   Country Year #> 1     GHA 1971 #>                                                                                                                                                                                                                                                                                                                                                                                                       phi.pf #> 1 1.06, 1.06, 1.11, 1.00, 1.00, 1.00, 1.06, 1.06, 1.06, 1.06, 1.06, 1.06, 1.06, 1.05, 1.05, 1.00, 1.04, 1.04, 1.04, 1.04, 1.06, 1.00, 1.00, 1.00, 1.04, 1.11, 1.00, 1.05, 1.06, 1.00, 1.06, 1.06, 1.06, 1.11, 1.00, 0.60, 1.11, 0.60, 1.00, 1.11, 1.11, 1.06, 1.04, 1.06, 1.11, 1.00, 1.00, 1.11, 1.11, 1.00, 1.00, 1.11, 0.25, 1.11, 1.06, 1.06, 1.06, 1.06, 1.06, 1.00, 1.04, 1.00, 1.11, 1.06, 1.00, 1.11"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_vecs_mw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"phi_vecs argument move_to_exergy() data frame \"Country\", \"Year\", \"phi\" columns, \"phi\" column contains phi vectors type created MWTools::phi_vec_mw(). function creates required data frame parts.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_vecs_mw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"","code":"calc_phi_vecs_mw(   psut_energy_mw,   phi_vec_mw,   countries,   country = MWTools::mw_cols$country,   year = MWTools::mw_cols$year,   phi = \"phi\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_vecs_mw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"psut_energy_mw PSUT data frame containing country year columns. phi_vec_mw single vector muscle work phi values. See MWTools::phi_vec_mw(). countries countries analyzed. Internally, psut_energy_mw filtered countries. country, year Column names. See MWTools::mw_cols. phi name phi column. Default \"phi\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/calc_phi_vecs_mw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame of phi vectors for muscle work — calc_phi_vecs_mw","text":"data frame muscle work phi vectors, suitable move_to_exergy().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/canonical_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical countries — canonical_countries","title":"Canonical countries — canonical_countries","text":"Countries country groups , aggregated, cover entire world (WRLD) without double counting.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/canonical_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/canonical_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Canonical countries — canonical_countries","text":"string list 157 entries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/canonical_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonical countries — canonical_countries","text":"","code":"canonical_countries #> $ago #> [1] \"AGO\" #>  #> $alb #> [1] \"ALB\" #>  #> $are #> [1] \"ARE\" #>  #> $arg #> [1] \"ARG\" #>  #> $arm #> [1] \"ARM\" #>  #> $aus #> [1] \"AUS\" #>  #> $aut #> [1] \"AUT\" #>  #> $aze #> [1] \"AZE\" #>  #> $bel #> [1] \"BEL\" #>  #> $ben #> [1] \"BEN\" #>  #> $bgd #> [1] \"BGD\" #>  #> $bgr #> [1] \"BGR\" #>  #> $bhr #> [1] \"BHR\" #>  #> $bih #> [1] \"BIH\" #>  #> $blr #> [1] \"BLR\" #>  #> $bol #> [1] \"BOL\" #>  #> $bra #> [1] \"BRA\" #>  #> $brn #> [1] \"BRN\" #>  #> $bwa #> [1] \"BWA\" #>  #> $can #> [1] \"CAN\" #>  #> $che #> [1] \"CHE\" #>  #> $chl #> [1] \"CHL\" #>  #> $chnm #> [1] \"CHNM\" #>  #> $cmr #> [1] \"CMR\" #>  #> $cod #> [1] \"COD\" #>  #> $cog #> [1] \"COG\" #>  #> $col #> [1] \"COL\" #>  #> $civ #> [1] \"CIV\" #>  #> $cri #> [1] \"CRI\" #>  #> $cub #> [1] \"CUB\" #>  #> $cuw #> [1] \"CUW\" #>  #> $cyp #> [1] \"CYP\" #>  #> $cze #> [1] \"CZE\" #>  #> $deu #> [1] \"DEU\" #>  #> $dnk #> [1] \"DNK\" #>  #> $dom #> [1] \"DOM\" #>  #> $dza #> [1] \"DZA\" #>  #> $ecu #> [1] \"ECU\" #>  #> $egy #> [1] \"EGY\" #>  #> $eri #> [1] \"ERI\" #>  #> $esp #> [1] \"ESP\" #>  #> $est #> [1] \"EST\" #>  #> $eth #> [1] \"ETH\" #>  #> $fin #> [1] \"FIN\" #>  #> $fra #> [1] \"FRA\" #>  #> $gab #> [1] \"GAB\" #>  #> $gbr #> [1] \"GBR\" #>  #> $geo #> [1] \"GEO\" #>  #> $gha #> [1] \"GHA\" #>  #> $gib #> [1] \"GIB\" #>  #> $gnq #> [1] \"GNQ\" #>  #> $grc #> [1] \"GRC\" #>  #> $gtm #> [1] \"GTM\" #>  #> $guy #> [1] \"GUY\" #>  #> $hkg #> [1] \"HKG\" #>  #> $hnd #> [1] \"HND\" #>  #> $hrv #> [1] \"HRV\" #>  #> $hti #> [1] \"HTI\" #>  #> $hun #> [1] \"HUN\" #>  #> $idn #> [1] \"IDN\" #>  #> $ind #> [1] \"IND\" #>  #> $irl #> [1] \"IRL\" #>  #> $irn #> [1] \"IRN\" #>  #> $irq #> [1] \"IRQ\" #>  #> $isl #> [1] \"ISL\" #>  #> $isr #> [1] \"ISR\" #>  #> $ita #> [1] \"ITA\" #>  #> $jam #> [1] \"JAM\" #>  #> $jor #> [1] \"JOR\" #>  #> $jpn #> [1] \"JPN\" #>  #> $kaz #> [1] \"KAZ\" #>  #> $ken #> [1] \"KEN\" #>  #> $kgz #> [1] \"KGZ\" #>  #> $khm #> [1] \"KHM\" #>  #> $kor #> [1] \"KOR\" #>  #> $kwt #> [1] \"KWT\" #>  #> $lao #> [1] \"LAO\" #>  #> $lbn #> [1] \"LBN\" #>  #> $lby #> [1] \"LBY\" #>  #> $lka #> [1] \"LKA\" #>  #> $ltu #> [1] \"LTU\" #>  #> $lux #> [1] \"LUX\" #>  #> $lva #> [1] \"LVA\" #>  #> $mar #> [1] \"MAR\" #>  #> $mda #> [1] \"MDA\" #>  #> $mdg #> [1] \"MDG\" #>  #> $mex #> [1] \"MEX\" #>  #> $mkd #> [1] \"MKD\" #>  #> $mlt #> [1] \"MLT\" #>  #> $mmr #> [1] \"MMR\" #>  #> $mne #> [1] \"MNE\" #>  #> $mng #> [1] \"MNG\" #>  #> $moz #> [1] \"MOZ\" #>  #> $mus #> [1] \"MUS\" #>  #> $mys #> [1] \"MYS\" #>  #> $nam #> [1] \"NAM\" #>  #> $ner #> [1] \"NER\" #>  #> $nga #> [1] \"NGA\" #>  #> $nic #> [1] \"NIC\" #>  #> $nld #> [1] \"NLD\" #>  #> $nor #> [1] \"NOR\" #>  #> $npl #> [1] \"NPL\" #>  #> $nzl #> [1] \"NZL\" #>  #> $oafr #> [1] \"OAFR\" #>  #> $oasi #> [1] \"OASI\" #>  #> $oamr #> [1] \"OAMR\" #>  #> $omn #> [1] \"OMN\" #>  #> $pak #> [1] \"PAK\" #>  #> $pan #> [1] \"PAN\" #>  #> $per #> [1] \"PER\" #>  #> $phl #> [1] \"PHL\" #>  #> $pol #> [1] \"POL\" #>  #> $prk #> [1] \"PRK\" #>  #> $prt #> [1] \"PRT\" #>  #> $pry #> [1] \"PRY\" #>  #> $qat #> [1] \"QAT\" #>  #> $rou #> [1] \"ROU\" #>  #> $rus #> [1] \"RUS\" #>  #> $rwa #> [1] \"RWA\" #>  #> $sau #> [1] \"SAU\" #>  #> $sdn #> [1] \"SDN\" #>  #> $sen #> [1] \"SEN\" #>  #> $sgp #> [1] \"SGP\" #>  #> $slv #> [1] \"SLV\" #>  #> $srb #> [1] \"SRB\" #>  #> $ssd #> [1] \"SSD\" #>  #> $sun #> [1] \"SUN\" #>  #> $sur #> [1] \"SUR\" #>  #> $svk #> [1] \"SVK\" #>  #> $svn #> [1] \"SVN\" #>  #> $swe #> [1] \"SWE\" #>  #> $swz #> [1] \"SWZ\" #>  #> $syr #> [1] \"SYR\" #>  #> $tgo #> [1] \"TGO\" #>  #> $tha #> [1] \"THA\" #>  #> $tjk #> [1] \"TJK\" #>  #> $tkm #> [1] \"TKM\" #>  #> $tto #> [1] \"TTO\" #>  #> $tun #> [1] \"TUN\" #>  #> $tur #> [1] \"TUR\" #>  #> $twn #> [1] \"TWN\" #>  #> $tza #> [1] \"TZA\" #>  #> $uga #> [1] \"UGA\" #>  #> $ukr #> [1] \"UKR\" #>  #> $ury #> [1] \"URY\" #>  #> $usa #> [1] \"USA\" #>  #> $uzb #> [1] \"UZB\" #>  #> $ven #> [1] \"VEN\" #>  #> $vnm #> [1] \"VNM\" #>  #> $wabk #> [1] \"WABK\" #>  #> $wmbk #> [1] \"WMBK\" #>  #> $xkx #> [1] \"XKX\" #>  #> $yem #> [1] \"YEM\" #>  #> $yug #> [1] \"YUG\" #>  #> $zaf #> [1] \"ZAF\" #>  #> $zmb #> [1] \"ZMB\" #>  #> $zwe #> [1] \"ZWE\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/combine_countries_exemplars.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine countries and additional exemplars — combine_countries_exemplars","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"Combine countries additional exemplars","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/combine_countries_exemplars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"","code":"combine_countries_exemplars(couns, exempls)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/combine_countries_exemplars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"couns Countries interest exempls Additional exemplars","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/combine_countries_exemplars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine countries and additional exemplars — combine_countries_exemplars","text":"unique combination countries additional exemplars","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data pronoun — .data","title":"Data pronoun — .data","text":"See rlang::.data details.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data pronoun — .data","text":"","code":".data"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/double_counted_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Double-counted countries — double_counted_countries","title":"Double-counted countries — double_counted_countries","text":"Selected individual countries selected country groups , aggregated, result double counting.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/double_counted_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/double_counted_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Double-counted countries — double_counted_countries","text":"string list 9 entries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/double_counted_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Double-counted countries — double_counted_countries","text":"","code":"double_counted_countries #> $afri #> [1] \"AFRI\" #>  #> $asia #> [1] \"ASIA\" #>  #> $bunk #> [1] \"BUNK\" #>  #> $eurp #> [1] \"EURP\" #>  #> $mide #> [1] \"MIDE\" #>  #> $namr #> [1] \"NAMR\" #>  #> $ocen #> [1] \"OCEN\" #>  #> $samr #> [1] \"SAMR\" #>  #> $wrld #> [1] \"WRLD\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an eta_fu graph — eta_fu_graph","title":"Generate an eta_fu graph — eta_fu_graph","text":"Creates eta_fu graph completed eta_fu table, created assemble_eta_fu_tables() function.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an eta_fu graph — eta_fu_graph","text":"","code":"eta_fu_graph(   .df,   countries,   country = IEATools::iea_cols$country,   quantity = IEATools::template_cols$quantity,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an eta_fu graph — eta_fu_graph","text":".df data frame comprised completed final useful efficiency values - eta.fu countries countries efficiency plots created. country, year See IEATools::iea_cols. .values, machine, quantity, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an eta_fu graph — eta_fu_graph","text":"ggplot2 graph object","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an eta_fu graph — eta_fu_graph","text":"function called repeatedly eta_fu_plots_df(). machine, destination form title graph.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an eta_fu graph — eta_fu_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create eta_fu graphs in a data frame — eta_fu_plots_df","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"function adds column ggplot2 graphs completed eta_fu tables data frame. graphs stored list column named plots.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"","code":"eta_fu_plots_df(   .df,   countries,   plots = \"Plots\",   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":".df completed final-useful efficiency tables data frame, contains eta.fu phi.u values. countries countries final-useful efficiency plots created. plots name output column containing final-useful efficiency graphs. Default \"plots\". country See IEATools::iea_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed eta_fu_graph(). machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"data frame containing list column ggplot2 final-useful efficiency graphs.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"default, completed eta_fu tables data frame read drake cache. data frame grouped machine, eu_product nested prior making graphs, meaning one final-useful efficiency graph constructed combination machine, eu_product.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/eta_fu_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create eta_fu graphs in a data frame — eta_fu_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Eu.product,                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"MD\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 5 #> # Groups:   Country, Ef.product, Destination [2] #>   Country Ef.product Destination Data             Plots  #>   <chr>   <chr>      <chr>       <list>           <list> #> 1 GHA     Gasoline   Transport   <tibble [4 × 4]> <gg>   #> 2 ZAF     Gasoline   Transport   <tibble [4 × 4]> <gg>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Create exemplar lists from an exemplar table — exemplar_lists","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"exemplar list list countries regions used complete country's final--useful allocation table efficiency table. function uses exemplar table (probably read load_exemplar_table()) create exemplar lists.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"","code":"exemplar_lists(   exemplar_table,   countries = NULL,   prev_names = PFUPipeline::exemplar_names$prev_names,   exemplar_country = PFUPipeline::exemplar_names$exemplar_country,   exemplars = PFUPipeline::exemplar_names$exemplars,   region_code = PFUPipeline::exemplar_names$region_code,   world = PFUPipeline::exemplar_names$world,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   year_temp = \".year_temp\",   prev_names_list = \".prev_names_list\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"exemplar_table exemplar table, probably read load_exemplar_table(). countries countries exemplar lists desired. Default NULL, returns known countries. exemplars, prev_names, exemplar_country, region_code, world See PFUPipeline::exemplar_names. country, year See IEATools::iea_cols. year_temp name temporary year column. Default \".year_temp\". prev_names_list name temporary column exemplar_table. Default \".prev_names_list\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"tibble containing countries regions searched missing final--useful allocation data final--useful efficiency data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"value function tibble three columns: Country, Year, Exemplars. Country contains 3-letter ISO country codes names world regions. Year contains years. Exemplars contains list countries regions serve exemplars country year. Order exemplar lists important, countries regions searched order appear sub-list searching missing allocations efficiencies.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create exemplar lists from an exemplar table — exemplar_lists","text":"","code":"# Use an exemplar table that is part of this package. el <- exemplar_lists(load_exemplar_table()) %>% # Montenegro is a particularly interesting case, as it had many name changes. # Look at the first year, the last year as Yugoslavia, the first year as Serbia, # and today.   dplyr::filter(.data[[IEATools::iea_cols$country]] == \"MNE\",                 .data[[IEATools::iea_cols$year]] %in% c(1971, 1989, 1990, 2017)) el #> # A tibble: 4 × 3 #>   Country  Year Exemplars #>   <chr>   <dbl> <list>    #> 1 MNE      1971 <chr [4]> #> 2 MNE      1989 <chr [4]> #> 3 MNE      1990 <chr [5]> #> 4 MNE      2017 <chr [5]> el[[1, \"Exemplars\"]] #> [[1]] #> [1] \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[2, \"Exemplars\"]] #> [[1]] #> [1] \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[3, \"Exemplars\"]] #> [[1]] #> [1] \"SRB\"  \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>  el[[4, \"Exemplars\"]] #> [[1]] #> [1] \"SRB\"  \"YUG\"  \"GRC\"  \"EURP\" \"WRLD\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Exemplar table names — exemplar_names","title":"Exemplar table names — exemplar_names","text":"string list containing named names columns tabs exemplar tables. Items list provide default values column name function arguments throughout PFUPipeline package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exemplar table names — exemplar_names","text":"","code":"exemplar_names"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exemplar table names — exemplar_names","text":"string list 16 entries. exemplar_tab_name string name tab Excel file containing exemplar table. prev_names name column previous names used country. exemplars name column exemplar countries. exemplar_country name exemplar country column. exemplar_countries name exemplar countries column. exemplar_tables name column containing exemplar tables. iea_data name column containing IEA extended energy balance data. alloc_data name column containing final--useful allocation data. incomplete_alloc_table name column containing incomplete final--useful allocation tables. complete_alloc_table name column containing completed final--useful allocation tables. incomplete_eta_table name column containing incomplete final--useful efficiency tables. complete_eta_table name column containing completed final--useful efficiency tables. region_code name region code column. country_name name column containing long name country. agg_code_col metadata column \"Agg.Code\", representing country, country group code individual country level data aggregated . world name world region.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/exemplar_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exemplar table names — exemplar_names","text":"","code":"exemplar_names #> $exemplar_tab_name #> [1] \"exemplar_table\" #>  #> $prev_names #> [1] \"Prev.names\" #>  #> $exemplars #> [1] \"Exemplars\" #>  #> $exemplar_country #> [1] \"Exemplar.country\" #>  #> $exemplar_countries #> [1] \"Exemplar.countries\" #>  #> $exemplar_tables #> [1] \"Exemplar.tables\" #>  #> $iea_data #> [1] \"IEA.data\" #>  #> $alloc_data #> [1] \"Alloc.data\" #>  #> $incomplete_alloc_table #> [1] \"Incomplete.alloc.table\" #>  #> $complete_alloc_table #> [1] \"Complete.alloc.table\" #>  #> $incomplete_eta_table #> [1] \"Incomplete.eta.table\" #>  #> $complete_eta_table #> [1] \"Complete.eta.table\" #>  #> $region_code #> [1] \"Region.code\" #>  #> $country_name #> [1] \"Country.name\" #>  #> $agg_code_col #> [1] \"Agg.Code\" #>  #> $world #> [1] \"WRLD\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/expand_phi_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare phi vectors for writing as a data frame — expand_phi_vecs","title":"Prepare phi vectors for writing as a data frame — expand_phi_vecs","text":"Phivecs target matsindf data frame contains column phi vectors. another common data format simple data frame. function converts Phivecs matsindf data frame data table.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/expand_phi_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare phi vectors for writing as a data frame — expand_phi_vecs","text":"","code":"expand_phi_vecs(   phi_vecs,   machine = \"Machine\",   phi = \"phi\",   matnames = \"matnames\",   matvals = \"matvals\",   rownames = \"rownames\",   colnames = \"colnames\",   rowtypes = \"rowtypes\",   coltypes = \"coltypes\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/expand_phi_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare phi vectors for writing as a data frame — expand_phi_vecs","text":"phi_vecs incoming Phivecs target. machine, phi, matnames, matvals, rownames, colnames, rowtypes, coltypes Columns names phi_vecs.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/expand_phi_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare phi vectors for writing as a data frame — expand_phi_vecs","text":"data frame columns Country, Year, Machine, phi.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/extend_details_matrices_to_exergy.html","id":null,"dir":"Reference","previous_headings":"","what":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","title":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","text":"function extend data frame energy fu details matrices exergy.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/extend_details_matrices_to_exergy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","text":"","code":"extend_details_matrices_to_exergy(   fu_details_mats,   phi_vecs,   countries,   country_colname = IEATools::iea_cols$country,   year_colname = IEATools::iea_cols$year )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/extend_details_matrices_to_exergy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","text":"fu_details_mats data frame containing final--useful details matrices. phi_vecs name phi vectors column fu_details_mats. countries countries function applied. country_colname, year_colname Names columns fu_details_mats.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/extend_details_matrices_to_exergy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","text":"version fu_details_mats matrices containing exergy useful stage.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/extend_details_matrices_to_exergy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move the useful details energy matrices to exergy — extend_details_matrices_to_exergy","text":"final--useful details matrices contain information rows columns transition final useful energy exergy, including final energy product, final demand sector, final--useful machine, useful energy product. Entries details matrices useful energy amounts. Information encoded row column labels details matrix: Row names use RCLabels::arrow_notation prefix identifies final energy product suffix identifies sector final--useful transformation occurs. Example: \"Aviation gasoline -> Domestic aviation\". Column names use RCLabels::from_notation prefix identifies useful energy product suffix identifies final--useful machine. Example: \"HPL [Electric pumps]\". function enables mapping countries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/filter_mw_to_iea_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"function compares muscle work IEA data frames country, year, method, energy_type, last_stage columns keeps rows .psut_mw match .psut_iea.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/filter_mw_to_iea_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"","code":"filter_mw_to_iea_years(   .psut_mw,   .psut_iea,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   method = IEATools::iea_cols$method,   energy_type = IEATools::iea_cols$energy_type,   last_stage = IEATools::iea_cols$last_stage )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/filter_mw_to_iea_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":".psut_mw incoming muscle work data frame filtered. .psut_iea incoming IEA data frame years obtained. countries countries filtering done. country, year, method, energy_type, last_stage columns .psut_mw .iea_mw used filtering.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/filter_mw_to_iea_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter muscle work data to only those years contained in IEA data — filter_mw_to_iea_years","text":"version .psut_mw contains countries, years, methods, energy types, last stages also contained .psut_iea.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"function selects following columns pwt10 data frame produced calling pwt10::pwt10.0, descriptions pwt10 documentation: isocode: 3-letter isocode year: Year rgdpe: Expenditure-side real GDP chained PPPs (million 2017 USD). rgdpo: Output-side real GDP chained PPPs (million 2017 USD). rgdpna: Real GDP constant 2017 national prices (million 2017 USD) emp: Number persons engaged (millions) avh: Average annual hours worked persons engaged. hc: Human capital index, based years schooling returns education; see Human capital PWT9. rnna: Capital stock constant 2017 national prices (million 2017 USD). rkna: Capital services constant 2017 national prices (2017 = 1).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"","code":"get_L_K_GDP_data(   pwt10_data,   country_colname = IEATools::iea_cols$country,   Year_colname = IEATools::iea_cols$year,   year_colname = PFUPipeline::socioecon_cols$year_colname,   isocode_colname = PFUPipeline::socioecon_cols$isocode_colname,   rgdpe_colname = PFUPipeline::socioecon_cols$rgdpe_colname,   rgdpo_colname = PFUPipeline::socioecon_cols$rgdpo_colname,   rgdpna_colname = PFUPipeline::socioecon_cols$rgdpna_colname,   emp_colname = PFUPipeline::socioecon_cols$emp_colname,   avh_colname = PFUPipeline::socioecon_cols$avh_colname,   hc_colname = PFUPipeline::socioecon_cols$hc_colname,   rnna_colname = PFUPipeline::socioecon_cols$rnna_colname,   rkna_colname = PFUPipeline::socioecon_cols$rkna_colname,   K_colname = PFUPipeline::socioecon_cols$K_colname,   Kserv_colname = PFUPipeline::socioecon_cols$Kserv_colname,   L_colname = PFUPipeline::socioecon_cols$L_colname,   Ladj_colname = PFUPipeline::socioecon_cols$Ladj_colname )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"pwt10_data data frame containing pwt10 data least one country, usually obtained get_all_pwt_data(). country_colname, Year_colname See IEATools::iea_cols. isocode_colname, year_colname, rgdpe_colname, rgdpo_colname, rgdpna_colname, emp_colname, avh_colname, hc_colname, rnna_colname, rkna_colname, K_colname, Kserv_colname, L_colname, Ladj_colname See PFUPipeline::socioecon_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"data frame containing three GDP metrics, Labor, Adjusted Labor, Capital, Capital services.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"metrics  L, total number hours worked given year Ladj, number hours worked adjusted human capital index also calculated added columns, avh, hc, emp removed use. Note data available countries (mostly non-OECD), calculated metrics .e. Adjusted Labor (L.adj) also absent.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_L_K_GDP_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a dataframe containing capital (K), labor (L), and GDP data — get_L_K_GDP_data","text":"","code":"countries <- c(\"GBR\") L_K_GDP_data <- get_all_pwt_data(countries = countries) %>%                   get_L_K_GDP_data()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_all_pwt_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all pwt10 data for a set of countries — get_all_pwt_data","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"Using pwt10 package function creates data frame containing data Penn World Tables 10 (pwt10) set countries specified string 3-letter ISO country codes named countries. Note data available countries (mostly non-OECD).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_all_pwt_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"","code":"get_all_pwt_data(   countries,   isocode_colname = PFUPipeline::socioecon_cols$isocode_colname )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_all_pwt_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"countries string iso 3-letter country codes isocode_colname See PFUPipeline::socioecon_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_all_pwt_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"data frame containing socioeconomic data pwt10 set countries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_all_pwt_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all pwt10 data for a set of countries — get_all_pwt_data","text":"","code":"countries <- c(\"GBR\") all_pwt_data <- get_all_pwt_data(countries = countries)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_eta_filepaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all file paths to machine efficiency files — get_eta_filepaths","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"machine efficiency files contain FIN_ETA sheet stores efficiencies..","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_eta_filepaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"","code":"get_eta_filepaths(   filepath,   efficiency_tab_name = PFUPipeline::machine_constants$efficiency_tab_name,   hidden_excel_file_prefix = \"~$\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_eta_filepaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"filepath file path folder containing machine folders. efficiency_tab_name See PFUPipeline::machine_constants. hidden_excel_file_prefix prefix hidden Excel files. files appear Excel file open ignored.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_eta_filepaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all file paths to machine efficiency files — get_eta_filepaths","text":"list file paths machine excel files containing FIN_ETA front sheets, therefore usable data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_fd_sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a list of final demand sectors — get_fd_sectors","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"Retrieve list final demand sectors calculation total final consumption final, useful, services energy gross net terms.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_fd_sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"","code":"get_fd_sectors()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_fd_sectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"list final demand sectors IEATools::fd_sectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_fd_sectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a list of final demand sectors — get_fd_sectors","text":"","code":"fd_sectors <- get_fd_sectors()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_p_industry_prefixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve primary industry prefixes — get_p_industry_prefixes","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"Retrieve primary industry prefixes use Recca::find_p_industry_names. Contains \"Resources\", \"Imports\", \"Stock changes\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_p_industry_prefixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"","code":"get_p_industry_prefixes()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_p_industry_prefixes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"list primary industry prefixes IEATools::prim_agg_flows.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_p_industry_prefixes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve primary industry prefixes — get_p_industry_prefixes","text":"","code":"p_industry_prefixes <- get_p_industry_prefixes()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an analysis pipeline — get_pipeline","title":"Create an analysis pipeline — get_pipeline","text":"pipeline targets pipeline creates PFU database.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an analysis pipeline — get_pipeline","text":"","code":"get_pipeline(   countries = \"all\",   additional_exemplar_countries = NULL,   specify_non_energy_flows = FALSE,   matrix_class = c(\"matrix\", \"Matrix\"),   apply_fixes = FALSE,   years = \"all\",   how_far = \"all_targets\",   iea_data_path,   country_concordance_path,   mw_concordance_path,   amw_analysis_data_path,   hmw_analysis_data_path,   phi_constants_path,   ceda_data_folder,   fao_data_path,   ilo_employment_data_path,   ilo_working_hours_data_path,   machine_data_path,   exemplar_table_path,   fu_analysis_folder,   exiobase_energy_flows_path,   years_exiobase,   reports_source_folders,   reports_dest_folder,   pipeline_releases_folder,   pipeline_caches_folder,   release = FALSE )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an analysis pipeline — get_pipeline","text":"countries vector abbreviations countries whose energy conversion chain analyzed, \"c('GHA', 'ZAF')\". Countries named countries can also serve exemplars final--useful allocations efficiencies. additional_exemplar_countries vector country abbreviations final--useful allocations efficiencies read. energy conversion chain constructed countries. However, final--useful allocations efficiencies may used exemplar information countries countries. Default NULL, indicating additional exemplars. specify_non_energy_flows boolean tells whether provide additional specificity non-energy flows, available. Default FALSE. matrix_class One \"matrix\" \"Matrix\", specifying kind matrix objects created. Default \"matrix\". apply_fixes boolean tells whether fix IEA WEEB data, possible. Default FALSE. years years studied. how_far string indicating last target include plan returned. Default \"all_targets\" indicate targets plan returned. iea_data_path path IEA extended energy balance data .csv format. country_concordance_path path country concordance Excel file. mw_concordance_path path muscle work concordance file. amw_analysis_data_path path animal muscle work data file. hmw_analysis_data_path path human muscle work data file. phi_constants_path path phi (exergy--energy ratio) Excel file. ceda_data_folder path CEDA data text file, .per, format. fao_data_path path Food Agriculture Organization (FAO) data. ilo_employment_data_path path International Labor Organization (ILO) employment data. ilo_working_hours_data_path path International Labor Organization (ILO) working hours data. machine_data_path path machine data .xlsx format. exemplar_table_path path exemplar table. fu_analysis_folder path folder containing final--useful analyses. Sub-folders named 3-letter country abbreviations assumed. exiobase_energy_flows_path path file list Exiobase energy flows, concordance PFU database flows stored. years_exiobase years multipliers provide Exiobase team need calculated. reports_source_folders string vector containing paths folders report sources, usually .Rnw .Rmd files. reports_dest_folder path folder reports written. pipeline_releases_folder path folder releases important targets stored later retrieval pinned items pinboard. pipeline_caches_folder path folder .zipped versions pipeline cache stored. release boolean tells whether new release PSUT targets made. Default FALSE.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/get_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an analysis pipeline — get_pipeline","text":"targets pipeline.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/ieamw_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for data frames containing IEA and MW data frames — ieamw_cols","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"string list containing column name column values energy conversion chains (ECCs) PSUT format.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/ieamw_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"","code":"ieamw_cols"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/ieamw_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"string list 4 entries. ieamw name column containing metadata ECC sources. \"IEAMW\" iea string identifying ECC data IEA exclusively. \"IEA\" mw string identifying ECC data muscle work (MW) exclusively. \"MW\" string identifying ECC data include IEA muscle work. \"\"","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/ieamw_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constants for data frames containing IEA and MW data frames — ieamw_cols","text":"","code":"ieamw_cols #> $ieamw #> [1] \"IEAMW\" #>  #> $iea #> [1] \"IEA\" #>  #> $mw #> [1] \"MW\" #>  #> $both #> [1] \"Both\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/is_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Tells whether IEA data are balanced — is_balanced","title":"Tells whether IEA data are balanced — is_balanced","text":"Performs energy balance check way amenable drake subtargets. Internally, function uses IEATools::calc_tidy_iea_df_balances(). Grouping internal function using value grp_vars.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/is_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tells whether IEA data are balanced — is_balanced","text":"","code":"is_balanced(   .iea_data,   countries,   country = IEATools::iea_cols$country,   grp_vars = c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type,     IEATools::iea_cols$last_stage, IEATools::iea_cols$year, IEATools::iea_cols$product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/is_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tells whether IEA data are balanced — is_balanced","text":".iea_data tidy IEA data frame countries countries balancing checked strings country name country column IEAData. Default Country. grp_vars groups checked. Default c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type, IEATools::iea_cols$last_stage, IEATools::iea_cols$product).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/is_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tells whether IEA data are balanced — is_balanced","text":"logical stating whether products balanced country interest","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/is_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tells whether IEA data are balanced — is_balanced","text":"","code":"# These data are not balanced, because they are raw. IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   is_balanced(countries = \"ZAF\") #> [1] FALSE"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_amw_pfu_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load animal muscle work data — load_amw_pfu_data","title":"Load animal muscle work data — load_amw_pfu_data","text":"function loads animal muscle work data renames sectors according default arguments rename_mw_sectors().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_amw_pfu_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load animal muscle work data — load_amw_pfu_data","text":"","code":"load_amw_pfu_data(fao_data_path, mw_concordance_path, amw_analysis_data_path)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_amw_pfu_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load animal muscle work data — load_amw_pfu_data","text":"fao_data_path path FAO data. mw_concordance_path path muscle work concordance. amw_analysis_data_path path animal muscle work data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_amw_pfu_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load animal muscle work data — load_amw_pfu_data","text":"data frame animal muscle work data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_country_concordance_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a country concordance table — load_country_concordance_table","title":"Load a country concordance table — load_country_concordance_table","text":"addition loading country concordance table, function checks errors: missing 3-letter country codes repeated 3-letter country codes. issues cause problem.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_country_concordance_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a country concordance table — load_country_concordance_table","text":"","code":"load_country_concordance_table(   country_concordance_path,   sheet = \"country_concordance_table\",   pfu_code_colname = \"PFU.code\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_country_concordance_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a country concordance table — load_country_concordance_table","text":"country_concordance_path path country concordance file. file assumed Excel file. sheet name sheet read. Default \"country_concordance_table\". pfu_code_colname name column country concordance table contains 3-letter country codes used workflow. Default \"PFU.code\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_country_concordance_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a country concordance table — load_country_concordance_table","text":"country concordance table.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an exemplar table from an Excel file — load_exemplar_table","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar table column country names additional metadata, including exemplar country name changes time.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"","code":"load_exemplar_table(   exemplar_table_path = sample_exemplar_table_path(),   countries = NULL,   years = NULL,   exemplar_table_tab_name = PFUPipeline::exemplar_names$exemplar_tab_name,   prev_names = PFUPipeline::exemplar_names$prev_names,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar_table_path path Excel file containing exemplar table. Default value sample_exemplar_table_path(). countries countries exemplars desired. NULL, default, countries file exemplar_table_path returned. years years want exemplar table, integer. Default NULL, meaning years file exemplar_table_path included. exemplar_table_tab_name, prev_names See PFUPipeline::exemplar_names. year, country See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"exemplar table","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"function gathers (actually, tidyr::pivot_longer()) years Year column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_exemplar_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an exemplar table from an Excel file — load_exemplar_table","text":"","code":"load_exemplar_table() #> # A tibble: 13,176 × 5 #>    Region.code Exemplar.country Country Year  Prev.names #>    <chr>       <chr>            <chr>   <chr> <chr>      #>  1 NAMR        USA              ABW     1960  OAMR       #>  2 NAMR        USA              ABW     1961  OAMR       #>  3 NAMR        USA              ABW     1962  OAMR       #>  4 NAMR        USA              ABW     1963  OAMR       #>  5 NAMR        USA              ABW     1964  OAMR       #>  6 NAMR        USA              ABW     1965  OAMR       #>  7 NAMR        USA              ABW     1966  OAMR       #>  8 NAMR        USA              ABW     1967  OAMR       #>  9 NAMR        USA              ABW     1968  OAMR       #> 10 NAMR        USA              ABW     1969  OAMR       #> # ℹ 13,166 more rows"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_fu_allocation_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Load FU allocation tables — load_fu_allocation_tables","title":"Load FU allocation tables — load_fu_allocation_tables","text":"function reads final--useful allocation data files fu_analysis_folder start country abbreviations given countries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_fu_allocation_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load FU allocation tables — load_fu_allocation_tables","text":"","code":"load_fu_allocation_tables(   fu_analysis_folder,   specified_iea_data,   countries,   file_suffix = IEATools::fu_analysis_file_info$fu_analysis_file_suffix,   use_subfolders = TRUE,   generate_missing_fu_allocation_template = TRUE,   fu_allocations_tab_name = IEATools::fu_analysis_file_info$fu_allocation_tab_name )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_fu_allocation_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load FU allocation tables — load_fu_allocation_tables","text":"fu_analysis_folder folder final--useful analyses loaded. specified_iea_data data frame specified IEA data countries. countries countries allocation tables loaded. file_suffix suffix FU analysis files. Default \" FU Analysis.xlsx\". use_subfolders Tells whether look files subfolders named countries. Default TRUE. generate_missing_fu_allocation_template Tells whether generate missing final--useful allocation template specified_iea_data. Default TRUE. fu_allocations_tab_name name tab final--useful allocations Excel file containing final--useful allocation data. Default \"FU Allocations\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_fu_allocation_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load FU allocation tables — load_fu_allocation_tables","text":"data frame FU Allocation tables read IEATools::load_fu_allocation_data(). FU Allocation data found generate_missing_fu_allocation_template TRUE, empty template written disk empty template returned. FU Allocation data found generate_missing_fu_allocation_template FALSE, NULL returned.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_fu_allocation_tables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load FU allocation tables — load_fu_allocation_tables","text":"default, assumed country's final--useful analysis file subfolder fu_analysis_path. Set use_subfolders FALSE change default behavior. final--useful allocation data available, function automatically creates empty final--useful allocation template writes disk. , function reads empty file. behavior can modified setting argument generate_missing_fu_allocation_template FALSE.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_hmw_pfu_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load human muscle work data — load_hmw_pfu_data","title":"Load human muscle work data — load_hmw_pfu_data","text":"function loads human muscle work data renames sectors according default arguments rename_mw_sectors().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_hmw_pfu_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load human muscle work data — load_hmw_pfu_data","text":"","code":"load_hmw_pfu_data(   ilo_working_hours_data_path,   ilo_employment_data_path,   mw_concordance_path,   hmw_analysis_data_path )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_hmw_pfu_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load human muscle work data — load_hmw_pfu_data","text":"ilo_working_hours_data_path path ILO working hours data. ilo_employment_data_path path ILO employment data. mw_concordance_path path muscle work concordance. hmw_analysis_data_path path human muscle work data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/load_hmw_pfu_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load human muscle work data — load_hmw_pfu_data","text":"data frame human muscle work data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/machine_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about the machine efficiency files — machine_constants","title":"Information about the machine efficiency files — machine_constants","text":"string list containing information machine efficiency files. Items list provide default values machine efficiency files, including Excel tab names, etc.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/machine_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about the machine efficiency files — machine_constants","text":"","code":"machine_constants"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/machine_constants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Information about the machine efficiency files — machine_constants","text":"string list 1 entries. efficiency_tab_name default name efficiency tabs machine efficiency excel files.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/machine_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about the machine efficiency files — machine_constants","text":"","code":"machine_constants #> $efficiency_tab_name #> [1] \"FIN_ETA\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Balance IEA data — make_balanced","title":"Balance IEA data — make_balanced","text":"Balances IEA data way amenable drake subtargets. Internally, function uses IEATools::fix_tidy_iea_df_balances(). Grouping done internal function using value grp_vars.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balance IEA data — make_balanced","text":"","code":"make_balanced(   .iea_data,   max_fix = 6,   countries,   country = IEATools::iea_cols$country,   grp_vars = c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type,     IEATools::iea_cols$last_stage, IEATools::iea_cols$year, IEATools::iea_cols$product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balance IEA data — make_balanced","text":".iea_data tidy IEA data frame. max_fix maximum allowable energy imbalance fix. Default 3. countries countries balanced. country See IEATools::iea_cols grp_vars groups checked. Default c(country, IEATools::iea_cols$method, IEATools::iea_cols$energy_type, IEATools::iea_cols$last_stage, IEATools::iea_cols$product).","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balance IEA data — make_balanced","text":"data frame balanced IEA data.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balance IEA data — make_balanced","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   is_balanced(countries = c(\"GHA\", \"ZAF\")) #> [1] TRUE"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_iea_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to PSUT matrices — make_iea_psut","title":"Convert to PSUT matrices — make_iea_psut","text":"Converts tidy IEA data PSUT matrices way amenable drake subtargets. Internally, IEATools::prep_psut() conversion matrices.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_iea_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to PSUT matrices — make_iea_psut","text":"","code":"make_iea_psut(   SpecifiedIEAData,   countries,   matrix_class = c(\"matrix\", \"Matrix\"),   country = IEATools::iea_cols$country )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_iea_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to PSUT matrices — make_iea_psut","text":"SpecifiedIEAData data frame already specified via specify(). countries countries want convert PSUT matrices. matrix_class type matrix created. One \"matrix\" (base class) \"Matrix\" (sparse matrices). country See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_iea_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to PSUT matrices — make_iea_psut","text":"matsindf-style data frame.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_iea_psut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to PSUT matrices — make_iea_psut","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   specify(countries = c(\"GHA\", \"ZAF\")) %>%   make_iea_psut(countries = c(\"GHA\", \"ZAF\")) #> # A tibble: 4 × 13 #>   Country Method Energy.type Last.stage  Year Y               S_units  R        #>   <chr>   <chr>  <chr>       <chr>      <dbl> <list>          <list>   <list>   #> 1 GHA     PCM    E           Final       1971 <dbl [12 × 21]> <dbl[…]> <dbl[…]> #> 2 GHA     PCM    E           Final       2000 <dbl [13 × 20]> <dbl[…]> <dbl[…]> #> 3 ZAF     PCM    E           Final       1971 <dbl [19 × 27]> <dbl[…]> <dbl[…]> #> 4 ZAF     PCM    E           Final       2000 <dbl [22 × 43]> <dbl[…]> <dbl[…]> #> # ℹ 5 more variables: U <list>, U_feed <list>, U_EIOU <list>, r_EIOU <list>, #> #   V <list>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_mw_psut.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"function filters countries creates PSUT matrices primary-final-useful muscle work data frames.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_mw_psut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"","code":"make_mw_psut(   .hmw_df,   .amw_df,   countries,   years,   matrix_class = c(\"matrix\", \"Matrix\"),   output_unit = c(\"TJ\", \"ktoe\"),   country = MWTools::mw_cols$country,   year = MWTools::mw_cols$year )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_mw_psut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":".hmw_df, .amw_df Data frames primary-final-useful muscle work data. countries countries analyzed. years years analyzed. matrix_class type matrix created. One \"matrix\" (base class) \"Matrix\" (sparse matrices). output_unit string length one specifies output unit. One \"TJ\" \"ktoe\" terajoules kilotons oil equivalent. country name country column .hmw_df .amw_df. Default MWTools::mw_cols$country. year name year column .hmw_df .amw_df.Default MWTools::mw_cols$year.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/make_mw_psut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PSUT data frames from muscle work PFU data frames — make_mw_psut","text":"data frame PSUT matrices muscle work energy conversion chain.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_exergy.html","id":null,"dir":"Reference","previous_headings":"","what":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"Converts energy conversion chains represented matrices data frame psut_energy energy quantities exergy quantities.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_exergy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"","code":"move_to_exergy(   psut_energy,   phi_vecs,   countries,   country = IEATools::iea_cols$country,   phi_colname = IEATools::phi_constants_names$phi_colname )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_exergy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"psut_energy wide--matrices data frame energy conversion chain data. phi_vecs data frame vectors phi (exergy--energy ratios) countries countries task performed. country See IEATools::iea_cols. phi_colname See IEATools::phi_constants.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_exergy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"version psut_energy additional rows","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_exergy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Move from all exergy quantities to all energy quantities in energy conversion chains — move_to_exergy","text":"steps calculation join phi_vecs psut_energy. Thereafter, call IEATools package matrix multiplications.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful.html","id":null,"dir":"Reference","previous_headings":"","what":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"Extends energy conversion chain final energy last stage useful energy last stage. last-stage-useful energy conversion chain PSUT matrices bound rows bottom psut_final data frame, albeit \"Useful\" instead \"Final\" Last.stage column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"","code":"move_to_useful(   psut_final,   C_mats,   eta_phi_vecs,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   C_Y = IEATools::template_cols$C_Y,   C_eiou = IEATools::template_cols$C_eiou )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"psut_final data frame rows describe energy conversion chain final energy last stage. C_mats data frame allocation matrices, probably Cmats target. eta_phi_vecs data frame final--useful efficiency exergy--energy ratio vectors. countries countries analyzed. country, year See IEATools::iea_cols. C_Y, C_eiou See IEATools::template_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move the last stage of the energy conversion chain from final stage to useful stage — move_to_useful","text":"data frame energy conversion chain matrices last stage useful energy.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful_with_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Move the last stage of the energy conversion chain from final stage to useful stage with details — move_to_useful_with_details","title":"Move the last stage of the energy conversion chain from final stage to useful stage with details — move_to_useful_with_details","text":"Extends energy conversion chain final energy last stage useful energy last stage. Details conversion final useful retained via matrices Y_fu_details U_EIOU_fu_details. last-stage-useful energy conversion chain PSUT matrices bound rows bottom psut_final data frame, albeit \"Useful\" instead \"Final\" Last.stage column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful_with_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move the last stage of the energy conversion chain from final stage to useful stage with details — move_to_useful_with_details","text":"","code":"move_to_useful_with_details(   psut_final,   C_mats,   eta_phi_vecs,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   C_Y = IEATools::template_cols$C_Y,   C_eiou = IEATools::template_cols$C_eiou )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful_with_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move the last stage of the energy conversion chain from final stage to useful stage with details — move_to_useful_with_details","text":"psut_final data frame rows describe energy conversion chain final energy last stage. C_mats data frame allocation matrices, probably Cmats target. eta_phi_vecs data frame final--useful efficiency exergy--energy ratio vectors. countries countries analyzed. country, year See IEATools::iea_cols. C_Y, C_eiou See IEATools::template_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/move_to_useful_with_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Move the last stage of the energy conversion chain from final stage to useful stage with details — move_to_useful_with_details","text":"data frame energy conversion chain matrices last stage useful energy.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"Creates allocation graph completed allocation table, mostly likely created assemble_fu_allocation_tables() function.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"","code":"nonstat_alloc_graph(   .df,   country,   ef_product,   destination,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":".df data frame comprised completed final energy allocations. country country graph applies. ef_product final energy product graph applies. destination destination sector final energy product. year See IEATools::iea_cols. .values, machine, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"ggplot2 graph object","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"function called repeatedly nonstat_alloc_plots_df(). country, ef_product, destination form title graph.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an allocation graph which contains non-stationary allocations data only — nonstat_alloc_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"function adds column ggplot2 graphs completed allocation tables data frame. graphs stored list column named plots.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"","code":"nonstat_alloc_plots_df(   .df,   countries,   data_col = \"Data\",   plots = \"Plots\",   country = IEATools::iea_cols$country,   ef_product = IEATools::template_cols$ef_product,   destination = IEATools::template_cols$destination,   quantity = IEATools::template_cols$quantity,   c_source = IEATools::template_cols$c_source,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":".df completed allocation tables data frame. Default drake::readd(completed_allocation_tables_target, path = cache_path, character_only = TRUE). countries countries allocation plots created. data_col name output column containing nested data allocation graphs. Default \"Data\". plots name output column containing allocation graphs. Default \"Plots\". country See IEATools::iea_cols. ef_product, destination, quantity, c_source See IEATools::template_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed alloc_graph().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"data frame containing list column ggplot2 non-stationary allocation graphs.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"data frame grouped variables needed create allocation graph, specifically country, ef_product, destination nested prior making graphs, namely machine, eu_product, quantity, year, .values, c_source, meaning one allocation graph constructed combination variables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/nonstat_alloc_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create non-stationary allocation graphs in a data frame — nonstat_alloc_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Method, ~Energy.type, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Quantity, ~Eu.product, ~C.source,                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"GHA\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"C_1 [%]\", \"MD\", \"World\",                                \"ZAF\", \"PCM\", \"E\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"C_2 [%]\", \"MD\", \"World\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 7 #> # Groups:   Country, Method, Energy.type, Ef.product, Destination [2] #>   Country Method Energy.type Ef.product Destination Data             Plots  #>   <chr>   <chr>  <chr>       <chr>      <chr>       <list>           <list> #> 1 GHA     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>   #> 2 ZAF     PCM    E           Gasoline   Transport   <tibble [4 × 5]> <gg>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Sources for phi values — phi_sources","title":"Sources for phi values — phi_sources","text":"string list containing named sources phi (exergy--energy ratio) values.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sources for phi values — phi_sources","text":"","code":"phi_sources"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_sources.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sources for phi values — phi_sources","text":"string list 3 entries. eta_fu_tables Tables final--useful efficiency values. temperature_data Country-average yearly temperature data. phi_constants Tables constant phi values.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sources for phi values — phi_sources","text":"","code":"phi_sources #> $eta_fu_tables #> [1] \"eta_fu.tables\" #>  #> $temperature_data #> [1] \"temperature.data\" #>  #> $phi_constants #> [1] \"phi.constants\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an phi_u graph — phi_u_graph","title":"Generate an phi_u graph — phi_u_graph","text":"Creates phi_u graph completed eta_fu table, created assemble_eta_fu_tables() function.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an phi_u graph — phi_u_graph","text":"","code":"phi_u_graph(   .df,   countries,   country = IEATools::iea_cols$country,   quantity = IEATools::template_cols$quantity,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an phi_u graph — phi_u_graph","text":".df data frame comprised completed exergy--energy ratio values countries countries efficiency plots created. country, year See IEATools::iea_cols. .values, machine, quantity, eu_product See IEATools::template_cols. machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an phi_u graph — phi_u_graph","text":"ggplot2 graph object","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an phi_u graph — phi_u_graph","text":"function called repeatedly phi_u_plots_df(). machine, destination form title graph.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an phi_u graph — phi_u_graph","text":"","code":"library(ggplot2) # Make a simple data frame with the expected structure. tibble::tribble(~Year, ~.values, ~Machine, ~Eu.product,                 1967, 0.5, \"Cars\", \"MD\",                 1967, 0.5, \"Industry static engines\", \"MD\",                 2020, 0.8, \"Cars\", \"MD\",                 2020, 0.2, \"Industry static engines\", \"MD\") %>%   alloc_graph(country = \"Example\", ef_product = \"Petrol\", destination = \"Transport\")"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create phi_u graphs in a data frame — phi_u_plots_df","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"function adds column ggplot2 graphs completed phi_u tables data frame. graphs stored list column named plots.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"","code":"phi_u_plots_df(   .df,   countries,   plots = \"Plots\",   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   machine = IEATools::template_cols$machine,   eu_product = IEATools::template_cols$eu_product,   machine_eu_product = paste0(machine, \"_\", eu_product) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":".df completed final-useful efficiency tables data frame, contains eta.fu phi.u values. countries countries exergy--energy ratio plots created. plots name output column containing exergy--energy ratio graph. Default \"plots\". country See IEATools::iea_cols. year See IEATools::iea_cols. Passed alloc_graph(). .values, machine, eu_product See IEATools::template_cols. Passed eta_fu_graph(). machine_eu_product name combined machine eu_product column.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"data frame containing list column ggplot2 exergy--energy ratio graphs.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"default, completed phi_u tables data frame read drake cache. data frame grouped machine, eu_product nested prior making graphs, meaning one exergy--energy ratio graph constructed combination machine, eu_product.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/phi_u_plots_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create phi_u graphs in a data frame — phi_u_plots_df","text":"","code":"# Make a simple data frame with the expected structure. alloc_table <- tibble::tribble(~Country, ~Year, ~Ef.product, ~Destination,                                ~.values, ~Machine, ~Eu.product,                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"GHA\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.2, \"Cars\", \"MD\",                                \"GHA\", 2020, \"Gasoline\", \"Transport\",                                0.8, \"Trucks\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Cars\", \"MD\",                                \"ZAF\", 1971, \"Gasoline\", \"Transport\",                                0.5, \"Trucks\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.3, \"Cars\", \"MD\",                                \"ZAF\", 2020, \"Gasoline\", \"Transport\",                                0.7, \"Trucks\", \"MD\") alloc_plots_df(alloc_table, c(\"GHA\", \"ZAF\")) #> # A tibble: 2 × 5 #> # Groups:   Country, Ef.product, Destination [2] #>   Country Ef.product Destination Data             Plots  #>   <chr>   <chr>      <chr>       <list>           <list> #> 1 GHA     Gasoline   Transport   <tibble [4 × 4]> <gg>   #> 2 ZAF     Gasoline   Transport   <tibble [4 × 4]> <gg>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/quasi-quote-assign.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment — :=","title":"Assignment — :=","text":"See rlang:::= details.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/quasi-quote-assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment — :=","text":"","code":"x := y"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_all_eta_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"function reads files eat_fin_paths creates data frame important efficiency variables.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_all_eta_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"","code":"read_all_eta_files(   eta_fin_paths,   efficiency_tab_name = PFUPipeline::machine_constants$efficiency_tab_name,   year = IEATools::iea_cols$year,   .values = IEATools::template_cols$.values,   hidden_excel_file_prefix = \"~$\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_all_eta_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"eta_fin_paths list file paths machine excel files containing FIN_ETA front sheets, therefore usable data. Created calling get_eta_filepaths() function. efficiency_tab_name See PFUPipeline::machine_constants. year See IEATools::iea_cols. .values See IEATools::template_cols. hidden_excel_file_prefix prefix hidden Excel files. files appear Excel file open ignored. Default \"~$\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_all_eta_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"data frame containing Eta.fu Phi.u values present Machine excel files, following column names: \"Country\", \"Energy.type\", \"Last.stage\", \"Method\", \"Machine\", \"Eu.product\", \"Quantity\", \"Year\", \"Value\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_all_eta_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a data frame containing machine Eta.fu and Phi.u values. — read_all_eta_files","text":"Note eta_fin_paths typically list file paths, character string. eta_fin_paths can single character string (list), case interpreted directory containing files Eta.fu Phi.u values. eta_fin_paths single character string (list), directory interrogated files, list file paths constructed, files read. get_eta_filepaths() called internally reading files creating data frames.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_list_exiobase_energy_flows.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads the list of Exiobase energy flows — read_list_exiobase_energy_flows","title":"Reads the list of Exiobase energy flows — read_list_exiobase_energy_flows","text":"Reads list Exiobase energy flows","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_list_exiobase_energy_flows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads the list of Exiobase energy flows — read_list_exiobase_energy_flows","text":"","code":"read_list_exiobase_energy_flows(path_to_list_exiobase_energy_flows)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_list_exiobase_energy_flows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads the list of Exiobase energy flows — read_list_exiobase_energy_flows","text":"path_to_list_exiobase_energy_flows Contains path folder containing list Exiobase energy flows","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/read_list_exiobase_energy_flows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads the list of Exiobase energy flows — read_list_exiobase_energy_flows","text":"data frame containing list Exiobase energy flows, boolean column stating whether flow final energy flow ","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_cols_from_PSUTUsefulIEAWithDetails.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","title":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","text":"simple wrapper function assist removing unneeded columns PSUTUsefulIEAWithDetails target.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_cols_from_PSUTUsefulIEAWithDetails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","text":"","code":"remove_cols_from_PSUTUsefulIEAWithDetails(   psut_useful_iea_with_details,   cols_to_remove,   phi_vecs,   remove_final = FALSE,   countries,   country = IEATools::iea_cols$country,   year = IEATools::iea_cols$year,   last_stage = IEATools::iea_cols$last_stage,   final = IEATools::all_stages$final )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_cols_from_PSUTUsefulIEAWithDetails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","text":"psut_useful_iea_with_details target columns removed. cols_to_remove string vector columns names removed. phi_vecs name phi vector column psut_useful_iea_with_details. remove_final boolean tells whether remove Last.stage == \"Final\" rows. Default FALSE. countries countries function applied. country name Country column psut_useful_iea_with_details phi_vecs. Default IEATools::iea_cols$country. year name Year column  psut_useful_iea_with_details phi_vecs. Default IEATools::iea_cols$year. last_stage name \"Last.stage\" column. Default IEATools::iea_cols$last_stage. final string defining final stage. Default IEATools::all_stages$final.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_cols_from_PSUTUsefulIEAWithDetails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","text":"version psut_useful_iea_with_details cols_to_remove removed.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_cols_from_PSUTUsefulIEAWithDetails.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove columns from the PSUTUsefulIEAWithDetails target — remove_cols_from_PSUTUsefulIEAWithDetails","text":"function enables mapping countries.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_non_energy_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Non-energy use from energy conversion chains — remove_non_energy_use","title":"Remove Non-energy use from energy conversion chains — remove_non_energy_use","text":"helpful remove Non-energy use ECCs. function calls Recca::remove_neu().","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_non_energy_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Non-energy use from energy conversion chains — remove_non_energy_use","text":"","code":"remove_non_energy_use(.psut_mats)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_non_energy_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Non-energy use from energy conversion chains — remove_non_energy_use","text":".psut_mats data frame PSUT matrices.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/remove_non_energy_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Non-energy use from energy conversion chains — remove_non_energy_use","text":"version .psut_mats Non-energy use removed.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/rename_mw_sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"muscle work methodology MWTools package uses slightly different final demand sector names compared IEA IEATools package.. function converts MWTools sector names appropriate IEA sector names.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/rename_mw_sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"","code":"rename_mw_sectors(   .df,   sector_colname = MWTools::mw_constants$sector_col,   original_sector_names = c(MWTools::mw_sectors$agriculture_broad.sector,     MWTools::mw_sectors$transport_sector, MWTools::mw_sectors$services_broad.sector,     MWTools::mw_sectors$industry_broad.sector),   new_sector_names = c(IEATools::other_flows$agriculture_forestry,     IEATools::transport_flows$transport_not_elsewhere_specified,     IEATools::other_flows$commercial_and_public_services,     IEATools::industry_flows$industry_not_elsewhere_specified) )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/rename_mw_sectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":".df data frame muscle work data. sector_colname name sector column. Default MWTools::mw_constants$sector_col. original_sector_names vector string sector names replaced. new_sector_names vector string sector names appear output.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/rename_mw_sectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"data frame renamed sectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/rename_mw_sectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename muscle work sectors to comport with IEA sectors. — rename_mw_sectors","text":"","code":"df <- tibble::tribble(~Sector, ~value,                        MWTools::mw_sectors$transport_sector,         10,                        MWTools::mw_sectors$agriculture_broad.sector, 11,                       MWTools::mw_sectors$services_broad.sector,    12,                       MWTools::mw_sectors$industry_broad.sector,    13,                        \"bogus\",                                      14) df #> # A tibble: 5 × 2 #>   Sector      value #>   <chr>       <dbl> #> 1 Transport      10 #> 2 Agriculture    11 #> 3 Services       12 #> 4 Industry       13 #> 5 bogus          14 rename_mw_sectors(df) #> # A tibble: 5 × 2 #>   Sector                            value #>   <chr>                             <dbl> #> 1 Transport not elsewhere specified    10 #> 2 Agriculture/forestry                 11 #> 3 Commercial and public services       12 #> 4 Industry not elsewhere specified     13 #> 5 bogus                                14"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sample_exemplar_table_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"Gives file path sample exemplar table","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sample_exemplar_table_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"","code":"sample_exemplar_table_path()"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sample_exemplar_table_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"path sample exemplar table bundled package.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sample_exemplar_table_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gives a file path to a sample exemplar table — sample_exemplar_table_path","text":"","code":"sample_exemplar_table_path() #> [1] \"/Users/mkh2/github/PFUPipeline/inst/extdata/Exemplar_Table.xlsx\""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sep_eta_fu_phi_u.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"Choose eta.fu phi.u columns data frame eta.fu phi.u vectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sep_eta_fu_phi_u.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"","code":"sep_eta_fu_phi_u(   eta_fu_phi_u_vecs,   keep = c(IEATools::template_cols$eta_fu, IEATools::template_cols$phi_u),   countries,   country = IEATools::iea_cols$country )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sep_eta_fu_phi_u.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"eta_fu_phi_u_vecs data frame containing metadata columns columns eta_fu (final useful efficiency) phi_u (exergy--energy efficiency ratios). keep Tells column keep, eta_fu phi_u. Must one IEATools::template_cols$eta_fu IEATools::template_cols$phi_u. countries countries analyzed. country See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sep_eta_fu_phi_u.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose eta.fu or phi.u columns from a data frame of eta.fu and phi.u vectors. — sep_eta_fu_phi_u","text":"data frame metadata either eta_fu column phi_u column","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/socioecon_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants for socioeconomic data files — socioecon_cols","title":"Constants for socioeconomic data files — socioecon_cols","text":"string list containing values features socioeconomic data files.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/socioecon_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants for socioeconomic data files — socioecon_cols","text":"","code":"socioecon_cols"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/socioecon_cols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Constants for socioeconomic data files — socioecon_cols","text":"string list 14 entries. isocode_colname name column containing ISO country codes, \"isocode\". year_colname name column containing years, \"Year\". rgdpe_colname name column containing rgdpe values, \"rgdpe\". rgdpo_colname name column containing rgdpo values, \"rgdpo\". rgdpna_colname name column containing rgdpna values, \"rgdpna\". emp_colname name column containing employment values, \"emp\". avh_colname name column containing avh values, \"avh\". hc_colname name column containing hc values, \"hc\". rnna_colname name column containing rnna values, \"rnna\". rkna_colname name column containing rkna values, \"rkna\". K_colname name column containing capital values, \"K\". Kserv_colname name column containing capital services values, \"Kserv\". L_colname name column containing labor values, \"L\". Ladj_colname name column containing quality-adjusted labor values, \"Ladj\".","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/socioecon_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constants for socioeconomic data files — socioecon_cols","text":"","code":"socioecon_cols #> $isocode_colname #> [1] \"isocode\" #>  #> $year_colname #> [1] \"year\" #>  #> $rgdpe_colname #> [1] \"rgdpe\" #>  #> $rgdpo_colname #> [1] \"rgdpo\" #>  #> $rgdpna_colname #> [1] \"rgdpna\" #>  #> $emp_colname #> [1] \"emp\" #>  #> $avh_colname #> [1] \"avh\" #>  #> $hc_colname #> [1] \"hc\" #>  #> $rnna_colname #> [1] \"rnna\" #>  #> $rkna_colname #> [1] \"rkna\" #>  #> $K_colname #> [1] \"K\" #>  #> $Kserv_colname #> [1] \"Kserv\" #>  #> $L_colname #> [1] \"L\" #>  #> $Ladj_colname #> [1] \"Ladj\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/specify.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify the IEA data — specify","title":"Specify the IEA data — specify","text":"Specifies IEA data way amenable drake subtargets. See IEATools::specify_all() details.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/specify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify the IEA data — specify","text":"","code":"specify(BalancedIEAData, countries, country = IEATools::iea_cols$country)"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/specify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify the IEA data — specify","text":"BalancedIEAData IEA data already balanced countries countries specification occur country See IEATools::iea_cols.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/specify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify the IEA data — specify","text":"data frame specified IEA data","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/specify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify the IEA data — specify","text":"","code":"IEATools::sample_iea_data_path() %>%   IEATools::load_tidy_iea_df() %>%   make_balanced(countries = c(\"GHA\", \"ZAF\")) %>%   specify(countries = c(\"GHA\", \"ZAF\")) #> # A tibble: 449 × 11 #>    Country Method Energy.type Last.stage  Year Ledger.side #>    <chr>   <chr>  <chr>       <chr>      <dbl> <chr>       #>  1 GHA     PCM    E           Final       1971 Consumption #>  2 GHA     PCM    E           Final       1971 Consumption #>  3 GHA     PCM    E           Final       1971 Consumption #>  4 GHA     PCM    E           Final       1971 Consumption #>  5 GHA     PCM    E           Final       1971 Consumption #>  6 GHA     PCM    E           Final       1971 Consumption #>  7 GHA     PCM    E           Final       1971 Consumption #>  8 GHA     PCM    E           Final       1971 Consumption #>  9 GHA     PCM    E           Final       1971 Consumption #> 10 GHA     PCM    E           Final       1971 Consumption #> # ℹ 439 more rows #> # ℹ 5 more variables: Flow.aggregation.point <chr>, Flow <chr>, Product <chr>, #> #   Unit <chr>, E.dot <dbl>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sum_phi_vecs.html","id":null,"dir":"Reference","previous_headings":"","what":"Sums phi_pf and phi_u vectors — sum_phi_vecs","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"function verifies rows common two input vectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sum_phi_vecs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"","code":"sum_phi_vecs(   phi_pf_vecs,   phi_u_vecs,   countries,   country = IEATools::iea_cols$country,   last_stage = IEATools::iea_cols$last_stage,   energy_type = IEATools::iea_cols$energy_type,   method = IEATools::iea_cols$method,   phi_pf_colname = IEATools::template_cols$phi_pf,   phi_u_colname = IEATools::template_cols$phi_u,   phi_colname = IEATools::phi_constants_names$phi_colname,   .nrow_diffs = \".nrow_diffs\",   .phi_shape_OK = \".phi_shape_OK\",   .phi_names_OK = \".phi_names_OK\",   .phi_cols_OK = \".phi_cols_OK\",   .phi_sum_OK = \".phi_sum_OK\",   .phi_pf_colnames = \".phi_pf_colnames\",   .phi_u_colnames = \".phi_u_colnames\" )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sum_phi_vecs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"phi_pf_vecs data frame phi_pf vectors. phi_u_vecs data frame phi_u vectors. countries countries want perform task. country, last_stage, energy_type, method See IEATools::iea_cols. phi_pf_colname, phi_u_colname See IEATools::template_cols. phi_colname See IEATools::phi_constants_names. .nrow_diffs, .phi_shape_OK, .phi_names_OK, .phi_cols_OK, .phi_sum_OK, .phi_pf_colnames, .phi_u_colnames Names temporary error-checking columns created internally.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sum_phi_vecs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"data frame summed phi_pf phi_u vectors.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/sum_phi_vecs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sums phi_pf and phi_u vectors — sum_phi_vecs","text":"","code":"phi_pf_vec <- matrix(c(1.1,                        1.05), nrow = 2, ncol = 1,                      dimnames = list(c(\"Coal\", \"Oil\"), \"phi\")) # Make a data frame of phi_pf vectors phi_pf <- tibble::tibble(phi.pf = RCLabels::make_list(phi_pf_vec, n = 2, lenx = 1),                          Country = \"GHA\",                          Year = c(1971, 2000)) phi_u_vec <- matrix(c(0.8,                       0.9,                       0.7), nrow = 3, ncol = 1,                     dimnames = list(c(\"Light\", \"MD\", \"Propulsion\"), \"phi\")) phi_u <- tibble::tibble(phi.u = RCLabels::make_list(phi_u_vec, n = 2, lenx = 1),                         Country = \"GHA\",                         Year = c(1971, 2000)) sum_phi_vecs(phi_pf, phi_u, countries = \"GHA\") #> # A tibble: 2 × 3 #>   Country  Year phi           #>   <chr>   <dbl> <list>        #> 1 GHA      1971 <dbl [5 × 1]> #> 2 GHA      2000 <dbl [5 × 1]>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/target_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Targets cache target names — target_names","title":"Targets cache target names — target_names","text":"string list containing names targets targets.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/target_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Targets cache target names — target_names","text":"","code":"target_names"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/target_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Targets cache target names — target_names","text":"string list 48 entries. countries countries analyzed pipeline. additional_exemplar_countries additional exemplar countries allocations efficiencies can obtained. alloc_and_eff_countries allocation efficiency countries target targets cache, giving countries final--useful allocations efficiencies can drawn final--useful analyses. superset countries analyzed. years years analyzed. iea_data_path path file containing IEA extended energy balance data. country_concordance_path path country concordance file. phi_constants_path path exergy--energy ration (phi) constants. ceda_data_folder path folder containing CEDA data. machine_data_path path folder containing machine data excel files. exemplar_table_path path exemplar table. fu_analysis_folder path folder containing final--useful analyses various countries. report_source_folders path folder containing reports run last step pipeline. report_dest_folder path folder containing reports pipeline. pipeline_caches_folder path folder containing pipeline caches release. pipeline_releases_folder path folder containing releases targets. release boolean telling whether release requested. iea_data IEA data countries. country_concordance_table data frame containing concordance information maps full country names custom 3 letter codes. ceda_data name data frame containing CEDA temperature data read ceda_data_folder. all_machine_data data frame containing eta_fu values. machine_data filtered version all_machine_data containing information alloc_and_eff_countries. socio_econ_data data frame containing socioeconomic data, supplied get_L_K_GDP_data(). balanced_before boolean indicating whether iea_data balanced analysis. usually , value typically FALSE. balanced_iea_data balanced version iea_data. balanced_after balanced_before, balancing. always TRUE. ok_to_proceed boolean telling whether can continue pipeline. target errors balanced_after TRUE. specified data frame containing specified IEA data. psut_final data frame containing specified PSUT format. exemplar_lists data frame lists exemplar countries country countries, maybe . phi_constants data frame constant values exergy--energy ratio (phi). incomplete_allocation_tables data frame final--useful allocation tables, one country. allocation tables may incomplete. completed_allocation_tables data frame completed final--useful allocation tables. completed_efficiency_tables data frame completed final--useful efficiency tables. completed_phi_u_tables data frame completed useful-stage exergy--energy ratios. cmats data frame containing CompletedAllocationTables matrix form. eta_fu_phi_u_vecs data frame containing final--useful efficiency vectors useful exergy--energy ratios. eta_fu_vecs data frame containing final--useful efficiency vectors. phi_u_vecs data frame containing useful exergy--energy ratio vectors. phi_pf_vecs data frame containing primary final exergy--energy ratio vectors. phi_vecs data frame containing exergy--energy ratio vectors. psut_useful data frame containing PSUT matrices useful stage. psut data frame containing PSUT matrices useful stage exergy. allocation_graphs data frame containing final--useful allocation graphs. non_stationary_allocation_graphs data frame containing final--useful allocation graphs, non-stationary data . efficiency_graphs data frame containing final--useful efficiency graphs. phi_graphs data frame containing exergy--energy ratio (phi) graphs. release_psut target release psut target. Contains name target message saying release requested. store_cache target stores targets cache. Contains name target message saying release requested.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/target_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Targets cache target names — target_names","text":"","code":"target_names #> $countries #> [1] \"Countries\" #>  #> $additinoal_exemplar_countries #> [1] \"AdditionalExemplarCountries\" #>  #> $alloc_and_eff_countries #> [1] \"AllocAndEffCountries\" #>  #> $years #> [1] \"Years\" #>  #> $iea_data_path #> [1] \"IEADataPath\" #>  #> $country_concordance_path #> [1] \"CountryConcordancePath\" #>  #> $phi_constants_path #> [1] \"PhiConstantsPath\" #>  #> $ceda_data_folder #> [1] \"CEDADataFolder\" #>  #> $machine_data_path #> [1] \"MachineDataPath\" #>  #> $exemplar_table_path #> [1] \"ExemplarTablePath\" #>  #> $fu_analysis_folder #> [1] \"FUAnalysisFolder\" #>  #> $report_source_folders #> [1] \"ReportsSourceFolders\" #>  #> $report_dest_folder #> [1] \"ReportsDestFolder\" #>  #> $pipeline_caches_folder #> [1] \"PipelineCachesFolder\" #>  #> $pipeline_releases_folder #> [1] \"PipelineReleasesFolder\" #>  #> $release #> [1] \"Release\" #>  #> $iea_data #> [1] \"IEAData\" #>  #> $country_concordance_table #> [1] \"CountryConcordanceTable\" #>  #> $ceda_data #> [1] \"CEDAData\" #>  #> $all_machine_data #> [1] \"AllMachineData\" #>  #> $machine_data #> [1] \"MachineData\" #>  #> $socio_econ_data #> [1] \"SocioEconData\" #>  #> $balanced_before #> [1] \"BalancedBefore\" #>  #> $balanced_iea_data #> [1] \"BalancedIEAData\" #>  #> $balanced_after #> [1] \"BalancedAfter\" #>  #> $ok_to_proceed #> [1] \"OKToProceed\" #>  #> $specified #> [1] \"Specified\" #>  #> $psut_final #> [1] \"PSUTFinal\" #>  #> $exemplar_lists #> [1] \"ExemplarLists\" #>  #> $phi_constants #> [1] \"PhiConstants\" #>  #> $incomplete_allocation_tables #> [1] \"IncompleteAllocationTables\" #>  #> $completed_allocation_tables #> [1] \"CompletedAllocationTables\" #>  #> $completed_efficiency_tables #> [1] \"CompletedEfficiencyTables\" #>  #> $completed_phi_u_tables #> [1] \"CompletedPhiuTables\" #>  #> $cmats #> [1] \"Cmats\" #>  #> $eta_fu_phi_u_vecs #> [1] \"EtafuPhiuvecs\" #>  #> $eta_fu_vecs #> [1] \"Etafuvecs\" #>  #> $phi_u_vecs #> [1] \"Phiuvecs\" #>  #> $phi_pf_vecs #> [1] \"Phipfvecs\" #>  #> $phi_vecs #> [1] \"Phivecs\" #>  #> $psut_useful #> [1] \"PSUTUseful\" #>  #> $psut #> [1] \"PSUT\" #>  #> $allocation_graphs #> [1] \"AllocationGraphs\" #>  #> $non_stationary_allocation_graphs #> [1] \"NonStationaryAllocationGraphs\" #>  #> $efficiency_graphs #> [1] \"EfficiencyGraphs\" #>  #> $phi_graphs #> [1] \"PhiGraphs\" #>  #> $release_psut #> [1] \"ReleasePSUT\" #>  #> $store_cache #> [1] \"StoreCache\" #>"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/verify_mw_energy_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"constructing muscle work PSUT matrices, energy balance verified. Internally, function uses Recca::verify_SUT_energy_balance() ensure everything balanced.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/verify_mw_energy_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"","code":"verify_mw_energy_balance(   .psut_df,   countries,   country = MWTools::mw_cols$country )"},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/verify_mw_energy_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":".psut_df data frame muscle work PSUT matrices. countries countries analyzed. country name country column .psut_df.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/verify_mw_energy_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":"data frame new boolean column \".balanced\" tells whether matrices balanced.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/reference/verify_mw_energy_balance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify energy balance in muscle work PSUT matrices — verify_mw_energy_balance","text":".psut_df zero rows, TRUE returned, enabling pipeline continue, even years muscle work data available.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/news/index.html","id":"pfupipeline-018-2024-02-07","dir":"Changelog","previous_headings":"","what":"PFUPipeline 0.1.8 (2024-02-07)","title":"PFUPipeline 0.1.8 (2024-02-07)","text":"Now producing matrix containing detailed energy information final useful extension. target called PSUTUsefulIEAWithDetails. product called Y_fu_U_EIOU_fu_details.","code":""},{"path":"https://energyeconomydecoupling.github.io/PFUPipeline/news/index.html","id":"pfupipeline-017-2023-12-20-doi","dir":"Changelog","previous_headings":"","what":"PFUPipeline 0.1.7 (2023-12-20)","title":"PFUPipeline 0.1.7 (2023-12-20)","text":"Name change PFUPipeline.","code":""}]
